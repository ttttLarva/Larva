{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"\u9996\u9875"},{"location":"github/01_how_to_pr.html","text":"\u5982\u4f55\u63d0\u4ea4 PR \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u5982\u4f55\u63d0\u4ea4 PR \u4ec0\u4e48\u662f PR \u00b6 GitHub \u4e0a\u4e00\u822c\u901a\u8fc7\u63d0\u4ea4 PR\uff08Pull Request\uff09\u7684\u65b9\u5f0f\uff0c\u50cf\u5f00\u6e90\u9879\u76ee\u5408\u5e76\u4ee3\u7801\u3002 \u5982\u4f55\u8fd8\u6ca1\u6709\u53c2\u4e0e\u8fc7\u5f00\u6e90\u9879\u76ee\u63d0\u4ea4\u8fc7 PR\uff0c\u53ef\u4ee5\u770b\u770b\u672c\u6587\u5c0f\u7cd6\u4ee5 OneFlow\uff08\u5927\u4f6c\uff09 \u4e3a\u4f8b\uff0c\u5982\u4f55\u63d0\u4ea4 PR\u3002 \u4e00\u5171\u6709\u4e00\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a fork \u4ed3\u5e93 \u62c9\u53d6\u6700\u65b0\u4ee3\u7801 \u521b\u5efa\u65b0\u5206\u652f\u5e76\u5728\u65b0\u5206\u652f\u4e0a\u4fee\u6539\u3001commit \u5c06\u5206\u652f\u63a8\u9001\u5230 GitHub \u63d0\u4ea4 PR 1. fork\u4ed3\u5e93 \u00b6 \u53c2\u4e0e\u5f00\u6e90\u9879\u76ee\u7684\u7b2c\u4e00\u6b65\u901a\u5e38\u662f fork \u4ed3\u5e93\uff0c\u5b83\u7684\u610f\u4e49\u7b80\u5355\u800c\u8a00\u5c31\u662f\u590d\u5236\u4e00\u4efd\u4ee3\u7801\u5230\u81ea\u5df1\u7684\u8d26\u53f7\u4e0b\u3002 \u4ee5 OneFlow-Inc/oneflow \u4e3a\u4f8b\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 fork \u6309\u94ae\u3002 \u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u5728\u81ea\u5df1\u7684\u8d26\u53f7\u4e0b\uff0c\u6709 oneflow \u4ed3\u5e93\u5566\u3002 2. \u62c9\u53d6\u6700\u65b0\u4ee3\u7801 \u00b6 \u63a5\u7740\uff0c\u5c06\u6211\u4eec\u8d26\u53f7\u4e0b\u7684\u4ed3\u5e93\uff0c\u514b\u9686\u4e00\u4efd\u5230\u672c\u5730\uff0c\u65b9\u4fbf\u4fee\u6539\u548c\u63d0\u4ea4\u4ee3\u7801\u3002 \u9996\u5148\u590d\u5236\u4ed3\u5e93\u540d\uff1a\u5728\u81ea\u5df1\u8d26\u53f7\u4e0b\u7684 oneflow \u4ed3\u5e93\u9875\u9762\u83b7\u53d6\u4ed3\u5e93\u5730\u5740 \u63a5\u7740\u514b\u9686\u5230\u672c\u5730\uff0c\u6253\u5f00\u63a7\u5236\u53f0\uff1a git clone https://github.com/ttttLarva/oneflow.git \u4ee5\u4e0a\u7684 https://github.com/ttttLarva/oneflow.git \u662f\u5c0f\u7cd6\u7684\u8d26\u53f7\u4e0b\u7684\u5730\u5740\uff0c\u8bb0\u5f97\u66ff\u6362\u6210\u4f60\u81ea\u5df1\u5bf9\u5e94\u7684\u4ed3\u5e93\u54e6\u3002 3. \u521b\u5efa\u65b0\u5206\u652f \u00b6 \u5728\u6700\u65b0\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7 git checkout -b \u547d\u4ee4\uff0c\u521b\u5efa\u65b0\u7684\u5206\u652f\u3002\u5e76\u5728\u8fd9\u4e2a\u65b0\u5206\u652f\u4e0a\u8fdb\u884c\u4fee\u6539\u548c commit \u4ee3\u7801\u3002 git checkout -b new_branch \u4ee5\u4e0a\u7684 new_branch \u5c31\u662f\u65b0\u5206\u652f\u540d\u3002\u8be5\u547d\u4ee4\u4f1a\u521b\u5efa new_branch \u5206\u652f\u5e76\u5207\u6362\u5230\u8fd9\u4e2a\u65b0\u5206\u652f\u4e0a\u3002 \u4fee\u6539\u6587\u4ef6\u5e76\u63d0\u4ea4\u4ee3\u7801 git add . git commit 4. \u63a8\u9001\u5230github \u00b6 \u63d0\u4ea4\u5230\u672c\u5730\u4ed3\u5e93\u6210\u529f\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u8981\u5c06\u6539\u52a8\u63d0\u4ea4\u5230\u8fdc\u7a0b\u4ed3\u5e93\u5566\uff0c\u4f7f\u7528\u547d\u4ee4\uff1a git push origin new_branch \u5176\u5b9e origin \u5c31\u662f\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\uff08 https://github.com/ttttLarva/oneflow.git \uff09\u7684\u522b\u540d\uff0c new_branch \u662f\u8fdc\u7a0b\u4ed3\u5e93\u5206\u652f\u540d\uff0c\u5f3a\u70c8\u5efa\u8bae\u4e0e\u672c\u5730\u5206\u652f\u540d\u4fdd\u6301\u4e00\u81f4\u3002 5. \u521b\u5efa PR \u00b6 \u5728\u7b2c\u4e00\u6b21 push \u5230\u8fdc\u7a0b\u4ed3\u5e93\u6210\u529f\u540e\uff0c\u63a7\u5236\u53f0\u4f1a\u51fa\u73b0\u4e00\u4e2a\u94fe\u63a5\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u94fe\u63a5\u590d\u5236\u5230\u6d4f\u89c8\u5668\u6253\u5f00\uff0c\u5c31\u53ef\u4ee5\u8df3\u8f6c\u5230\u521b\u5efaPR\u7684\u754c\u9762\uff1a \u4ee5\u4e0a\u5de6\u8fb9\u7ea2\u8272\uff1a\u4ee3\u8868\u6211\u4eec\u8981\u60f3\u8981\u628a\u8fd9\u4e2a\u6539\u52a8\u5408\u5e76\u5230 OneFlow \u7684\u54ea\u4e00\u4e2a\u5206\u652f \u4ee5\u4e0a\u53f3\u8fb9\u84dd\u8272\uff1a\u4ee3\u8868\u6211\u4eec\u524d\u9762\u6539\u52a8\u7684\u5206\u652f \u63a5\u7740\u5c31\u662f\u4e00\u4e9b\u4fe1\u606f\u586b\u5199\u5566\uff0c\u5199\u597d\u6807\u9898\u548c\u5bf9\u8fd9\u7b14\u6539\u52a8\u7684\u63cf\u8ff0\uff0c\u70b9\u51fb Create \u6309\u94ae\uff0cPR \u5c31\u521b\u5efa\u6210\u529f\u4e86\u3002 \u6700\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 OneFlow \u7684\u4ed3\u5e93\u4e0b\u770b\u5230\u6211\u4eec\u63d0\u4ea4\u7684PR\u5566 \u6269\u5c55\u9605\u8bfb \u00b6 GitHub \u5b98\u7f51\uff1aCollaborate with pull requests Git \u57fa\u672c\u64cd\u4f5c\u5b98\u65b9\u6587\u6863","title":"\u5982\u4f55\u63d0\u4ea4 PR"},{"location":"github/01_how_to_pr.html#pr","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u5982\u4f55\u63d0\u4ea4 PR","title":"\u5982\u4f55\u63d0\u4ea4 PR"},{"location":"github/01_how_to_pr.html#pr_1","text":"GitHub \u4e0a\u4e00\u822c\u901a\u8fc7\u63d0\u4ea4 PR\uff08Pull Request\uff09\u7684\u65b9\u5f0f\uff0c\u50cf\u5f00\u6e90\u9879\u76ee\u5408\u5e76\u4ee3\u7801\u3002 \u5982\u4f55\u8fd8\u6ca1\u6709\u53c2\u4e0e\u8fc7\u5f00\u6e90\u9879\u76ee\u63d0\u4ea4\u8fc7 PR\uff0c\u53ef\u4ee5\u770b\u770b\u672c\u6587\u5c0f\u7cd6\u4ee5 OneFlow\uff08\u5927\u4f6c\uff09 \u4e3a\u4f8b\uff0c\u5982\u4f55\u63d0\u4ea4 PR\u3002 \u4e00\u5171\u6709\u4e00\u4e0b\u51e0\u4e2a\u6b65\u9aa4\uff1a fork \u4ed3\u5e93 \u62c9\u53d6\u6700\u65b0\u4ee3\u7801 \u521b\u5efa\u65b0\u5206\u652f\u5e76\u5728\u65b0\u5206\u652f\u4e0a\u4fee\u6539\u3001commit \u5c06\u5206\u652f\u63a8\u9001\u5230 GitHub \u63d0\u4ea4 PR","title":"\u4ec0\u4e48\u662f PR"},{"location":"github/01_how_to_pr.html#1-fork","text":"\u53c2\u4e0e\u5f00\u6e90\u9879\u76ee\u7684\u7b2c\u4e00\u6b65\u901a\u5e38\u662f fork \u4ed3\u5e93\uff0c\u5b83\u7684\u610f\u4e49\u7b80\u5355\u800c\u8a00\u5c31\u662f\u590d\u5236\u4e00\u4efd\u4ee3\u7801\u5230\u81ea\u5df1\u7684\u8d26\u53f7\u4e0b\u3002 \u4ee5 OneFlow-Inc/oneflow \u4e3a\u4f8b\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 fork \u6309\u94ae\u3002 \u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u5728\u81ea\u5df1\u7684\u8d26\u53f7\u4e0b\uff0c\u6709 oneflow \u4ed3\u5e93\u5566\u3002","title":"1. fork\u4ed3\u5e93"},{"location":"github/01_how_to_pr.html#2","text":"\u63a5\u7740\uff0c\u5c06\u6211\u4eec\u8d26\u53f7\u4e0b\u7684\u4ed3\u5e93\uff0c\u514b\u9686\u4e00\u4efd\u5230\u672c\u5730\uff0c\u65b9\u4fbf\u4fee\u6539\u548c\u63d0\u4ea4\u4ee3\u7801\u3002 \u9996\u5148\u590d\u5236\u4ed3\u5e93\u540d\uff1a\u5728\u81ea\u5df1\u8d26\u53f7\u4e0b\u7684 oneflow \u4ed3\u5e93\u9875\u9762\u83b7\u53d6\u4ed3\u5e93\u5730\u5740 \u63a5\u7740\u514b\u9686\u5230\u672c\u5730\uff0c\u6253\u5f00\u63a7\u5236\u53f0\uff1a git clone https://github.com/ttttLarva/oneflow.git \u4ee5\u4e0a\u7684 https://github.com/ttttLarva/oneflow.git \u662f\u5c0f\u7cd6\u7684\u8d26\u53f7\u4e0b\u7684\u5730\u5740\uff0c\u8bb0\u5f97\u66ff\u6362\u6210\u4f60\u81ea\u5df1\u5bf9\u5e94\u7684\u4ed3\u5e93\u54e6\u3002","title":"2. \u62c9\u53d6\u6700\u65b0\u4ee3\u7801"},{"location":"github/01_how_to_pr.html#3","text":"\u5728\u6700\u65b0\u4ee3\u7801\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7 git checkout -b \u547d\u4ee4\uff0c\u521b\u5efa\u65b0\u7684\u5206\u652f\u3002\u5e76\u5728\u8fd9\u4e2a\u65b0\u5206\u652f\u4e0a\u8fdb\u884c\u4fee\u6539\u548c commit \u4ee3\u7801\u3002 git checkout -b new_branch \u4ee5\u4e0a\u7684 new_branch \u5c31\u662f\u65b0\u5206\u652f\u540d\u3002\u8be5\u547d\u4ee4\u4f1a\u521b\u5efa new_branch \u5206\u652f\u5e76\u5207\u6362\u5230\u8fd9\u4e2a\u65b0\u5206\u652f\u4e0a\u3002 \u4fee\u6539\u6587\u4ef6\u5e76\u63d0\u4ea4\u4ee3\u7801 git add . git commit","title":"3. \u521b\u5efa\u65b0\u5206\u652f"},{"location":"github/01_how_to_pr.html#4-github","text":"\u63d0\u4ea4\u5230\u672c\u5730\u4ed3\u5e93\u6210\u529f\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u8981\u5c06\u6539\u52a8\u63d0\u4ea4\u5230\u8fdc\u7a0b\u4ed3\u5e93\u5566\uff0c\u4f7f\u7528\u547d\u4ee4\uff1a git push origin new_branch \u5176\u5b9e origin \u5c31\u662f\u8fdc\u7a0b\u4ed3\u5e93\u5730\u5740\uff08 https://github.com/ttttLarva/oneflow.git \uff09\u7684\u522b\u540d\uff0c new_branch \u662f\u8fdc\u7a0b\u4ed3\u5e93\u5206\u652f\u540d\uff0c\u5f3a\u70c8\u5efa\u8bae\u4e0e\u672c\u5730\u5206\u652f\u540d\u4fdd\u6301\u4e00\u81f4\u3002","title":"4. \u63a8\u9001\u5230github"},{"location":"github/01_how_to_pr.html#5-pr","text":"\u5728\u7b2c\u4e00\u6b21 push \u5230\u8fdc\u7a0b\u4ed3\u5e93\u6210\u529f\u540e\uff0c\u63a7\u5236\u53f0\u4f1a\u51fa\u73b0\u4e00\u4e2a\u94fe\u63a5\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u94fe\u63a5\u590d\u5236\u5230\u6d4f\u89c8\u5668\u6253\u5f00\uff0c\u5c31\u53ef\u4ee5\u8df3\u8f6c\u5230\u521b\u5efaPR\u7684\u754c\u9762\uff1a \u4ee5\u4e0a\u5de6\u8fb9\u7ea2\u8272\uff1a\u4ee3\u8868\u6211\u4eec\u8981\u60f3\u8981\u628a\u8fd9\u4e2a\u6539\u52a8\u5408\u5e76\u5230 OneFlow \u7684\u54ea\u4e00\u4e2a\u5206\u652f \u4ee5\u4e0a\u53f3\u8fb9\u84dd\u8272\uff1a\u4ee3\u8868\u6211\u4eec\u524d\u9762\u6539\u52a8\u7684\u5206\u652f \u63a5\u7740\u5c31\u662f\u4e00\u4e9b\u4fe1\u606f\u586b\u5199\u5566\uff0c\u5199\u597d\u6807\u9898\u548c\u5bf9\u8fd9\u7b14\u6539\u52a8\u7684\u63cf\u8ff0\uff0c\u70b9\u51fb Create \u6309\u94ae\uff0cPR \u5c31\u521b\u5efa\u6210\u529f\u4e86\u3002 \u6700\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 OneFlow \u7684\u4ed3\u5e93\u4e0b\u770b\u5230\u6211\u4eec\u63d0\u4ea4\u7684PR\u5566","title":"5. \u521b\u5efa PR"},{"location":"github/01_how_to_pr.html#_1","text":"GitHub \u5b98\u7f51\uff1aCollaborate with pull requests Git \u57fa\u672c\u64cd\u4f5c\u5b98\u65b9\u6587\u6863","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"github/02_learn_from_pr.html","text":"\u5982\u4f55\u901a\u8fc7 PR \u5b66\u4e60 & VS Code\u597d\u7528\u63d2\u4ef6\u5206\u4eab \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u901a\u8fc7PR\u5b66\u4e60&VS Code\u63d2\u4ef6\u5206\u4eab \u5982\u4f55\u901a\u8fc7 PR \u5b66\u4e60 \u00b6 \u4eca\u5929\u7ed9\u5927\u5bb6\u5206\u4eab\u7684\u662f\u5982\u4f55\u5728github\u4e0a\u901a\u8fc7\u641c\u7d22PR(pull requests)\u8fdb\u884c\u81ea\u6211\u80fd\u529b\u7684\u62d3\u5c55\u3002 \u9996\u5148\u5c31\u8981\u5b66\u4f1a\u8bfbPR\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u7684PR\u4e3a\u4f8b\u5b50\uff0c\u6765\u8bf4\u660ePR\u7684\u5404\u4e2a\u5b57\u6bb5\uff0c\u5e76\u600e\u4e48\u901a\u8fc7PR\u5b66\u4e60\u3002 PR\u5206\u4e3a\u4e24\u7c7b\uff1a Open\uff1a\u6b63\u5728\u5408\u5e76\uff0c\u8fd8\u5728\u8bc4\u5ba1\u7684PR Clode\uff1a\u5df2\u7ecf\u5408\u5e76\uff0c\u6216\u8005\u653e\u5f03\u5408\u5e76\u7684PR PR\u6807\u9898\u8fb9\u7684\u5f69\u8272\u6807\u7b7e\uff0c\u662f\u5bf9\u8fd9\u4e2aPR\u7684\u7b80\u5355\u5206\u7c7b\u3002 github\u8fd8\u81ea\u5e26\u4e86\u591a\u79cd\u641c\u7d22\u529f\u80fd\uff0c\u6bd4\u5982\u53ef\u4ee5\u7b5b\u9009\u67d0\u4e2a\u611f\u5174\u8da3\u7684\u4f5c\u8005\u63d0\u4ea4\u7684PR \u90a3\u4e48\u5177\u4f53\u5982\u4f55\u901a\u8fc7PR\u8fdb\u884c\u5b66\u4e60\u5462\uff1f \u8fdb\u5165PR\u8be6\u60c5\u754c\u9762 Conversation\uff1a\u8fd9\u4e00\u680f\u7684\u4e3b\u8d34\uff0c\u4e00\u822c\u4f1a\u63cf\u8ff0\u8fd9\u4e2aPR\u6539\u52a8\u7684\u539f\u56e0\u3001\u529f\u80fd\u7136\u540ereviewer\u4f1a\u8bc4\u5ba1\u8be5PR\u3002reviewer\u5408PR\u4f5c\u8005\u4f1a\u5728\u8fd9\u91cc\u5c55\u5f00\u5bf9\u8bdd\u8ba8\u8bba Files Changed\uff1a\u5305\u542b\u4e86\u8be5PR\u7684\u6539\u52a8\u9879\uff0c\u7ea2\u8272\u662fPR\u4f5c\u8005\u5220\u9664\u7684\u5185\u5bb9\uff0c\u7eff\u8272\u662f\u65b0\u589e\u7684\u5185\u5bb9 \u8d85\u597d\u7528\u7684vs\u63d2\u4ef6\u5206\u4eab \u00b6 \u5982\u679c\u8981\u6bcf\u6b21\u90fd\u70b9\u5f00github\u4ed3\u5e93\uff0c\u518d\u5bf9PR\u8fdb\u884c\u5b66\u4e60\uff0c\u53ef\u80fd\u4e0d\u662f\u5f88\u4fbf\u6377\uff1b\u56e0\u6b64\u63a8\u8350\u4e00\u4e2avscode\u63d2\u4ef6\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u4ed3\u5e93\u5c31\u8ba9\u6211\u4eec\u67e5\u770b\u5230PR\u3002 \u5f3a\u70c8\u63a8\u8350\uff1a Git History Diff \u63d2\u4ef6 \u5177\u4f53\u6709\u591a\u597d\u7528\u5462\uff1f\u53bb\u770b\u770b\u89c6\u9891\u540e\uff0c\u5927\u5bb6\u5feb\u5feb\u52a8\u624b\u4e0b\u8f7d\u4e0b\u6765\u8bd5\u8bd5\u5427~","title":"\u5982\u4f55\u901a\u8fc7 PR \u5b66\u4e60"},{"location":"github/02_learn_from_pr.html#pr-vs-code","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u901a\u8fc7PR\u5b66\u4e60&VS Code\u63d2\u4ef6\u5206\u4eab","title":"\u5982\u4f55\u901a\u8fc7 PR \u5b66\u4e60 &amp; VS Code\u597d\u7528\u63d2\u4ef6\u5206\u4eab"},{"location":"github/02_learn_from_pr.html#pr","text":"\u4eca\u5929\u7ed9\u5927\u5bb6\u5206\u4eab\u7684\u662f\u5982\u4f55\u5728github\u4e0a\u901a\u8fc7\u641c\u7d22PR(pull requests)\u8fdb\u884c\u81ea\u6211\u80fd\u529b\u7684\u62d3\u5c55\u3002 \u9996\u5148\u5c31\u8981\u5b66\u4f1a\u8bfbPR\uff0c\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u7684PR\u4e3a\u4f8b\u5b50\uff0c\u6765\u8bf4\u660ePR\u7684\u5404\u4e2a\u5b57\u6bb5\uff0c\u5e76\u600e\u4e48\u901a\u8fc7PR\u5b66\u4e60\u3002 PR\u5206\u4e3a\u4e24\u7c7b\uff1a Open\uff1a\u6b63\u5728\u5408\u5e76\uff0c\u8fd8\u5728\u8bc4\u5ba1\u7684PR Clode\uff1a\u5df2\u7ecf\u5408\u5e76\uff0c\u6216\u8005\u653e\u5f03\u5408\u5e76\u7684PR PR\u6807\u9898\u8fb9\u7684\u5f69\u8272\u6807\u7b7e\uff0c\u662f\u5bf9\u8fd9\u4e2aPR\u7684\u7b80\u5355\u5206\u7c7b\u3002 github\u8fd8\u81ea\u5e26\u4e86\u591a\u79cd\u641c\u7d22\u529f\u80fd\uff0c\u6bd4\u5982\u53ef\u4ee5\u7b5b\u9009\u67d0\u4e2a\u611f\u5174\u8da3\u7684\u4f5c\u8005\u63d0\u4ea4\u7684PR \u90a3\u4e48\u5177\u4f53\u5982\u4f55\u901a\u8fc7PR\u8fdb\u884c\u5b66\u4e60\u5462\uff1f \u8fdb\u5165PR\u8be6\u60c5\u754c\u9762 Conversation\uff1a\u8fd9\u4e00\u680f\u7684\u4e3b\u8d34\uff0c\u4e00\u822c\u4f1a\u63cf\u8ff0\u8fd9\u4e2aPR\u6539\u52a8\u7684\u539f\u56e0\u3001\u529f\u80fd\u7136\u540ereviewer\u4f1a\u8bc4\u5ba1\u8be5PR\u3002reviewer\u5408PR\u4f5c\u8005\u4f1a\u5728\u8fd9\u91cc\u5c55\u5f00\u5bf9\u8bdd\u8ba8\u8bba Files Changed\uff1a\u5305\u542b\u4e86\u8be5PR\u7684\u6539\u52a8\u9879\uff0c\u7ea2\u8272\u662fPR\u4f5c\u8005\u5220\u9664\u7684\u5185\u5bb9\uff0c\u7eff\u8272\u662f\u65b0\u589e\u7684\u5185\u5bb9","title":"\u5982\u4f55\u901a\u8fc7 PR \u5b66\u4e60"},{"location":"github/02_learn_from_pr.html#vs","text":"\u5982\u679c\u8981\u6bcf\u6b21\u90fd\u70b9\u5f00github\u4ed3\u5e93\uff0c\u518d\u5bf9PR\u8fdb\u884c\u5b66\u4e60\uff0c\u53ef\u80fd\u4e0d\u662f\u5f88\u4fbf\u6377\uff1b\u56e0\u6b64\u63a8\u8350\u4e00\u4e2avscode\u63d2\u4ef6\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u4ed3\u5e93\u5c31\u8ba9\u6211\u4eec\u67e5\u770b\u5230PR\u3002 \u5f3a\u70c8\u63a8\u8350\uff1a Git History Diff \u63d2\u4ef6 \u5177\u4f53\u6709\u591a\u597d\u7528\u5462\uff1f\u53bb\u770b\u770b\u89c6\u9891\u540e\uff0c\u5927\u5bb6\u5feb\u5feb\u52a8\u624b\u4e0b\u8f7d\u4e0b\u6765\u8bd5\u8bd5\u5427~","title":"\u8d85\u597d\u7528\u7684vs\u63d2\u4ef6\u5206\u4eab"},{"location":"github/03_SSH_for_github.html","text":"github SSH\u514d\u5bc6\u7801\u767b\u5f55 \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a github SSH\u514d\u5bc6\u7801\u767b\u5f55 \u4ec0\u4e48\u662fSSH \u00b6 \u5982\u4e0a\u56fe\uff0c\u5728github\u4ed3\u5e93\u7684Code\u680f\uff0c\u53ef\u4ee5\u67e5\u770b\u5230SSH\u6807\u7b7e\u3002 SSH\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u767b\u5f55\u534f\u8bae\uff0c\u4f7f\u7528SSH\u7684\u597d\u5904\u662f\u4e0d\u7528\u5728\u4e0b\u8f7d\u6216\u8005\u4e0a\u4f20\u4ee3\u7801\u65f6\uff0c\u6bcf\u6b21\u90fd\u8f93\u5165\u8d26\u53f7\u5bc6\u7801\u3002 \u914d\u7f6eSSH\u8fde\u63a5github \u00b6 \u5177\u4f53\u53ef\u53c2\u8003https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh \u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u672c\u5730\u751f\u6210\u5bc6\u94a5\u5bf9 \u5c06\u516c\u94a5\u6dfb\u52a0\u5230github \u6d4b\u8bd5\u4f7f\u7528 \u672c\u5730\u751f\u6210\u5bc6\u94a5\u5bf9 \u00b6 win+R\u6253\u5f00\u63a7\u5236\u53f0\uff0c\u4f7f\u7528\u547d\u4ee4\uff1a ssh-keygen -t rsa -b 4096 -C \"\u6700\u597d\u4e3agithub\u7684\u8d26\u53f7\" \u540e\u9762\u4e00\u8def\u76f4\u63a5\u56de\u8f66 \u63a5\u7740\u5c31\u5728\uff08\u7528\u6237/.ssh\uff09\u76ee\u5f55\u4e0b\u751f\u6210\u4e86\u4e24\u4e2a\u6587\u4ef6 id_rsa\u662f\u79c1\u94a5\u6587\u4ef6 id_rsa.pub\u662f\u516c\u94a5\u6587\u4ef6 \u5c06\u516c\u94a5\u6dfb\u52a0\u5230github \u00b6 \u6253\u5f00github\uff0c\u70b9\u51fb\u4e2a\u4eba\u9875\u9762\u7684\u5934\u50cf\uff0c\u70b9\u51fb Settings \u70b9\u51fb SSH and GPG keys \u70b9\u51fb New SSH Key \u6253\u5f00\u7b2c\u4e8c\u6b65\u5728\u672c\u5730\u751f\u6210\u7684 id_rsa.pub \u6587\u4ef6\uff0c\u5c06\u91cc\u9762\u7684\u6240\u6709\u5185\u5bb9\u590d\u5236\u5230\u5982\u4e0b\u5bf9\u8bdd\u6846\u3002 \u6700\u7ec8\u70b9\u51fb Add SSH Key \u6309\u94ae \u5c31\u80fd\u6210\u529f\u6dfb\u52a0\u5566 \u6d4b\u8bd5\u4f7f\u7528 \u00b6 \u63a5\u7740\u4f7f\u7528\u547d\u4ee4\uff1a ssh -T git@github.com \u68c0\u9a8c\u662f\u5426\u914d\u7f6e\u6210\u529f \u6ce8\u610f\uff1a\u7b2c\u4e00\u6b21\u8fde\u63a5\uff0c\u4f1a\u6709\u63d0\u793a\u662f\u5426\u4fe1\u4efbgithub\u670d\u52a1\u5668\uff0c\u6211\u4eec\u9700\u8981\u8f93\u5165yes","title":"github SSH\u514d\u5bc6\u7801\u767b\u5f55\u8bbe\u7f6e"},{"location":"github/03_SSH_for_github.html#github-ssh","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a github SSH\u514d\u5bc6\u7801\u767b\u5f55","title":"github SSH\u514d\u5bc6\u7801\u767b\u5f55"},{"location":"github/03_SSH_for_github.html#ssh","text":"\u5982\u4e0a\u56fe\uff0c\u5728github\u4ed3\u5e93\u7684Code\u680f\uff0c\u53ef\u4ee5\u67e5\u770b\u5230SSH\u6807\u7b7e\u3002 SSH\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u767b\u5f55\u534f\u8bae\uff0c\u4f7f\u7528SSH\u7684\u597d\u5904\u662f\u4e0d\u7528\u5728\u4e0b\u8f7d\u6216\u8005\u4e0a\u4f20\u4ee3\u7801\u65f6\uff0c\u6bcf\u6b21\u90fd\u8f93\u5165\u8d26\u53f7\u5bc6\u7801\u3002","title":"\u4ec0\u4e48\u662fSSH"},{"location":"github/03_SSH_for_github.html#sshgithub","text":"\u5177\u4f53\u53ef\u53c2\u8003https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh \u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a \u672c\u5730\u751f\u6210\u5bc6\u94a5\u5bf9 \u5c06\u516c\u94a5\u6dfb\u52a0\u5230github \u6d4b\u8bd5\u4f7f\u7528","title":"\u914d\u7f6eSSH\u8fde\u63a5github"},{"location":"github/03_SSH_for_github.html#_1","text":"win+R\u6253\u5f00\u63a7\u5236\u53f0\uff0c\u4f7f\u7528\u547d\u4ee4\uff1a ssh-keygen -t rsa -b 4096 -C \"\u6700\u597d\u4e3agithub\u7684\u8d26\u53f7\" \u540e\u9762\u4e00\u8def\u76f4\u63a5\u56de\u8f66 \u63a5\u7740\u5c31\u5728\uff08\u7528\u6237/.ssh\uff09\u76ee\u5f55\u4e0b\u751f\u6210\u4e86\u4e24\u4e2a\u6587\u4ef6 id_rsa\u662f\u79c1\u94a5\u6587\u4ef6 id_rsa.pub\u662f\u516c\u94a5\u6587\u4ef6","title":"\u672c\u5730\u751f\u6210\u5bc6\u94a5\u5bf9"},{"location":"github/03_SSH_for_github.html#github","text":"\u6253\u5f00github\uff0c\u70b9\u51fb\u4e2a\u4eba\u9875\u9762\u7684\u5934\u50cf\uff0c\u70b9\u51fb Settings \u70b9\u51fb SSH and GPG keys \u70b9\u51fb New SSH Key \u6253\u5f00\u7b2c\u4e8c\u6b65\u5728\u672c\u5730\u751f\u6210\u7684 id_rsa.pub \u6587\u4ef6\uff0c\u5c06\u91cc\u9762\u7684\u6240\u6709\u5185\u5bb9\u590d\u5236\u5230\u5982\u4e0b\u5bf9\u8bdd\u6846\u3002 \u6700\u7ec8\u70b9\u51fb Add SSH Key \u6309\u94ae \u5c31\u80fd\u6210\u529f\u6dfb\u52a0\u5566","title":"\u5c06\u516c\u94a5\u6dfb\u52a0\u5230github"},{"location":"github/03_SSH_for_github.html#_2","text":"\u63a5\u7740\u4f7f\u7528\u547d\u4ee4\uff1a ssh -T git@github.com \u68c0\u9a8c\u662f\u5426\u914d\u7f6e\u6210\u529f \u6ce8\u610f\uff1a\u7b2c\u4e00\u6b21\u8fde\u63a5\uff0c\u4f1a\u6709\u63d0\u793a\u662f\u5426\u4fe1\u4efbgithub\u670d\u52a1\u5668\uff0c\u6211\u4eec\u9700\u8981\u8f93\u5165yes","title":"\u6d4b\u8bd5\u4f7f\u7528"},{"location":"github/04_beauty_code.html","text":"\u7f8e\u5316\u4ee3\u7801\u5de5\u5177\u5206\u4eab \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u7f8e\u5316\u4ee3\u7801\u5de5\u5177\u5206\u4eab \u672c\u671f\u89c6\u9891\u548c\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\u600e\u4e48\u8ba9\u81ea\u5df1\u7684\u4ee3\u7801\u53d8\"\u6f02\u4eae\"\u3002 \u4ee3\u7801\u7f16\u7a0b\u89c4\u8303\uff1a\"\u534e\u4e3aC\u8bed\u8a00\u7f16\u7a0b\u89c4\u8303\" \u548c \"\u5fae\u8f6f\u4e00\u7ad9\u5f0f\u7f16\u7801\u6807\u51c6\" \u5f15\u5165 \u00b6 \u5728\u5b66\u4e60\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u65f6\uff0c\u6211\u53d1\u73b0\u7528\u547d\u4ee4 make of_format \u5c31\u53ef\u4ee5\u81ea\u52a8\u7f8e\u5316\u4ee3\u7801\u3002\u6240\u4ee5\u5c31\u8ffd\u6eaf\u4e86\u4ee5\u4e0a\u547d\u4ee4\u7684\u5b9e\u73b0\uff0c\u53d1\u73b0\u4e86black\u548cclang-format\u8fd9\u4e24\u4e2a\u547d\u4ee4 black\u548cclang-format\u5de5\u5177 \u00b6 \u662f\u4ec0\u4e48 black \u662fpython\u7684\u4e00\u4e2a\u7b2c\u4e09\u65b9\u5e93\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316python\u4ee3\u7801 clang-format \u662f\u4e00\u4e2a\u800c\u7cbe\u81f4\u6587\u4ef6\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316C++\u3001JAVA\u4ee3\u7801 \u600e\u4e48\u7528 black\u5de5\u5177 \u5b89\u88c5black\u5de5\u5177 pip insatll black \u4f7f\u7528\u65b9\u6cd5 python -m black \u8def\u5f84/\u6587\u4ef6\u540d clang-format \u5b89\u88c5 clang-format\u662fLLVM\u5de5\u5177\u96c6\u4e2d\u7684\u4e00\u6b3e\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5LLVM\u83b7\u53d6\u3002\u4e0b\u8f7d\u5730\u5740https://releases.llvm.org/ \u4f7f\u7528\u65b9\u6cd5 clang-format \u8def\u5f84/\u6587\u4ef6\u540d","title":"\u7f8e\u5316\u4ee3\u7801\u5de5\u5177\u5206\u4eab"},{"location":"github/04_beauty_code.html#_1","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u7f8e\u5316\u4ee3\u7801\u5de5\u5177\u5206\u4eab \u672c\u671f\u89c6\u9891\u548c\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\u600e\u4e48\u8ba9\u81ea\u5df1\u7684\u4ee3\u7801\u53d8\"\u6f02\u4eae\"\u3002 \u4ee3\u7801\u7f16\u7a0b\u89c4\u8303\uff1a\"\u534e\u4e3aC\u8bed\u8a00\u7f16\u7a0b\u89c4\u8303\" \u548c \"\u5fae\u8f6f\u4e00\u7ad9\u5f0f\u7f16\u7801\u6807\u51c6\"","title":"\u7f8e\u5316\u4ee3\u7801\u5de5\u5177\u5206\u4eab"},{"location":"github/04_beauty_code.html#_2","text":"\u5728\u5b66\u4e60\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u65f6\uff0c\u6211\u53d1\u73b0\u7528\u547d\u4ee4 make of_format \u5c31\u53ef\u4ee5\u81ea\u52a8\u7f8e\u5316\u4ee3\u7801\u3002\u6240\u4ee5\u5c31\u8ffd\u6eaf\u4e86\u4ee5\u4e0a\u547d\u4ee4\u7684\u5b9e\u73b0\uff0c\u53d1\u73b0\u4e86black\u548cclang-format\u8fd9\u4e24\u4e2a\u547d\u4ee4","title":"\u5f15\u5165"},{"location":"github/04_beauty_code.html#blackclang-format","text":"\u662f\u4ec0\u4e48 black \u662fpython\u7684\u4e00\u4e2a\u7b2c\u4e09\u65b9\u5e93\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316python\u4ee3\u7801 clang-format \u662f\u4e00\u4e2a\u800c\u7cbe\u81f4\u6587\u4ef6\uff0c\u53ef\u4ee5\u683c\u5f0f\u5316C++\u3001JAVA\u4ee3\u7801 \u600e\u4e48\u7528 black\u5de5\u5177 \u5b89\u88c5black\u5de5\u5177 pip insatll black \u4f7f\u7528\u65b9\u6cd5 python -m black \u8def\u5f84/\u6587\u4ef6\u540d clang-format \u5b89\u88c5 clang-format\u662fLLVM\u5de5\u5177\u96c6\u4e2d\u7684\u4e00\u6b3e\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c5LLVM\u83b7\u53d6\u3002\u4e0b\u8f7d\u5730\u5740https://releases.llvm.org/ \u4f7f\u7528\u65b9\u6cd5 clang-format \u8def\u5f84/\u6587\u4ef6\u540d","title":"black\u548cclang-format\u5de5\u5177"},{"location":"github/05_get_started_with_Markdown.html","text":"\u5feb\u901f\u4e0a\u624b Markdown \u00b6 Bilibili \u89c6\u9891\u4f20\u9001\u95e8\uff1a \u5feb\u901f\u4e0a\u624b Markdown \u4ec0\u4e48\u662f Markdown \u00b6 Markdown \u662f\u4e00\u79cd\u6807\u8bb0\u6027\u8bed\u8a00\uff0c\u5728 GitHub \u4e0a\u63d0\u4ea4 issue\u3001PR\uff0c\u9ed8\u8ba4\u90fd\u4f7f\u7528\u7684\u662f Markdown\u3002 Markdown \u7b80\u5355\u6613\u5b66\uff0c\u5c55\u73b0\u5185\u5bb9\u7684\u624b\u6bb5\u4e30\u5bcc\u591a\u6837\uff0c\u53ef\u4ee5\u53c2\u4e0e\u5f00\u6e90\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u8bb0\u5f55\u81ea\u5df1\u7684\u7b14\u8bb0\u3002 \u5728 GitHub \u4e0a\u5199 Markdown \u00b6 \u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u7684 issue \u4e3a\u4f8b\u5b50\uff0c \u5c55\u73b0\u4e00\u4e0b Markdown \u7684\u529f\u80fd\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5728\u4e0b\u9762\u8fd9\u4e2a issue \u4e2d\uff0c\u65e2\u6709\u56fe\u7247\u4e5f\u6709\u4ee3\u7801\u533a\uff0c\u8fd8\u6709\u5217\u8868\uff0c\u8fd9\u4e9b\u662f\u5982\u4f55\u7528 Markdown \u5b9e\u73b0\u7684\u5462\uff1f \u6211\u4eec\u5728 OneFlow \u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 issue\uff0c\u70b9\u51fb New issue \u6309\u94ae\u3002 \u5728 Write \u548c Preview \u90e8\u5206\u5c31\u662f Markdown \u4e66\u5199\u533a\u548c\u9884\u89c8\u533a\u7684\u4e00\u4e2a\u5bf9\u6bd4\u3002 ## \u52a0\u7a7a\u683c\u540e\u9762\u6240\u5bf9\u5e94\u7684\u5185\u5bb9\u5c31\u662f\u6807\u9898 \u8fde\u63a5\u7b26 - \u52a0\u7a7a\u683c\u540e\u9762\u7684\u5185\u5bb9\u662f\u5217\u8868\u6240\u5bf9\u5e94\u7684\u4e00\u4e2a item \u5b66\u4e60 Markdown \u8bed\u6cd5 \u00b6 \u6211\u4eec\u63a5\u4e0b\u6765\u770b\u770b\u5e38\u89c1\u7684 Markdown \u8bed\u6cd5\u6709\u54ea\u4e9b\uff0c\u7cfb\u7edf\u5b66\u4e60\u4e0b\u3002 1. \u6807\u9898 \u00b6 \u5728\u60f3\u8981\u8bbe\u7f6e\u4e3a\u6807\u9898\u7684\u6587\u5b57\u524d\u9762\u52a0 # \u6765\u8868\u793a \u4e00\u4e2a # \u662f\u4e00\u7ea7\u6807\u9898\uff0c\u4e24\u4e2a # \u662f\u4e8c\u7ea7\u6807\u9898\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u652f\u6301\u516d\u7ea7\u6807\u9898\u3002 # \u8fd9\u662f\u4e00\u7ea7\u6807\u9898 ## \u8fd9\u662f\u4e8c\u7ea7\u6807\u9898 ### \u8fd9\u662f\u4e09\u7ea7\u6807\u9898 #### \u8fd9\u662f\u56db\u7ea7\u6807\u9898 ##### \u8fd9\u662f\u4e94\u7ea7\u6807\u9898 ###### \u8fd9\u662f\u516d\u7ea7\u6807\u9898 2. \u56fe\u7247 \u00b6 \u8bed\u6cd5\uff1a ![\u56fe\u7247alt](\u56fe\u7247\u5730\u5740 ''\u56fe\u7247title'') \u56fe\u7247 alt \u5c31\u662f\u663e\u793a\u5728\u56fe\u7247\u4e0b\u9762\u7684\u6587\u5b57\uff0c\u76f8\u5f53\u4e8e\u5bf9\u56fe\u7247\u5185\u5bb9\u7684\u89e3\u91ca\u3002 \u56fe\u7247 title \u662f\u56fe\u7247\u7684\u6807\u9898\uff0c\u5f53\u9f20\u6807\u79fb\u5230\u56fe\u7247\u4e0a\u65f6\u663e\u793a\u7684\u5185\u5bb9\u3002title \u53ef\u52a0\u53ef\u4e0d\u52a0\u3002 \u793a\u4f8b\uff1a ![image](https://user-images.githubusercontent.com/54847470/154951006-a7dd7692-597e-4f9f-a33c-712219f0c5a7.png) \u6548\u679c\uff1a 3. \u8d85\u94fe\u63a5 \u00b6 \u8bed\u6cd5\uff1a [\u8d85\u94fe\u63a5\u540d](\u8d85\u94fe\u63a5\u5730\u5740 \"\u8d85\u94fe\u63a5title\") title \u53ef\u52a0\u53ef\u4e0d\u52a0 \u793a\u4f8b\uff1a [OneFlow](https://github.com/Oneflow-Inc/oneflow) \u6548\u679c\uff1a OneFlow 4. \u4ee3\u7801 \u00b6 \u5355\u884c\u4ee3\u7801\uff1a\u4ee3\u7801\u4e4b\u95f4\u5206\u522b\u7528\u4e00\u4e2a\u53cd\u5f15\u53f7\u5305\u8d77\u6765 `\u4ee3\u7801\u5185\u5bb9` \u4ee3\u7801\u5757\uff1a\u4ee3\u7801\u4e4b\u95f4\u5206\u522b\u7528\u4e09\u4e2a\u53cd\u5f15\u53f7\u5305\u8d77\u6765\uff0c\u4e14\u4e24\u8fb9\u7684\u53cd\u5f15\u53f7\u5355\u72ec\u5360\u4e00\u884c\uff0c\u5728\u7b2c\u4e00\u884c\u5f15\u53f7\u540e\u9762\u52a0\u5165\u4ee3\u7801\u79cd\u7c7b\u53ef\u4ee5\u83b7\u5f97\u4ee3\u7801\u9ad8\u4eae\u3002 ``` Python class Solution : def twoSum ( self , nums : List [ int ], target : int ) -> List [ int ]: hashtable = dict () for i in range ( len ( nums )): if target - nums [ i ] in hashtable : return [ i , hashtable [ target - nums [ i ]]] hashtable [ nums [ i ]] = i ``` 5. \u5f15\u7528 \u00b6 > \u8868\u793a\u5f15\u7528\uff0c\u8868\u793a\u5f53\u524d\u8bed\u53e5\u4e0d\u662f\u81ea\u5df1\u7684\uff0c\u5728\u5f00\u6e90\u9879\u76ee\u4e2d\u5e38\u5e38\u7528\u4e8e\u56de\u590d\u522b\u4eba\u7684\u8bdd\u3002 \u793a\u4f8b\uff1a > C++ \u5f88\u597d\u7528 \u6548\u679c\uff1a C++ \u5f88\u597d\u7528 \u9664\u4e86\u4e0a\u8ff0\u8bed\u6cd5\u5916\uff0cMarkdown \u8fd8\u6709\u5f88\u591a\u7528\u6cd5\uff0c\u5927\u5bb6\u53ef\u4ee5\u5728\u6269\u5c55\u9605\u8bfb\u4e2d\u5b66\u4e60\u3002 VS Code \u63d2\u4ef6\u5206\u4eab \u00b6 \u8fd9\u91cc\u5206\u4eab\u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u7684\u63d2\u4ef6\uff0c\u5728\u4f7f\u7528 Markdown \u65f6\uff0c Auto-Open Markdown Preview \u63d2\u4ef6\u53ef\u4ee5\u5e2e\u6211\u4eec\u5b9e\u65f6\u6e32\u67d3 Markdown \u9875\u9762\u3002 \u6269\u5c55\u9605\u8bfb \u00b6 GitHub \u5b98\u65b9 Markdown \u6559\u7a0b","title":"\u5feb\u901f\u4e0a\u624b Markdown"},{"location":"github/05_get_started_with_Markdown.html#markdown","text":"Bilibili \u89c6\u9891\u4f20\u9001\u95e8\uff1a \u5feb\u901f\u4e0a\u624b Markdown","title":"\u5feb\u901f\u4e0a\u624b Markdown"},{"location":"github/05_get_started_with_Markdown.html#markdown_1","text":"Markdown \u662f\u4e00\u79cd\u6807\u8bb0\u6027\u8bed\u8a00\uff0c\u5728 GitHub \u4e0a\u63d0\u4ea4 issue\u3001PR\uff0c\u9ed8\u8ba4\u90fd\u4f7f\u7528\u7684\u662f Markdown\u3002 Markdown \u7b80\u5355\u6613\u5b66\uff0c\u5c55\u73b0\u5185\u5bb9\u7684\u624b\u6bb5\u4e30\u5bcc\u591a\u6837\uff0c\u53ef\u4ee5\u53c2\u4e0e\u5f00\u6e90\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u8bb0\u5f55\u81ea\u5df1\u7684\u7b14\u8bb0\u3002","title":"\u4ec0\u4e48\u662f Markdown"},{"location":"github/05_get_started_with_Markdown.html#github-markdown","text":"\u63a5\u4e0b\u6765\u6211\u5c06\u4ee5\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u7684 issue \u4e3a\u4f8b\u5b50\uff0c \u5c55\u73b0\u4e00\u4e0b Markdown \u7684\u529f\u80fd\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5728\u4e0b\u9762\u8fd9\u4e2a issue \u4e2d\uff0c\u65e2\u6709\u56fe\u7247\u4e5f\u6709\u4ee3\u7801\u533a\uff0c\u8fd8\u6709\u5217\u8868\uff0c\u8fd9\u4e9b\u662f\u5982\u4f55\u7528 Markdown \u5b9e\u73b0\u7684\u5462\uff1f \u6211\u4eec\u5728 OneFlow \u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 issue\uff0c\u70b9\u51fb New issue \u6309\u94ae\u3002 \u5728 Write \u548c Preview \u90e8\u5206\u5c31\u662f Markdown \u4e66\u5199\u533a\u548c\u9884\u89c8\u533a\u7684\u4e00\u4e2a\u5bf9\u6bd4\u3002 ## \u52a0\u7a7a\u683c\u540e\u9762\u6240\u5bf9\u5e94\u7684\u5185\u5bb9\u5c31\u662f\u6807\u9898 \u8fde\u63a5\u7b26 - \u52a0\u7a7a\u683c\u540e\u9762\u7684\u5185\u5bb9\u662f\u5217\u8868\u6240\u5bf9\u5e94\u7684\u4e00\u4e2a item","title":"\u5728 GitHub \u4e0a\u5199 Markdown"},{"location":"github/05_get_started_with_Markdown.html#markdown_2","text":"\u6211\u4eec\u63a5\u4e0b\u6765\u770b\u770b\u5e38\u89c1\u7684 Markdown \u8bed\u6cd5\u6709\u54ea\u4e9b\uff0c\u7cfb\u7edf\u5b66\u4e60\u4e0b\u3002","title":"\u5b66\u4e60 Markdown \u8bed\u6cd5"},{"location":"github/05_get_started_with_Markdown.html#1","text":"\u5728\u60f3\u8981\u8bbe\u7f6e\u4e3a\u6807\u9898\u7684\u6587\u5b57\u524d\u9762\u52a0 # \u6765\u8868\u793a \u4e00\u4e2a # \u662f\u4e00\u7ea7\u6807\u9898\uff0c\u4e24\u4e2a # \u662f\u4e8c\u7ea7\u6807\u9898\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u652f\u6301\u516d\u7ea7\u6807\u9898\u3002 # \u8fd9\u662f\u4e00\u7ea7\u6807\u9898 ## \u8fd9\u662f\u4e8c\u7ea7\u6807\u9898 ### \u8fd9\u662f\u4e09\u7ea7\u6807\u9898 #### \u8fd9\u662f\u56db\u7ea7\u6807\u9898 ##### \u8fd9\u662f\u4e94\u7ea7\u6807\u9898 ###### \u8fd9\u662f\u516d\u7ea7\u6807\u9898","title":"1. \u6807\u9898"},{"location":"github/05_get_started_with_Markdown.html#2","text":"\u8bed\u6cd5\uff1a ![\u56fe\u7247alt](\u56fe\u7247\u5730\u5740 ''\u56fe\u7247title'') \u56fe\u7247 alt \u5c31\u662f\u663e\u793a\u5728\u56fe\u7247\u4e0b\u9762\u7684\u6587\u5b57\uff0c\u76f8\u5f53\u4e8e\u5bf9\u56fe\u7247\u5185\u5bb9\u7684\u89e3\u91ca\u3002 \u56fe\u7247 title \u662f\u56fe\u7247\u7684\u6807\u9898\uff0c\u5f53\u9f20\u6807\u79fb\u5230\u56fe\u7247\u4e0a\u65f6\u663e\u793a\u7684\u5185\u5bb9\u3002title \u53ef\u52a0\u53ef\u4e0d\u52a0\u3002 \u793a\u4f8b\uff1a ![image](https://user-images.githubusercontent.com/54847470/154951006-a7dd7692-597e-4f9f-a33c-712219f0c5a7.png) \u6548\u679c\uff1a","title":"2. \u56fe\u7247"},{"location":"github/05_get_started_with_Markdown.html#3","text":"\u8bed\u6cd5\uff1a [\u8d85\u94fe\u63a5\u540d](\u8d85\u94fe\u63a5\u5730\u5740 \"\u8d85\u94fe\u63a5title\") title \u53ef\u52a0\u53ef\u4e0d\u52a0 \u793a\u4f8b\uff1a [OneFlow](https://github.com/Oneflow-Inc/oneflow) \u6548\u679c\uff1a OneFlow","title":"3. \u8d85\u94fe\u63a5"},{"location":"github/05_get_started_with_Markdown.html#4","text":"\u5355\u884c\u4ee3\u7801\uff1a\u4ee3\u7801\u4e4b\u95f4\u5206\u522b\u7528\u4e00\u4e2a\u53cd\u5f15\u53f7\u5305\u8d77\u6765 `\u4ee3\u7801\u5185\u5bb9` \u4ee3\u7801\u5757\uff1a\u4ee3\u7801\u4e4b\u95f4\u5206\u522b\u7528\u4e09\u4e2a\u53cd\u5f15\u53f7\u5305\u8d77\u6765\uff0c\u4e14\u4e24\u8fb9\u7684\u53cd\u5f15\u53f7\u5355\u72ec\u5360\u4e00\u884c\uff0c\u5728\u7b2c\u4e00\u884c\u5f15\u53f7\u540e\u9762\u52a0\u5165\u4ee3\u7801\u79cd\u7c7b\u53ef\u4ee5\u83b7\u5f97\u4ee3\u7801\u9ad8\u4eae\u3002 ``` Python class Solution : def twoSum ( self , nums : List [ int ], target : int ) -> List [ int ]: hashtable = dict () for i in range ( len ( nums )): if target - nums [ i ] in hashtable : return [ i , hashtable [ target - nums [ i ]]] hashtable [ nums [ i ]] = i ```","title":"4. \u4ee3\u7801"},{"location":"github/05_get_started_with_Markdown.html#5","text":"> \u8868\u793a\u5f15\u7528\uff0c\u8868\u793a\u5f53\u524d\u8bed\u53e5\u4e0d\u662f\u81ea\u5df1\u7684\uff0c\u5728\u5f00\u6e90\u9879\u76ee\u4e2d\u5e38\u5e38\u7528\u4e8e\u56de\u590d\u522b\u4eba\u7684\u8bdd\u3002 \u793a\u4f8b\uff1a > C++ \u5f88\u597d\u7528 \u6548\u679c\uff1a C++ \u5f88\u597d\u7528 \u9664\u4e86\u4e0a\u8ff0\u8bed\u6cd5\u5916\uff0cMarkdown \u8fd8\u6709\u5f88\u591a\u7528\u6cd5\uff0c\u5927\u5bb6\u53ef\u4ee5\u5728\u6269\u5c55\u9605\u8bfb\u4e2d\u5b66\u4e60\u3002","title":"5. \u5f15\u7528"},{"location":"github/05_get_started_with_Markdown.html#vs-code","text":"\u8fd9\u91cc\u5206\u4eab\u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u7684\u63d2\u4ef6\uff0c\u5728\u4f7f\u7528 Markdown \u65f6\uff0c Auto-Open Markdown Preview \u63d2\u4ef6\u53ef\u4ee5\u5e2e\u6211\u4eec\u5b9e\u65f6\u6e32\u67d3 Markdown \u9875\u9762\u3002","title":"VS Code \u63d2\u4ef6\u5206\u4eab"},{"location":"github/05_get_started_with_Markdown.html#_1","text":"GitHub \u5b98\u65b9 Markdown \u6559\u7a0b","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"github/06_Mkdocs.html","text":"MkDocs \u5de5\u5177\u4f7f\u7528 \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a MkDocs \u5de5\u5177\u4f7f\u7528 \u5f88\u591a\u7a0b\u5e8f\u5458\u670b\u53cb\u90fd\u6709\u5199\u6280\u672f\u535a\u5ba2\u7684\u4e60\u60ef\uff0c\u5305\u62ec\u4f60\u4eec\u73b0\u5728\u770b\u5230\u7684\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u4e5f\u662f\u6211\u5c06\u89c6\u9891\u7684\u5185\u5bb9\u90fd\u505a\u6210\u4e86 \u4e2a\u4eba\u7f51\u7ad9 \u3002\u8fd9\u4e2a\u7f51\u7ad9\u5176\u5b9e\u5c31\u5bf9\u5e94\u4e86\u4e00\u4e2a GitHub \u4ed3\u5e93\uff0c\u6bcf\u6b21\u63d0\u4ea4\u4fee\u6539\u5230\u8fd9\u4e2a\u4ed3\u5e93\u7684\u65f6\u5019\uff0c\u6211\u7684\u7f51\u7ad9\u4e5f\u4f1a\u88ab\u81ea\u52a8\u66f4\u65b0\u3002 \u90a3\u8fd9\u4e9b\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f\u4e3b\u8981\u9700\u8981\u4ee5\u4e0b\u4e09\u4e2a\u6b65\u9aa4\uff1a \u4f7f\u7528 MkDocs \u5de5\u5177\u751f\u6210\u7f51\u7ad9 \u4f7f\u7528 GitHub Pages \u5c55\u793a\u81ea\u5df1\u7684\u7f51\u7ad9 \u4f7f\u7528 GitHub Actions \u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u5de5\u4f5c\u6d41\u81ea\u52a8\u5316 \u4e0b\u9762\u6211\u4eec\u5c31\u5177\u4f53\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u6253\u9020\u5c5e\u4e8e\u81ea\u5df1\u7684\u514d\u8d39\u7f51\u7ad9\u3002\u6211\u4eec\u9996\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b MkDocs\u3002 MkDocs \u4ecb\u7ecd\u4e0e\u5b89\u88c5 \u00b6 MkDocs \u662f\u4e00\u4e2a\u6587\u672c\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Markdown \u5199\u6587\u7ae0\uff0c\u63a5\u7740\u518d\u4f7f\u7528 MkDocs \u547d\u4ee4\uff0c\u5c06\u5176\u8f6c\u53d8\u4e3a HTML \u6587\u4ef6\u3002MkDocs \u662f\u4e00\u4e2a Python \u5305\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pip \u6765\u8fdb\u884c\u5b89\u88c5\uff0c\u5b89\u88c5\u547d\u4ee4\u5982\u4e0b\uff1a python -m pip install mkdocs \u5b89\u88c5\u5b8c MkDocs \u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd0\u884c mkdocs \u547d\u4ee4\uff1a mkdocs \u53ef\u4ee5\u770b\u5230\u76f8\u5e94\u7684\u63d0\u793a\u4fe1\u606f\uff1a \u4f7f\u7528 MkDocs \u521b\u5efa\u5de5\u7a0b \u00b6 \u63a5\u7740\uff0c\u6211\u4eec\u7528 mkdocs new \u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u540d\u53eb myblog \u7684\u5de5\u7a0b: mkdocs new myblog \u8fd9\u4e2a myblog \u5c31\u662f\u6211\u4eec\u8981\u653e\u5230 GitHub \u4e0a\u7684\u4ed3\u5e93\u76ee\u5f55\uff0c\u6211\u4eec\u7528 VS Code \u6253\u5f00\u8fd9\u4e2a\u76ee\u5f55\u6765\u770b\u770b\u5b83\u7684\u7ed3\u6784\uff1a \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0cmyblog \u76ee\u5f55\u4e0b\u53ea\u6709\u4e24\u6837\u4e1c\u897f\uff0c\u4e00\u4e2a\u662f docs \u76ee\u5f55\u548c\u4e00\u4e2a yaml \u6587\u4ef6\uff0cdocs \u76ee\u5f55\u4e0b\u5b58\u653e\u7684\u5c31\u662f Markdown \u6587\u4ef6\uff0c\u8fd9\u91cc\u4e5f\u5c31\u662f\u6211\u4eec\u7f51\u7ad9\u7684\u5185\u5bb9\uff0cyaml \u6587\u4ef6\u662f\u6211\u4eec\u5de5\u7a0b\u7684\u914d\u7f6e\u6587\u4ef6\u3002 \u4f7f\u7528 Mkdocs \u751f\u6210\u7f51\u9875 \u00b6 \u63a5\u4e0b\u4fe9\uff0c\u6211\u4eec\u4f7f\u7528 mkdocs build \u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u6839\u636e yaml \u6587\u4ef6\u7684\u8bbe\u7f6e\uff0c\u5c06 Markdown \u6587\u4ef6\u7f16\u8bd1\u6210\u7f51\u9875 HTML \u6587\u4ef6\u3002 \u547d\u4ee4\u548c\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a mkdocs build \u53ef\u4ee5\u770b\u5230\uff0c\u547d\u4ee4\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a site \u6587\u4ef6\u5939\u3002 \u6253\u5f00 site \u6587\u4ef6\uff0c\u91cc\u9762\u5c31\u662f\u751f\u6210\u597d\u7684\u6574\u4e2a\u7f51\u7ad9\u4e86\uff0c\u6211\u4eec\u70b9\u51fb index.html\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u7f51\u7ad9\u7684\u6548\u679c\u4e86\u3002 MkDocs \u7684\u914d\u7f6e \u00b6 \u901a\u8fc7\u6539\u53d8 yaml \u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u7f51\u7ad9\u7684\u8f93\u51fa\u6548\u679c\u3002\u90a3\u4e48 yaml \u6587\u4ef6\u662f\u5982\u4f55\u8d77\u4f5c\u7528\u7684\u5462\uff1f\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u4e86\u89e3\u4e00\u4e0b\u3002 \u6bd4\u5982\u6211\u4eec\u5728 docs \u76ee\u5f55\u4e0b\u65b0\u589e\u52a0\u4e00\u4e2a about.md \u7684\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5e76\u4e14\u5728 yaml \u6587\u4ef6\u4e2d\u505a\u76f8\u5e94\u7684\u4fee\u6539\uff1a \u6211\u4eec\u6765\u91cd\u65b0\u7f16\u8bd1\u4e00\u4e0b\u770b\u770b\u4f1a\u6709\u4ec0\u4e48\u6837\u7684\u7ed3\u679c\uff1a \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5728\u7f51\u9875\u4e2d\u679c\u7136\u591a\u4e86 about \u8fd9\u4e00\u680f\u3002 \u6211\u4eec\u63a5\u4e0b\u6765\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u7528\u7684 MkDocs \u914d\u7f6e\u3002 1. \u589e\u52a0\u9875\u9762 \u00b6 \u5982\u679c\u6211\u4eec\u60f3\u8981\u5728 mkdocs.yml \u6587\u4ef6\u4e2d\u914d\u7f6e\u6dfb\u52a0\u9875\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5e76\u901a\u8fc7\u6dfb\u52a0 nav \u8bbe\u7f6e\u6765\u5b9e\u73b0\uff1a site_name : myproject nav : - Home : index.md - About : about.md 2. \u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u589e\u52a0\u591a\u7ea7\u6587\u6863 \u00b6 \u6211\u4eec\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u76ee\u5f55\uff0c\u589e\u52a0\u591a\u7ea7\u6587\u6863\uff1a site_name : myproject nav : - Home : index.md - Install : install.md - Documents : - Usage : usage.md - Tutorial : tutorial.md 3. \u4e3b\u9898\u5316\u6211\u4eec\u7684\u6587\u6863 \u00b6 \u73b0\u5728\uff0c\u66f4\u6539\u914d\u7f6e\u6587\u4ef6\u4ee5\u901a\u8fc7\u66f4\u6539\u4e3b\u9898\u6765\u66f4\u6539\u6587\u6863\u7684\u663e\u793a\u65b9\u5f0f\u3002 \u7f16\u8f91 mkdocs.yml \u6587\u4ef6\u5e76\u6dfb\u52a0 theme \u8bbe\u7f6e\uff1a site_name : myproject nav : - Home : index.md - About : about.md theme : readthedocs \u4fdd\u5b58\u66f4\u6539\uff0c\u4f60\u5c06\u770b\u5230\u6539\u4e3a\u4f7f\u7528\u4e86ReadTheDocs\u4e3b\u9898\u3002 \u6269\u5c55\u8d44\u6599 \u00b6 \u901a\u8fc7\u4ee5\u4e0a\u4ecb\u7ecd\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u5bf9 MkDocs \u6709\u4e86\u57fa\u672c\u7684\u4e86\u89e3\uff0c\u5982\u679c\u5927\u5bb6\u60f3\u8981\u66f4\u8be6\u7ec6\u4e86\u89e3 MkDocs\uff0c\u53ef\u4ee5\u9605\u8bfb MkDocs \u4e2d\u6587\u6587\u6863 \u3002","title":"MkDocs \u5de5\u5177\u4f7f\u7528"},{"location":"github/06_Mkdocs.html#mkdocs","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a MkDocs \u5de5\u5177\u4f7f\u7528 \u5f88\u591a\u7a0b\u5e8f\u5458\u670b\u53cb\u90fd\u6709\u5199\u6280\u672f\u535a\u5ba2\u7684\u4e60\u60ef\uff0c\u5305\u62ec\u4f60\u4eec\u73b0\u5728\u770b\u5230\u7684\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u4e5f\u662f\u6211\u5c06\u89c6\u9891\u7684\u5185\u5bb9\u90fd\u505a\u6210\u4e86 \u4e2a\u4eba\u7f51\u7ad9 \u3002\u8fd9\u4e2a\u7f51\u7ad9\u5176\u5b9e\u5c31\u5bf9\u5e94\u4e86\u4e00\u4e2a GitHub \u4ed3\u5e93\uff0c\u6bcf\u6b21\u63d0\u4ea4\u4fee\u6539\u5230\u8fd9\u4e2a\u4ed3\u5e93\u7684\u65f6\u5019\uff0c\u6211\u7684\u7f51\u7ad9\u4e5f\u4f1a\u88ab\u81ea\u52a8\u66f4\u65b0\u3002 \u90a3\u8fd9\u4e9b\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f\u4e3b\u8981\u9700\u8981\u4ee5\u4e0b\u4e09\u4e2a\u6b65\u9aa4\uff1a \u4f7f\u7528 MkDocs \u5de5\u5177\u751f\u6210\u7f51\u7ad9 \u4f7f\u7528 GitHub Pages \u5c55\u793a\u81ea\u5df1\u7684\u7f51\u7ad9 \u4f7f\u7528 GitHub Actions \u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u5de5\u4f5c\u6d41\u81ea\u52a8\u5316 \u4e0b\u9762\u6211\u4eec\u5c31\u5177\u4f53\u4ecb\u7ecd\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u6253\u9020\u5c5e\u4e8e\u81ea\u5df1\u7684\u514d\u8d39\u7f51\u7ad9\u3002\u6211\u4eec\u9996\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b MkDocs\u3002","title":"MkDocs \u5de5\u5177\u4f7f\u7528"},{"location":"github/06_Mkdocs.html#mkdocs_1","text":"MkDocs \u662f\u4e00\u4e2a\u6587\u672c\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Markdown \u5199\u6587\u7ae0\uff0c\u63a5\u7740\u518d\u4f7f\u7528 MkDocs \u547d\u4ee4\uff0c\u5c06\u5176\u8f6c\u53d8\u4e3a HTML \u6587\u4ef6\u3002MkDocs \u662f\u4e00\u4e2a Python \u5305\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 pip \u6765\u8fdb\u884c\u5b89\u88c5\uff0c\u5b89\u88c5\u547d\u4ee4\u5982\u4e0b\uff1a python -m pip install mkdocs \u5b89\u88c5\u5b8c MkDocs \u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fd0\u884c mkdocs \u547d\u4ee4\uff1a mkdocs \u53ef\u4ee5\u770b\u5230\u76f8\u5e94\u7684\u63d0\u793a\u4fe1\u606f\uff1a","title":"MkDocs \u4ecb\u7ecd\u4e0e\u5b89\u88c5"},{"location":"github/06_Mkdocs.html#mkdocs_2","text":"\u63a5\u7740\uff0c\u6211\u4eec\u7528 mkdocs new \u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u540d\u53eb myblog \u7684\u5de5\u7a0b: mkdocs new myblog \u8fd9\u4e2a myblog \u5c31\u662f\u6211\u4eec\u8981\u653e\u5230 GitHub \u4e0a\u7684\u4ed3\u5e93\u76ee\u5f55\uff0c\u6211\u4eec\u7528 VS Code \u6253\u5f00\u8fd9\u4e2a\u76ee\u5f55\u6765\u770b\u770b\u5b83\u7684\u7ed3\u6784\uff1a \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0cmyblog \u76ee\u5f55\u4e0b\u53ea\u6709\u4e24\u6837\u4e1c\u897f\uff0c\u4e00\u4e2a\u662f docs \u76ee\u5f55\u548c\u4e00\u4e2a yaml \u6587\u4ef6\uff0cdocs \u76ee\u5f55\u4e0b\u5b58\u653e\u7684\u5c31\u662f Markdown \u6587\u4ef6\uff0c\u8fd9\u91cc\u4e5f\u5c31\u662f\u6211\u4eec\u7f51\u7ad9\u7684\u5185\u5bb9\uff0cyaml \u6587\u4ef6\u662f\u6211\u4eec\u5de5\u7a0b\u7684\u914d\u7f6e\u6587\u4ef6\u3002","title":"\u4f7f\u7528 MkDocs \u521b\u5efa\u5de5\u7a0b"},{"location":"github/06_Mkdocs.html#mkdocs_3","text":"\u63a5\u4e0b\u4fe9\uff0c\u6211\u4eec\u4f7f\u7528 mkdocs build \u547d\u4ee4\uff0c\u5c31\u53ef\u4ee5\u6839\u636e yaml \u6587\u4ef6\u7684\u8bbe\u7f6e\uff0c\u5c06 Markdown \u6587\u4ef6\u7f16\u8bd1\u6210\u7f51\u9875 HTML \u6587\u4ef6\u3002 \u547d\u4ee4\u548c\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a mkdocs build \u53ef\u4ee5\u770b\u5230\uff0c\u547d\u4ee4\u5b8c\u6210\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a site \u6587\u4ef6\u5939\u3002 \u6253\u5f00 site \u6587\u4ef6\uff0c\u91cc\u9762\u5c31\u662f\u751f\u6210\u597d\u7684\u6574\u4e2a\u7f51\u7ad9\u4e86\uff0c\u6211\u4eec\u70b9\u51fb index.html\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u7f51\u7ad9\u7684\u6548\u679c\u4e86\u3002","title":"\u4f7f\u7528 Mkdocs \u751f\u6210\u7f51\u9875"},{"location":"github/06_Mkdocs.html#mkdocs_4","text":"\u901a\u8fc7\u6539\u53d8 yaml \u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u7f51\u7ad9\u7684\u8f93\u51fa\u6548\u679c\u3002\u90a3\u4e48 yaml \u6587\u4ef6\u662f\u5982\u4f55\u8d77\u4f5c\u7528\u7684\u5462\uff1f\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u4e86\u89e3\u4e00\u4e0b\u3002 \u6bd4\u5982\u6211\u4eec\u5728 docs \u76ee\u5f55\u4e0b\u65b0\u589e\u52a0\u4e00\u4e2a about.md \u7684\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5e76\u4e14\u5728 yaml \u6587\u4ef6\u4e2d\u505a\u76f8\u5e94\u7684\u4fee\u6539\uff1a \u6211\u4eec\u6765\u91cd\u65b0\u7f16\u8bd1\u4e00\u4e0b\u770b\u770b\u4f1a\u6709\u4ec0\u4e48\u6837\u7684\u7ed3\u679c\uff1a \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5728\u7f51\u9875\u4e2d\u679c\u7136\u591a\u4e86 about \u8fd9\u4e00\u680f\u3002 \u6211\u4eec\u63a5\u4e0b\u6765\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u7528\u7684 MkDocs \u914d\u7f6e\u3002","title":"MkDocs \u7684\u914d\u7f6e"},{"location":"github/06_Mkdocs.html#1","text":"\u5982\u679c\u6211\u4eec\u60f3\u8981\u5728 mkdocs.yml \u6587\u4ef6\u4e2d\u914d\u7f6e\u6dfb\u52a0\u9875\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5e76\u901a\u8fc7\u6dfb\u52a0 nav \u8bbe\u7f6e\u6765\u5b9e\u73b0\uff1a site_name : myproject nav : - Home : index.md - About : about.md","title":"1. \u589e\u52a0\u9875\u9762"},{"location":"github/06_Mkdocs.html#2","text":"\u6211\u4eec\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u76ee\u5f55\uff0c\u589e\u52a0\u591a\u7ea7\u6587\u6863\uff1a site_name : myproject nav : - Home : index.md - Install : install.md - Documents : - Usage : usage.md - Tutorial : tutorial.md","title":"2. \u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u589e\u52a0\u591a\u7ea7\u6587\u6863"},{"location":"github/06_Mkdocs.html#3","text":"\u73b0\u5728\uff0c\u66f4\u6539\u914d\u7f6e\u6587\u4ef6\u4ee5\u901a\u8fc7\u66f4\u6539\u4e3b\u9898\u6765\u66f4\u6539\u6587\u6863\u7684\u663e\u793a\u65b9\u5f0f\u3002 \u7f16\u8f91 mkdocs.yml \u6587\u4ef6\u5e76\u6dfb\u52a0 theme \u8bbe\u7f6e\uff1a site_name : myproject nav : - Home : index.md - About : about.md theme : readthedocs \u4fdd\u5b58\u66f4\u6539\uff0c\u4f60\u5c06\u770b\u5230\u6539\u4e3a\u4f7f\u7528\u4e86ReadTheDocs\u4e3b\u9898\u3002","title":"3. \u4e3b\u9898\u5316\u6211\u4eec\u7684\u6587\u6863"},{"location":"github/06_Mkdocs.html#_1","text":"\u901a\u8fc7\u4ee5\u4e0a\u4ecb\u7ecd\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u5bf9 MkDocs \u6709\u4e86\u57fa\u672c\u7684\u4e86\u89e3\uff0c\u5982\u679c\u5927\u5bb6\u60f3\u8981\u66f4\u8be6\u7ec6\u4e86\u89e3 MkDocs\uff0c\u53ef\u4ee5\u9605\u8bfb MkDocs \u4e2d\u6587\u6587\u6863 \u3002","title":"\u6269\u5c55\u8d44\u6599"},{"location":"github/07_GitHub_Pages.html","text":"GitHub Pages \u7684\u751f\u6210\u548c\u4f7f\u7528 \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a GitHub Pages \u7684\u751f\u6210\u548c\u4f7f\u7528 \u770b\u4e86\u524d\u9762 MkDocs \u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 MkDocs \u5de5\u5177\u751f\u6210\u6574\u4e2a\u7f51\u7ad9\u7684 HTML \u6587\u4ef6\uff0c\u6211\u4eec\u628a\u5b83\u4e0a\u4f20\u5230\u4e91\u670d\u52a1\u5668\u4e0a\uff0c\u90a3\u5c31\u53ef\u4ee5\u5f53\u4f5c\u81ea\u5df1\u7684\u535a\u5ba2\u4e86\u3002\u4f46\u662f\u8fd9\u6837\u505a\u8d39\u65f6\u8d39\u529b\uff0c\u6709\u6ca1\u6709\u7b80\u5355\u65b9\u4fbf\uff0c\u6700\u597d\u8fd8\u662f\u514d\u8d39\u7684\u65b9\u6cd5\u5462\uff1f\u7b54\u6848\u662f\u6709\u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e0b GitHub Pages \u7684\u751f\u6210\u548c\u4f7f\u7528\u3002 \u4ec0\u4e48\u662f GitHub Pages \uff1f \u00b6 GitHub Pages \u662f GitHub \u6240\u63d0\u4f9b\u7684\u4e00\u9879\u529f\u80fd\uff0c\u5b83\u7684\u4f5c\u7528\u5c31\u662f\u4f7f GitHub \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4ed3\u5e93\u90fd\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u7f51\u7ad9\u3002\u5b83\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u7b80\u5355\u7684\u4e24\u6b65\uff1a \u628a\u7f51\u9875\u6587\u4ef6\u4e0a\u4f20\u5230\u8fdc\u7a0b\u4ed3\u5e93\u7684 gh-pages \u5206\u652f\u4e0a \u5728\u4ed3\u5e93\u7684 Settings \u91cc\u9009\u62e9 gh-pages \u5206\u652f\u4f5c\u4e3a\u7f51\u7ad9\u5206\u652f \u6700\u540e\u901a\u8fc7\u8fd9\u4e2a URL\uff1a <\u8d26\u53f7>github.io/<\u4ed3\u5e93\u540d> \u5c31\u53ef\u4ee5\u8bbf\u95ee\u4e86\u3002\u8fd9\u4e9b\u542c\u8d77\u6765\u53ef\u80fd\u6709\u4e00\u4e9b\u62bd\u8c61\uff0c\u6211\u4eec\u4e00\u8d77\u64cd\u4f5c\u4e00\u904d\u5927\u5bb6\u53ef\u4ee5\u660e\u767d\u5566\u3002 \u5728 GitHub Pages \u4e2d\u53d1\u5e03 myblog \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u8fdc\u7a0b\u7684 GitHub \u4ed3\u5e93\uff0c\u5e76\u5c06\u5e76\u4e14\u5c06\u521a\u521a\u7684 myblog \u63a8\u9001\u5230\u4e86\u8fd9\u4e2a\u4ed3\u5e93\uff1a git push -u origin main \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a gh-pages \u5206\u652f\uff0c\u5e76\u4e14\u5207\u6362\u5230\u8fd9\u4e2a\u5206\u652f\u4e0a\uff1a git checkout -b gh-pages \u7136\u540e\u4f7f\u7528 mkdocs build \u547d\u4ee4\u7f16\u8bd1\u5f97\u5230 HTML \u6587\u4ef6\uff1a mkdocs build \u7136\u540e\u6211\u4eec\u5220\u6389 site \u8fd9\u4e2a\u9759\u6001\u7f51\u7ad9\u4e4b\u5916\u7684\u5176\u5b83\u6587\u4ef6\uff0c\u5e76\u5c06 site \u6587\u4ef6\u4e2d\u7684\u76ee\u5f55\u90fd\u79fb\u52a8\u5230\u6839\u76ee\u5f55\uff0c\u6700\u540e\u5220\u9664 site \u6587\u4ef6\u5939\uff1a rm -rf docs/ mkdocs.yml cp -R site/* ./ rm -rf site/ \u6211\u4eec\u5c06\u521a\u521a\u7684\u6539\u52a8\u8fdb\u884c commit \u548c push\uff1a git commit -a -m \"gh-pages start\" git push origin gh-pages \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u627e\u5230\u8fdc\u7a0b\u4ed3\u5e93\u7684 Settings \u4e00\u680f\uff0c\u518d\u627e\u5230 Pages \u8fd9\u4e00\u680f\uff0c\u5c31\u4f1a\u53d1\u73b0\u6709\u4e2a\u6f02\u4eae\u7684\u7eff\u8272\u5728\u63d0\u793a\u6211\u4eec\uff0c\u6211\u4eec\u7684\u7f51\u7ad9\u5df2\u7ecf\u88ab\u53d1\u5e03\u5230\u8fd9\u4e2a\u94fe\u63a5\u4e2d\u4e86\u3002 \u6211\u4eec\u70b9\u5f00\u8fd9\u4e2a <\u8d26\u53f7>github.io/<\u4ed3\u5e93\u540d> \u7684\u94fe\u63a5\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u7684\u535a\u5ba2\u5df2\u7ecf\u6210\u529f\u4e0a\u7ebf\u4e86\u3002 \u770b\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u5b8c\u5168\u6709\u80fd\u529b\u6765\u81ea\u5df1\u642d\u5efa\u4e00\u4e2a\u7f51\u7ad9\u4e86\uff0c\u5982\u679c\u4e0d\u5acc\u9ebb\u70e6\u7684\u8bdd\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u6765\u642d\u5efa\u7f51\u7ad9\uff1a \u5148\u7528 Markdown \u5199\u5185\u5bb9 \u518d\u7528 mkdocs build \u7f16\u8bd1\u5f97\u5230 HTML \u6587\u4ef6 \u628a HTML \u6587\u4ef6\u4e0a\u4f20\u5230 GitHub Pages \u6240\u5728\u5206\u652f\u4e0a \u4f46\u662f\u8fd9\u6837\u7684\u6d41\u7a0b\u8fd8\u662f\u592a\u7e41\u7410\u4e86\uff0c\u6211\u4eec\u5728 GitHub \u7684\u64cd\u4f5c\u4e0a\u82b1\u8d39\u4e86\u592a\u591a\u7cbe\u529b\u3002\u8981\u662f\u6211\u4eec\u53ef\u4ee5\u53ea\u7ba1\u5199\u535a\u5ba2\uff0c\u5176\u4ed6\u7684\u5de5\u4f5c\u53ef\u4ee5\u81ea\u52a8\u5316\u5b8c\u6210\u5c31\u597d\u4e86\u3002\u90a3\u5982\u4f55\u505a\u5230\u81ea\u52a8\u5316\u5462\uff1f\u8bf7\u770b\u6211\u4eec\u4e0b\u4e00\u7bc7\u7684\u4ecb\u7ecd\u3002","title":"GitHub Pages \u7684\u751f\u6210\u548c\u4f7f\u7528"},{"location":"github/07_GitHub_Pages.html#github-pages","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a GitHub Pages \u7684\u751f\u6210\u548c\u4f7f\u7528 \u770b\u4e86\u524d\u9762 MkDocs \u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 MkDocs \u5de5\u5177\u751f\u6210\u6574\u4e2a\u7f51\u7ad9\u7684 HTML \u6587\u4ef6\uff0c\u6211\u4eec\u628a\u5b83\u4e0a\u4f20\u5230\u4e91\u670d\u52a1\u5668\u4e0a\uff0c\u90a3\u5c31\u53ef\u4ee5\u5f53\u4f5c\u81ea\u5df1\u7684\u535a\u5ba2\u4e86\u3002\u4f46\u662f\u8fd9\u6837\u505a\u8d39\u65f6\u8d39\u529b\uff0c\u6709\u6ca1\u6709\u7b80\u5355\u65b9\u4fbf\uff0c\u6700\u597d\u8fd8\u662f\u514d\u8d39\u7684\u65b9\u6cd5\u5462\uff1f\u7b54\u6848\u662f\u6709\u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u7ed9\u5927\u5bb6\u4ecb\u7ecd\u4e00\u4e0b GitHub Pages \u7684\u751f\u6210\u548c\u4f7f\u7528\u3002","title":"GitHub Pages \u7684\u751f\u6210\u548c\u4f7f\u7528"},{"location":"github/07_GitHub_Pages.html#github-pages_1","text":"GitHub Pages \u662f GitHub \u6240\u63d0\u4f9b\u7684\u4e00\u9879\u529f\u80fd\uff0c\u5b83\u7684\u4f5c\u7528\u5c31\u662f\u4f7f GitHub \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4ed3\u5e93\u90fd\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u7f51\u7ad9\u3002\u5b83\u7684\u5b9e\u73b0\u65b9\u5f0f\u4e5f\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u7b80\u5355\u7684\u4e24\u6b65\uff1a \u628a\u7f51\u9875\u6587\u4ef6\u4e0a\u4f20\u5230\u8fdc\u7a0b\u4ed3\u5e93\u7684 gh-pages \u5206\u652f\u4e0a \u5728\u4ed3\u5e93\u7684 Settings \u91cc\u9009\u62e9 gh-pages \u5206\u652f\u4f5c\u4e3a\u7f51\u7ad9\u5206\u652f \u6700\u540e\u901a\u8fc7\u8fd9\u4e2a URL\uff1a <\u8d26\u53f7>github.io/<\u4ed3\u5e93\u540d> \u5c31\u53ef\u4ee5\u8bbf\u95ee\u4e86\u3002\u8fd9\u4e9b\u542c\u8d77\u6765\u53ef\u80fd\u6709\u4e00\u4e9b\u62bd\u8c61\uff0c\u6211\u4eec\u4e00\u8d77\u64cd\u4f5c\u4e00\u904d\u5927\u5bb6\u53ef\u4ee5\u660e\u767d\u5566\u3002","title":"\u4ec0\u4e48\u662f GitHub Pages \uff1f"},{"location":"github/07_GitHub_Pages.html#github-pages-myblog","text":"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u8fdc\u7a0b\u7684 GitHub \u4ed3\u5e93\uff0c\u5e76\u5c06\u5e76\u4e14\u5c06\u521a\u521a\u7684 myblog \u63a8\u9001\u5230\u4e86\u8fd9\u4e2a\u4ed3\u5e93\uff1a git push -u origin main \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2a gh-pages \u5206\u652f\uff0c\u5e76\u4e14\u5207\u6362\u5230\u8fd9\u4e2a\u5206\u652f\u4e0a\uff1a git checkout -b gh-pages \u7136\u540e\u4f7f\u7528 mkdocs build \u547d\u4ee4\u7f16\u8bd1\u5f97\u5230 HTML \u6587\u4ef6\uff1a mkdocs build \u7136\u540e\u6211\u4eec\u5220\u6389 site \u8fd9\u4e2a\u9759\u6001\u7f51\u7ad9\u4e4b\u5916\u7684\u5176\u5b83\u6587\u4ef6\uff0c\u5e76\u5c06 site \u6587\u4ef6\u4e2d\u7684\u76ee\u5f55\u90fd\u79fb\u52a8\u5230\u6839\u76ee\u5f55\uff0c\u6700\u540e\u5220\u9664 site \u6587\u4ef6\u5939\uff1a rm -rf docs/ mkdocs.yml cp -R site/* ./ rm -rf site/ \u6211\u4eec\u5c06\u521a\u521a\u7684\u6539\u52a8\u8fdb\u884c commit \u548c push\uff1a git commit -a -m \"gh-pages start\" git push origin gh-pages \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u627e\u5230\u8fdc\u7a0b\u4ed3\u5e93\u7684 Settings \u4e00\u680f\uff0c\u518d\u627e\u5230 Pages \u8fd9\u4e00\u680f\uff0c\u5c31\u4f1a\u53d1\u73b0\u6709\u4e2a\u6f02\u4eae\u7684\u7eff\u8272\u5728\u63d0\u793a\u6211\u4eec\uff0c\u6211\u4eec\u7684\u7f51\u7ad9\u5df2\u7ecf\u88ab\u53d1\u5e03\u5230\u8fd9\u4e2a\u94fe\u63a5\u4e2d\u4e86\u3002 \u6211\u4eec\u70b9\u5f00\u8fd9\u4e2a <\u8d26\u53f7>github.io/<\u4ed3\u5e93\u540d> \u7684\u94fe\u63a5\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u7684\u535a\u5ba2\u5df2\u7ecf\u6210\u529f\u4e0a\u7ebf\u4e86\u3002 \u770b\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u5b8c\u5168\u6709\u80fd\u529b\u6765\u81ea\u5df1\u642d\u5efa\u4e00\u4e2a\u7f51\u7ad9\u4e86\uff0c\u5982\u679c\u4e0d\u5acc\u9ebb\u70e6\u7684\u8bdd\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u6765\u642d\u5efa\u7f51\u7ad9\uff1a \u5148\u7528 Markdown \u5199\u5185\u5bb9 \u518d\u7528 mkdocs build \u7f16\u8bd1\u5f97\u5230 HTML \u6587\u4ef6 \u628a HTML \u6587\u4ef6\u4e0a\u4f20\u5230 GitHub Pages \u6240\u5728\u5206\u652f\u4e0a \u4f46\u662f\u8fd9\u6837\u7684\u6d41\u7a0b\u8fd8\u662f\u592a\u7e41\u7410\u4e86\uff0c\u6211\u4eec\u5728 GitHub \u7684\u64cd\u4f5c\u4e0a\u82b1\u8d39\u4e86\u592a\u591a\u7cbe\u529b\u3002\u8981\u662f\u6211\u4eec\u53ef\u4ee5\u53ea\u7ba1\u5199\u535a\u5ba2\uff0c\u5176\u4ed6\u7684\u5de5\u4f5c\u53ef\u4ee5\u81ea\u52a8\u5316\u5b8c\u6210\u5c31\u597d\u4e86\u3002\u90a3\u5982\u4f55\u505a\u5230\u81ea\u52a8\u5316\u5462\uff1f\u8bf7\u770b\u6211\u4eec\u4e0b\u4e00\u7bc7\u7684\u4ecb\u7ecd\u3002","title":"\u5728 GitHub Pages \u4e2d\u53d1\u5e03 myblog"},{"location":"github/08_GitHub_Actions.html","text":"GitHub Actions \u4ecb\u7ecd & \u4f7f\u7528 \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a GitHub Actions \u4ecb\u7ecd & \u4f7f\u7528 \u524d\u9762\u6211\u4eec\u63d0\u5230\uff0c\u53ea\u7528 MkDocs \u548c GitHub Pages \u642d\u5efa\u7f51\u7ad9\u8fd8\u662f\u592a\u7e41\u7410\u4e86\uff0c\u800c\u4f7f\u7528 GitHub Actions \u5c31\u53ef\u4ee5\u505a\u5230\u5de5\u4f5c\u6d41\u7684\u81ea\u52a8\u5316\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u5177\u4f53\u6765\u4ecb\u7ecd\u4e00\u4e0b GitHub Actions \u5427\u3002 \u4ec0\u4e48\u662f GitHub Actions \u00b6 GitHub Actions \u662f GitHub \u7684\u4e00\u9879\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u628a\u5f00\u53d1\u7684\u5de5\u4f5c\u6d41\u7ed9\u81ea\u52a8\u5316\u3002\u90a3\u4e48\u4ec0\u4e48\u53c8\u662f\u5de5\u4f5c\u6d41\u5462\uff1f\u6211\u4eec\u4ee5\u5f00\u6e90\u9879\u76ee OneFlow \u6765\u4e3e\u4e2a\u4f8b\u5b50\uff1a \u5728\u7528\u6237\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86\u65b0\u7684\u9700\u6c42\uff0c\u4e8e\u662f\u53bb\u63d0\u4e86 issue \u627e\u4eba\u63d0\u95ee\u3002\u76f8\u5173\u4eba\u5458\u5c31\u4f1a\u5728\u8fd9\u4e2a issue \u4e2d\u5bf9\u7ebf\uff0c\u4e8e\u662f\u53bb\u5f00\u4e86 PR \u63d0\u4ea4\u4e86\u65b0\u529f\u80fd\u3002\u5728\u65b0\u7684 PR \u7684\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u9700\u8981\u591a\u6b21\u7684 review \u4fee\u6b63\u3002PR \u65b0\u529f\u80fd\u5f00\u53d1\u5b8c\u6bd5\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u5404\u79cd\u7684\u6d4b\u8bd5\u6d41\u7a0b\uff0c\u901a\u8fc7\u6d4b\u8bd5\u540e\u624d\u53ef\u4ee5\u9762\u5411\u7528\u6237\u4e0a\u7ebf\u3002\u4ee5\u4e0a\u8fd9\u4e9b\u73af\u8282\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5c31\u662f\u4e00\u4e2a\u5de5\u4f5c\u6d41\u7684\u4f8b\u5b50\u3002 \u800c GitHub Actions \u53ef\u4ee5\u5c06\u5de5\u4f5c\u6d41\u81ea\u52a8\u5316\uff0c\u60f3\u8c61\u4ee5\u4e0b\u573a\u666f\uff1a\u5982\u679c\u6211\u4eec\u521b\u5efa\u4e86 issue\uff0c\u5c31\u4f1a\u81ea\u52a8\u63d0\u9192\u6700\u5408\u9002\u7684\u4eba\u5458\u53c2\u4e0e\u5bf9\u7ebf\u3002\u521b\u5efa\u4e86\u65b0\u7684 PR\uff0c\u5c31\u80fd\u81ea\u52a8\u627e\u5230\u6700\u5408\u9002\u7684\u4eba\u53c2\u4e0e review\uff0c\u4ee3\u7801\u5b8c\u6210\u4ee5\u540e\u53ef\u4ee5\u81ea\u52a8\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u5b8c\u6210\u4e4b\u540e\u53c8\u80fd\u591f\u81ea\u52a8\u5408\u5e76\u5230\u4e3b\u5206\u652f\uff0c\u4e3b\u5206\u652f\u6709\u4ee3\u7801\u5408\u5e76\u540e\uff0c\u5c31\u4f1a\u81ea\u52a8\u7f16\u8bd1\u548c\u90e8\u7f72\u65b0\u7248\u672c\u7684\u4ea7\u54c1\u3002\u8fd9\u6837\u662f\u4e0d\u662f\u5c31\u8ba9\u6211\u4eec\u5f00\u53d1\u7684\u5e78\u798f\u611f\u66f4\u9ad8\u4e86\u3002 GitHub Events & Actions \u00b6 GitHub \u4f7f\u7528\u4e86 Action \u548c Event \u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u6765\u65b9\u4fbf\u7528\u6237\u53bb\u914d\u7f6e\u81ea\u52a8\u5316\u5de5\u4f5c\u6d41\u3002\u5f53\u67d0\u4e9b Event \u53d1\u751f\u65f6\uff0c\u5c31\u53bb\u89e6\u53d1\u76f8\u5e94\u7684\u9884\u8bbe\u597d\u7684 Action\u3002 \u50cf\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\uff1a\u521b\u5efa issue\u3001\u521b\u5efaPR\u3001\u4ee3\u7801\u63d0\u4ea4\u7b49\u90fd\u662f Event\uff0c\u800c\u628a\u4efb\u52a1\u5206\u914d\u7ed9\u5408\u9002\u7684\u4eba\u548c\u5f00\u59cb\u6d4b\u8bd5\u7b49\u90fd\u662f Action\uff0c\u90fd\u662f\u53ef\u4ee5\u53bb\u63d0\u524d\u914d\u7f6e\u597d\u7684\u3002 \u90a3\u6211\u4eec\u600e\u4e48\u5728 GitHub \u4ed3\u5e93\u4e2d\u53bb\u914d\u7f6e Event \u548c Action \u7684\u5bf9\u5e94\u5173\u7cfb\u5462\uff1f\u7b54\u6848\u5c31\u662f\u5728\u7279\u5b9a\u7684\u76ee\u5f55\u4e0b\u521b\u5efa\u4e13\u95e8\u7684 yaml \u6587\u4ef6\u3002\u5728 GitHub \u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u914d\u7f6e\u597d\u7684 yaml \u6587\u4ef6\u653e\u5230 GitHub \u76ee\u5f55\u4e0b\u7684 workflows \u76ee\u5f55\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6837 GitHub \u5c31\u53ef\u4ee5\u81ea\u52a8\u53bb\u76d1\u542c yaml \u6587\u4ef6\u4e2d\u6307\u5b9a\u7684 Event\uff0c\u5e76\u4e14\u5f53\u8fd9\u4e9b Event \u53d1\u751f\u65f6\uff0c\u5c31\u89e6\u53d1\u4e86\u76f8\u5e94\u7684 Action\u3002 \u4e0b\u9762\u6211\u4eec\u76f4\u63a5\u5728 GitHub \u4e0a\u64cd\u4f5c\u4e00\u4e0b\u7ed9\u5927\u5bb6\u770b\u770b\u5427\u3002 Simple Workflow \u00b6 \u4e0b\u9762\u6211\u4eec\u5c06\u4ece\u65e0\u5230\u6709\uff0c\u521b\u5efa\u4e00\u4e2a GitHub Action\u3002 \u6211\u4eec\u7ee7\u7eed\u4f7f\u7528\u521a\u521a\u7684 myblog \u4ed3\u5e93\uff0c\u7136\u540e\u70b9\u51fb Actions \u8fd9\u4e00\u680f\uff0c\u70b9\u5f00 New workflow\u3002 \u6211\u4eec\u53d1\u73b0\u6709\u5f88\u591a\u73b0\u6210\u7684 workflow \u4f9b\u6211\u4eec\u53c2\u8003\u548c\u4f7f\u7528\uff0c\u5b83\u4eec\u90fd\u5305\u542b\u4e86\u90e8\u7f72\u548c\u5e38\u89c1\u7684\u6d4b\u8bd5\u6d41\u7a0b\uff1a \u6211\u4eec\u9009\u62e9\u6700\u7b80\u5355\u7684 simple workflow\u3002 \u6253\u5f00\u4e4b\u540e\u53d1\u73b0\u4e00\u4e2a yaml \u6587\u4ef6\uff0c\u8fd9\u4e2a yaml \u6587\u4ef6\u5c31\u63cf\u8ff0\u4e86\u4e00\u4e2a\u5de5\u4f5c\u6d41\uff0cyaml \u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\u3002 # This is a basic workflow to help you get started with Actions name : publish site # Controls when the workflow will run on : # Triggers the workflow on push or pull request events but only for the main branch push : branches : [ main ] pull_request : branches : [ main ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs : # This workflow contains a single job called \"build\" build : # The type of runner that the job will run on runs-on : ubuntu-latest # Steps represent a sequence of tasks that will be executed as part of the job steps : # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses : actions/checkout@v2 # Runs a single command using the runners shell - name : Run a one-line script run : echo Hello, world! # Runs a set of commands using the runners shell - name : Run a multi-line script run : | echo Add other actions to build, echo test, and deploy your project. \u8fd9\u4e2a yaml \u6587\u4ef6\u5c31\u63cf\u8ff0\u4e86\u4e00\u4e2a\u5de5\u4f5c\u6d41\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u7ed3\u5408\u4ee3\u7801\u7b80\u5355\u5730\u6765\u8bb2\u89e3\u4e00\u4e0b\u3002 \u7b2c 3 \u884c\u4e2d\u7684 name \u662f\u7ed9\u5de5\u4f5c\u6d41\u8d77\u7684\u540d\u5b57\uff0c\u8fd9\u4e2a\u540d\u5b57\u53ef\u4ee5\u968f\u4fbf\u4fee\u6539\uff0c\u6539\u6210\u6211\u4eec\u60f3\u8981\u7684\u5c31\u53ef\u4ee5\u4e86\u3002 \u7b2c 6 \u884c\u7684 on \u5c31\u63cf\u8ff0\u4e86\u9700\u8981\u76d1\u542c\u4ec0\u4e48 Event\uff0c\u6bd4\u5982\u8fd9\u91cc\u76d1\u542c\u7684\u5c31\u662f\u5f53 main \u5206\u652f push \u4ee3\u7801\u65f6\u6216\u8005\u5f00\u4e86 PR \u5c31\u89e6\u53d1\u76f8\u5e94\u7684 Action\u3002 \u7b2c 17 \u884c\u7684 jobs \u5c31\u63cf\u8ff0\u4e86 Action\uff0c\u7b2c 21 \u884c\u7684 runs-on \u540e\u9762\u5c31\u63cf\u8ff0\u4e86\u8fd0\u884c\u7684\u73af\u5883\uff0cGitHub \u63d0\u4f9b\u4e86\u5404\u79cd\u8fd0\u884c\u73af\u5883\uff0c\u6211\u4eec\u8fd9\u91cc\u9009\u7528\u7684\u662f Ubuntu \u3002 \u7b2c 24 \u884c\u7684 steps \u5c31\u5305\u542b\u4e86\u5177\u4f53\u7684 Actions\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 steps \u5206\u4e3a\u4e86\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f run \u7c7b\u578b\uff0c\u5176\u5b9e\u5c31\u662f\u666e\u901a\u7684\u547d\u4ee4\u884c\u547d\u4ee4\u3002\u8fd8\u6709\u4e00\u7c7b\u662f use\uff0c\u4ed6\u4eec\u662f GitHub \u6216\u8005\u5176\u4ed6\u4ed3\u5e93\u65e9\u5df2\u9884\u8bbe\u7684 Actions\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u62ff\u8fc7\u6765\u7528\u7684\u3002\u7b2c 26 \u884c\u7684 - uses: actions/checkout@v2 \u5176\u529f\u80fd\u5c31\u662f\u5728\u73af\u5883\u4e2d\u514b\u9686\u4ed3\u5e93\u3002 \u4e0a\u9762\u7684\u8fd9\u4e9b\u547d\u4ee4\u90fd\u4f1a\u8fd0\u884c\u5728 GitHub \u7684\u670d\u52a1\u5668\u4e0a\u3002\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684 yaml \u6587\u4ef6\u4e3a\u4f8b\uff0c\u6bcf\u5f53\u9884\u8bbe\u7684 Events \u53d1\u751f\u65f6\uff0cGitHub \u4f1a\u5728\u5b83\u4eec\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u521b\u5efa\u4e00\u4e2a Ubuntu \u7684\u5bb9\u5668\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u5bb9\u5668\u91cc checkout \u4ed3\u5e93\uff0c\u7136\u540e\u8fd0\u884c\u8fd9\u4e9b\u547d\u4ee4\u3002 \u81ea\u52a8\u53d1\u5e03\u7684\u535a\u5ba2\u4ed3\u5e93 \u00b6 \u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u5bf9 GitHub Actions \u6709\u4e86\u4e00\u5b9a\u7684\u4e86\u89e3\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u524d\u9762\u8bb2\u7684\u77e5\u8bc6\uff0c\u505a\u4e00\u4e2a\u535a\u5ba2\u7f51\u7ad9\u4e86\u3002\u6211\u4eec\u8fd9\u4e2a\u535a\u5ba2\u7f51\u7ad9\uff0c\u53ea\u8981\u5b83\u5bf9\u5e94\u7684\u4ed3\u5e93\u6709\u4e3b\u5206\u652f\u7684\u4ee3\u7801\u5408\u5e76\uff0c\u90a3\u4e48\u5b83\u5c06\u4f1a\u88ab\u81ea\u52a8\u7f16\u8bd1\u6210 HTML \u6587\u4ef6\uff0c\u5e76\u4e14\u81ea\u52a8\u63a8\u9001\u5230 GitHub Pages \u4e0a\u53bb\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u770b\u4e3a\u4e86\u5b9e\u73b0\u4ee5\u4e0a\u529f\u80fd\uff0cyaml \u6587\u4ef6\u8981\u600e\u4e48\u7f16\u5199\u5462\uff1f # This is a basic workflow to help you get started with Actions name : publish site # Controls when the workflow will run on : # Triggers the workflow on push or pull request events but only for the main branch push : branches : [ main ] pull_request : branches : [ main ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs : # This workflow contains a single job called \"build\" build : # The type of runner that the job will run on runs-on : ubuntu-latest # Steps represent a sequence of tasks that will be executed as part of the job steps : # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses : actions/checkout@v2 #\u5b89\u88c5mkdocs - name : Install mkdocs run : python -m pip install mkdocs #\u751f\u6210html - name : build html run : mkdocs build # \u53d1\u5e03\u5230\u6307\u5b9a\u76ee\u5f55 - name : Deploy uses : peaceiris/actions-gh-pages@v3 with : github_token : ${{ secrets.GITHUB_TOKEN }} publish_dir : ./site \u4ece\u7b2c 28 \u884c\u5f00\u59cb\uff0c\u6211\u4eec\u5b89\u88c5 MkDocs \u5de5\u5177\uff1b\u4ece\u7b2c 33 \u884c\u5f00\u59cb\uff0c\u6211\u4eec\u5229\u7528 MkDocs \u5de5\u5177\u6765\u751f\u6210 HTML \u6587\u4ef6\uff1b\u4ece\u7b2c 37 \u884c\u5f00\u59cb\uff0c\u6211\u4eec use \u4e86\u522b\u4eba\u5199\u597d\u7684 Action \u5c06\u6211\u4eec\u7684\u7f51\u7ad9\u53d1\u5e03\u51fa\u53bb\uff0c\u6211\u4eec\u6307\u5b9a\u53d1\u5e03\u7684\u76ee\u5f55\u662f MkDocs \u7f16\u8bd1\u8f93\u51fa\u7684 site \u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u4eec\u5bf9\u4e3b\u5206\u652f\u4e2d\u7684\u5185\u5bb9\u505a\u4e9b\u8bb8\u6539\u52a8\uff0c\u7136\u540e\u6211\u4eec\u63d0\u4ea4\u8fd9\u4e2a\u5206\u652f\uff0c\u518d push \u5230\u8fdc\u7a0b\u5206\u652f\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u67e5\u770b\u4e00\u4e0b Actions \u4e2d\u7684 update about \uff0c\u53ef\u4ee5\u770b\u5230\u679c\u7136\u6709\u5b89\u88c5\u3001\u7f16\u8bd1\u548c\u53d1\u5e03\u4e86\u3002 \u63a5\u7740\u6211\u4eec\u70b9\u5f00 pages build and deployment \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 build \u6210\u529f\u4e86\uff0c\u800c\u4e14\u53d1\u5e03\u4e5f\u6210\u529f\u4e86\u3002 \u70b9\u5f00\u535a\u5ba2\u7684 \u94fe\u63a5 \uff0c\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u7684\u4fee\u6539\u679c\u7136\u751f\u6548\u4e86\u3002 \u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u4f7f\u7528 GitHub Actions \u81ea\u52a8\u53d1\u5e03\u535a\u5ba2\u7684\u5168\u90e8\u5185\u5bb9\u5566\u3002","title":"GitHub Actions \u4ecb\u7ecd & \u4f7f\u7528"},{"location":"github/08_GitHub_Actions.html#github-actions","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a GitHub Actions \u4ecb\u7ecd & \u4f7f\u7528 \u524d\u9762\u6211\u4eec\u63d0\u5230\uff0c\u53ea\u7528 MkDocs \u548c GitHub Pages \u642d\u5efa\u7f51\u7ad9\u8fd8\u662f\u592a\u7e41\u7410\u4e86\uff0c\u800c\u4f7f\u7528 GitHub Actions \u5c31\u53ef\u4ee5\u505a\u5230\u5de5\u4f5c\u6d41\u7684\u81ea\u52a8\u5316\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u5177\u4f53\u6765\u4ecb\u7ecd\u4e00\u4e0b GitHub Actions \u5427\u3002","title":"GitHub Actions \u4ecb\u7ecd &amp; \u4f7f\u7528"},{"location":"github/08_GitHub_Actions.html#github-actions_1","text":"GitHub Actions \u662f GitHub \u7684\u4e00\u9879\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u628a\u5f00\u53d1\u7684\u5de5\u4f5c\u6d41\u7ed9\u81ea\u52a8\u5316\u3002\u90a3\u4e48\u4ec0\u4e48\u53c8\u662f\u5de5\u4f5c\u6d41\u5462\uff1f\u6211\u4eec\u4ee5\u5f00\u6e90\u9879\u76ee OneFlow \u6765\u4e3e\u4e2a\u4f8b\u5b50\uff1a \u5728\u7528\u6237\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86\u65b0\u7684\u9700\u6c42\uff0c\u4e8e\u662f\u53bb\u63d0\u4e86 issue \u627e\u4eba\u63d0\u95ee\u3002\u76f8\u5173\u4eba\u5458\u5c31\u4f1a\u5728\u8fd9\u4e2a issue \u4e2d\u5bf9\u7ebf\uff0c\u4e8e\u662f\u53bb\u5f00\u4e86 PR \u63d0\u4ea4\u4e86\u65b0\u529f\u80fd\u3002\u5728\u65b0\u7684 PR \u7684\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u9700\u8981\u591a\u6b21\u7684 review \u4fee\u6b63\u3002PR \u65b0\u529f\u80fd\u5f00\u53d1\u5b8c\u6bd5\u4e4b\u540e\uff0c\u8fd8\u9700\u8981\u5404\u79cd\u7684\u6d4b\u8bd5\u6d41\u7a0b\uff0c\u901a\u8fc7\u6d4b\u8bd5\u540e\u624d\u53ef\u4ee5\u9762\u5411\u7528\u6237\u4e0a\u7ebf\u3002\u4ee5\u4e0a\u8fd9\u4e9b\u73af\u8282\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u5c31\u662f\u4e00\u4e2a\u5de5\u4f5c\u6d41\u7684\u4f8b\u5b50\u3002 \u800c GitHub Actions \u53ef\u4ee5\u5c06\u5de5\u4f5c\u6d41\u81ea\u52a8\u5316\uff0c\u60f3\u8c61\u4ee5\u4e0b\u573a\u666f\uff1a\u5982\u679c\u6211\u4eec\u521b\u5efa\u4e86 issue\uff0c\u5c31\u4f1a\u81ea\u52a8\u63d0\u9192\u6700\u5408\u9002\u7684\u4eba\u5458\u53c2\u4e0e\u5bf9\u7ebf\u3002\u521b\u5efa\u4e86\u65b0\u7684 PR\uff0c\u5c31\u80fd\u81ea\u52a8\u627e\u5230\u6700\u5408\u9002\u7684\u4eba\u53c2\u4e0e review\uff0c\u4ee3\u7801\u5b8c\u6210\u4ee5\u540e\u53ef\u4ee5\u81ea\u52a8\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u5b8c\u6210\u4e4b\u540e\u53c8\u80fd\u591f\u81ea\u52a8\u5408\u5e76\u5230\u4e3b\u5206\u652f\uff0c\u4e3b\u5206\u652f\u6709\u4ee3\u7801\u5408\u5e76\u540e\uff0c\u5c31\u4f1a\u81ea\u52a8\u7f16\u8bd1\u548c\u90e8\u7f72\u65b0\u7248\u672c\u7684\u4ea7\u54c1\u3002\u8fd9\u6837\u662f\u4e0d\u662f\u5c31\u8ba9\u6211\u4eec\u5f00\u53d1\u7684\u5e78\u798f\u611f\u66f4\u9ad8\u4e86\u3002","title":"\u4ec0\u4e48\u662f GitHub Actions"},{"location":"github/08_GitHub_Actions.html#github-events-actions","text":"GitHub \u4f7f\u7528\u4e86 Action \u548c Event \u8fd9\u4e24\u4e2a\u6982\u5ff5\uff0c\u6765\u65b9\u4fbf\u7528\u6237\u53bb\u914d\u7f6e\u81ea\u52a8\u5316\u5de5\u4f5c\u6d41\u3002\u5f53\u67d0\u4e9b Event \u53d1\u751f\u65f6\uff0c\u5c31\u53bb\u89e6\u53d1\u76f8\u5e94\u7684\u9884\u8bbe\u597d\u7684 Action\u3002 \u50cf\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\uff1a\u521b\u5efa issue\u3001\u521b\u5efaPR\u3001\u4ee3\u7801\u63d0\u4ea4\u7b49\u90fd\u662f Event\uff0c\u800c\u628a\u4efb\u52a1\u5206\u914d\u7ed9\u5408\u9002\u7684\u4eba\u548c\u5f00\u59cb\u6d4b\u8bd5\u7b49\u90fd\u662f Action\uff0c\u90fd\u662f\u53ef\u4ee5\u53bb\u63d0\u524d\u914d\u7f6e\u597d\u7684\u3002 \u90a3\u6211\u4eec\u600e\u4e48\u5728 GitHub \u4ed3\u5e93\u4e2d\u53bb\u914d\u7f6e Event \u548c Action \u7684\u5bf9\u5e94\u5173\u7cfb\u5462\uff1f\u7b54\u6848\u5c31\u662f\u5728\u7279\u5b9a\u7684\u76ee\u5f55\u4e0b\u521b\u5efa\u4e13\u95e8\u7684 yaml \u6587\u4ef6\u3002\u5728 GitHub \u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u914d\u7f6e\u597d\u7684 yaml \u6587\u4ef6\u653e\u5230 GitHub \u76ee\u5f55\u4e0b\u7684 workflows \u76ee\u5f55\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u6837 GitHub \u5c31\u53ef\u4ee5\u81ea\u52a8\u53bb\u76d1\u542c yaml \u6587\u4ef6\u4e2d\u6307\u5b9a\u7684 Event\uff0c\u5e76\u4e14\u5f53\u8fd9\u4e9b Event \u53d1\u751f\u65f6\uff0c\u5c31\u89e6\u53d1\u4e86\u76f8\u5e94\u7684 Action\u3002 \u4e0b\u9762\u6211\u4eec\u76f4\u63a5\u5728 GitHub \u4e0a\u64cd\u4f5c\u4e00\u4e0b\u7ed9\u5927\u5bb6\u770b\u770b\u5427\u3002","title":"GitHub Events &amp; Actions"},{"location":"github/08_GitHub_Actions.html#simple-workflow","text":"\u4e0b\u9762\u6211\u4eec\u5c06\u4ece\u65e0\u5230\u6709\uff0c\u521b\u5efa\u4e00\u4e2a GitHub Action\u3002 \u6211\u4eec\u7ee7\u7eed\u4f7f\u7528\u521a\u521a\u7684 myblog \u4ed3\u5e93\uff0c\u7136\u540e\u70b9\u51fb Actions \u8fd9\u4e00\u680f\uff0c\u70b9\u5f00 New workflow\u3002 \u6211\u4eec\u53d1\u73b0\u6709\u5f88\u591a\u73b0\u6210\u7684 workflow \u4f9b\u6211\u4eec\u53c2\u8003\u548c\u4f7f\u7528\uff0c\u5b83\u4eec\u90fd\u5305\u542b\u4e86\u90e8\u7f72\u548c\u5e38\u89c1\u7684\u6d4b\u8bd5\u6d41\u7a0b\uff1a \u6211\u4eec\u9009\u62e9\u6700\u7b80\u5355\u7684 simple workflow\u3002 \u6253\u5f00\u4e4b\u540e\u53d1\u73b0\u4e00\u4e2a yaml \u6587\u4ef6\uff0c\u8fd9\u4e2a yaml \u6587\u4ef6\u5c31\u63cf\u8ff0\u4e86\u4e00\u4e2a\u5de5\u4f5c\u6d41\uff0cyaml \u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\u3002 # This is a basic workflow to help you get started with Actions name : publish site # Controls when the workflow will run on : # Triggers the workflow on push or pull request events but only for the main branch push : branches : [ main ] pull_request : branches : [ main ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs : # This workflow contains a single job called \"build\" build : # The type of runner that the job will run on runs-on : ubuntu-latest # Steps represent a sequence of tasks that will be executed as part of the job steps : # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses : actions/checkout@v2 # Runs a single command using the runners shell - name : Run a one-line script run : echo Hello, world! # Runs a set of commands using the runners shell - name : Run a multi-line script run : | echo Add other actions to build, echo test, and deploy your project. \u8fd9\u4e2a yaml \u6587\u4ef6\u5c31\u63cf\u8ff0\u4e86\u4e00\u4e2a\u5de5\u4f5c\u6d41\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u7ed3\u5408\u4ee3\u7801\u7b80\u5355\u5730\u6765\u8bb2\u89e3\u4e00\u4e0b\u3002 \u7b2c 3 \u884c\u4e2d\u7684 name \u662f\u7ed9\u5de5\u4f5c\u6d41\u8d77\u7684\u540d\u5b57\uff0c\u8fd9\u4e2a\u540d\u5b57\u53ef\u4ee5\u968f\u4fbf\u4fee\u6539\uff0c\u6539\u6210\u6211\u4eec\u60f3\u8981\u7684\u5c31\u53ef\u4ee5\u4e86\u3002 \u7b2c 6 \u884c\u7684 on \u5c31\u63cf\u8ff0\u4e86\u9700\u8981\u76d1\u542c\u4ec0\u4e48 Event\uff0c\u6bd4\u5982\u8fd9\u91cc\u76d1\u542c\u7684\u5c31\u662f\u5f53 main \u5206\u652f push \u4ee3\u7801\u65f6\u6216\u8005\u5f00\u4e86 PR \u5c31\u89e6\u53d1\u76f8\u5e94\u7684 Action\u3002 \u7b2c 17 \u884c\u7684 jobs \u5c31\u63cf\u8ff0\u4e86 Action\uff0c\u7b2c 21 \u884c\u7684 runs-on \u540e\u9762\u5c31\u63cf\u8ff0\u4e86\u8fd0\u884c\u7684\u73af\u5883\uff0cGitHub \u63d0\u4f9b\u4e86\u5404\u79cd\u8fd0\u884c\u73af\u5883\uff0c\u6211\u4eec\u8fd9\u91cc\u9009\u7528\u7684\u662f Ubuntu \u3002 \u7b2c 24 \u884c\u7684 steps \u5c31\u5305\u542b\u4e86\u5177\u4f53\u7684 Actions\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 steps \u5206\u4e3a\u4e86\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f run \u7c7b\u578b\uff0c\u5176\u5b9e\u5c31\u662f\u666e\u901a\u7684\u547d\u4ee4\u884c\u547d\u4ee4\u3002\u8fd8\u6709\u4e00\u7c7b\u662f use\uff0c\u4ed6\u4eec\u662f GitHub \u6216\u8005\u5176\u4ed6\u4ed3\u5e93\u65e9\u5df2\u9884\u8bbe\u7684 Actions\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u62ff\u8fc7\u6765\u7528\u7684\u3002\u7b2c 26 \u884c\u7684 - uses: actions/checkout@v2 \u5176\u529f\u80fd\u5c31\u662f\u5728\u73af\u5883\u4e2d\u514b\u9686\u4ed3\u5e93\u3002 \u4e0a\u9762\u7684\u8fd9\u4e9b\u547d\u4ee4\u90fd\u4f1a\u8fd0\u884c\u5728 GitHub \u7684\u670d\u52a1\u5668\u4e0a\u3002\u8fd8\u662f\u4ee5\u4e0a\u9762\u7684 yaml \u6587\u4ef6\u4e3a\u4f8b\uff0c\u6bcf\u5f53\u9884\u8bbe\u7684 Events \u53d1\u751f\u65f6\uff0cGitHub \u4f1a\u5728\u5b83\u4eec\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u521b\u5efa\u4e00\u4e2a Ubuntu \u7684\u5bb9\u5668\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u5bb9\u5668\u91cc checkout \u4ed3\u5e93\uff0c\u7136\u540e\u8fd0\u884c\u8fd9\u4e9b\u547d\u4ee4\u3002","title":"Simple Workflow"},{"location":"github/08_GitHub_Actions.html#_1","text":"\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u5927\u5bb6\u5df2\u7ecf\u5bf9 GitHub Actions \u6709\u4e86\u4e00\u5b9a\u7684\u4e86\u89e3\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u524d\u9762\u8bb2\u7684\u77e5\u8bc6\uff0c\u505a\u4e00\u4e2a\u535a\u5ba2\u7f51\u7ad9\u4e86\u3002\u6211\u4eec\u8fd9\u4e2a\u535a\u5ba2\u7f51\u7ad9\uff0c\u53ea\u8981\u5b83\u5bf9\u5e94\u7684\u4ed3\u5e93\u6709\u4e3b\u5206\u652f\u7684\u4ee3\u7801\u5408\u5e76\uff0c\u90a3\u4e48\u5b83\u5c06\u4f1a\u88ab\u81ea\u52a8\u7f16\u8bd1\u6210 HTML \u6587\u4ef6\uff0c\u5e76\u4e14\u81ea\u52a8\u63a8\u9001\u5230 GitHub Pages \u4e0a\u53bb\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u6765\u770b\u770b\u4e3a\u4e86\u5b9e\u73b0\u4ee5\u4e0a\u529f\u80fd\uff0cyaml \u6587\u4ef6\u8981\u600e\u4e48\u7f16\u5199\u5462\uff1f # This is a basic workflow to help you get started with Actions name : publish site # Controls when the workflow will run on : # Triggers the workflow on push or pull request events but only for the main branch push : branches : [ main ] pull_request : branches : [ main ] # Allows you to run this workflow manually from the Actions tab workflow_dispatch : # A workflow run is made up of one or more jobs that can run sequentially or in parallel jobs : # This workflow contains a single job called \"build\" build : # The type of runner that the job will run on runs-on : ubuntu-latest # Steps represent a sequence of tasks that will be executed as part of the job steps : # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses : actions/checkout@v2 #\u5b89\u88c5mkdocs - name : Install mkdocs run : python -m pip install mkdocs #\u751f\u6210html - name : build html run : mkdocs build # \u53d1\u5e03\u5230\u6307\u5b9a\u76ee\u5f55 - name : Deploy uses : peaceiris/actions-gh-pages@v3 with : github_token : ${{ secrets.GITHUB_TOKEN }} publish_dir : ./site \u4ece\u7b2c 28 \u884c\u5f00\u59cb\uff0c\u6211\u4eec\u5b89\u88c5 MkDocs \u5de5\u5177\uff1b\u4ece\u7b2c 33 \u884c\u5f00\u59cb\uff0c\u6211\u4eec\u5229\u7528 MkDocs \u5de5\u5177\u6765\u751f\u6210 HTML \u6587\u4ef6\uff1b\u4ece\u7b2c 37 \u884c\u5f00\u59cb\uff0c\u6211\u4eec use \u4e86\u522b\u4eba\u5199\u597d\u7684 Action \u5c06\u6211\u4eec\u7684\u7f51\u7ad9\u53d1\u5e03\u51fa\u53bb\uff0c\u6211\u4eec\u6307\u5b9a\u53d1\u5e03\u7684\u76ee\u5f55\u662f MkDocs \u7f16\u8bd1\u8f93\u51fa\u7684 site \u5c31\u53ef\u4ee5\u4e86\u3002 \u6211\u4eec\u5bf9\u4e3b\u5206\u652f\u4e2d\u7684\u5185\u5bb9\u505a\u4e9b\u8bb8\u6539\u52a8\uff0c\u7136\u540e\u6211\u4eec\u63d0\u4ea4\u8fd9\u4e2a\u5206\u652f\uff0c\u518d push \u5230\u8fdc\u7a0b\u5206\u652f\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u67e5\u770b\u4e00\u4e0b Actions \u4e2d\u7684 update about \uff0c\u53ef\u4ee5\u770b\u5230\u679c\u7136\u6709\u5b89\u88c5\u3001\u7f16\u8bd1\u548c\u53d1\u5e03\u4e86\u3002 \u63a5\u7740\u6211\u4eec\u70b9\u5f00 pages build and deployment \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 build \u6210\u529f\u4e86\uff0c\u800c\u4e14\u53d1\u5e03\u4e5f\u6210\u529f\u4e86\u3002 \u70b9\u5f00\u535a\u5ba2\u7684 \u94fe\u63a5 \uff0c\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u7684\u4fee\u6539\u679c\u7136\u751f\u6548\u4e86\u3002 \u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u4f7f\u7528 GitHub Actions \u81ea\u52a8\u53d1\u5e03\u535a\u5ba2\u7684\u5168\u90e8\u5185\u5bb9\u5566\u3002","title":"\u81ea\u52a8\u53d1\u5e03\u7684\u535a\u5ba2\u4ed3\u5e93"},{"location":"github/09_merge_conflicts.html","text":"\u89e3\u51b3 Git \u51b2\u7a81\uff1aMerge Conflicts \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u89e3\u51b3 Git \u51b2\u7a81\uff1aMerge Conflicts \u8fd9\u7bc7\u6587\u7ae0\u662f GitHub \u4e13\u9898\uff0c\u53c2\u4e0e\u8fc7\u5f00\u6e90\u9879\u76ee\u7684\u540c\u5b66\u6216\u65e9\u6216\u665a\u90fd\u4f1a\u9047\u5230 Git \u51b2\u7a81\u7684\u95ee\u9898\u3002 \u672c\u7bc7\u6587\u7ae0\u60f3\u8ba9\u5927\u5bb6\u77e5\u5176\u7136\u77e5\u5176\u6240\u4ee5\u7136\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a \u51b2\u7a81\u662f\u5982\u4f55\u5f62\u6210\u7684 \u5982\u4f55\u89e3\u51b3\u51b2\u7a81 \u5728 GitHub \u4e0a\u89e3\u51b3\u51b2\u7a81 \u4f7f\u7528 VSCode \u89e3\u51b3\u51b2\u7a81 \u51b2\u7a81\u662f\u5982\u4f55\u5f62\u6210\u7684 \u00b6 \u5728\u4f7f\u7528 GitHub \u53c2\u4e0e\u5f00\u6e90\u9879\u76ee\u65f6\uff0c\u53ef\u80fd\u4f1a\u9047\u5230\u591a\u4e2a commit \u4fee\u6539\u7684\u4ee3\u7801\u90fd\u662f\u540c\u4e00\u5904\u7684\u60c5\u51b5\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c A \u540c\u5b66\u548c B \u540c\u5b66\u90fd\u57fa\u4e8e\u4e3b\u5206\u652f\u8fdb\u884c\u4fee\u6539\u3002A \u540c\u5b66\u5c06\u67d0\u884c\u4ee3\u7801\u5199\u6210\u4e86 Default True\u3002\u4f46\u662f B \u540c\u5b66\u5c06\u67d0\u884c\u4ee3\u7801\u5199\u6210\u4e86 Default False\uff0c\u7136\u540e\u5148\u540e\u5408\u5e76\u5165\u4e86\u4e3b\u5206\u652f\u3002 \u6b64\u65f6 Git \u68c0\u6d4b\u5230\u8fd9\u4e24\u4e2a\u540c\u5b66\u90fd\u5bf9\u8fd9\u540c\u4e00\u884c\u4ee3\u7801\u8fdb\u884c\u4e86\u4fee\u6539\u3002\u4f46\u662f Git \u5374\u6ca1\u6709\u80fd\u529b\u53bb\u5224\u65ad\u54ea\u4e00\u4e2a\u4fee\u6b63\u662f\u6b63\u786e\u7684\uff0c\u54ea\u4e00\u4e2a\u4fee\u6539\u662f\u66f4\u597d\u7684\u3002 \u8fd9\u6837\u7684\u51b2\u7a81\uff0c\u673a\u5668\u662f\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7\u81ea\u52a8\u5316\u89e3\u51b3\u7684\uff0c\u5b83\u9700\u8981\u4eba\u4e3a\u5730\u901a\u8fc7\u903b\u8f91\u5224\u65ad\u624d\u80fd\u89e3\u51b3\u3002\u4e8e\u662f Git \u5c31\u4f1a\u62a5\u544a\u4ea7\u751f\u4e86\u51b2\u7a81\uff0c\u8bf7\u6c42 B \u540c\u5b66\u53bb\u89e3\u51b3\u51b2\u7a81\u3002 \u90a3\u51b2\u7a81\u5230\u5e95\u957f\u4ec0\u4e48\u6837\u5462\uff1f\u63a5\u4e0b\u6765\uff0c\u672c\u7bc7\u6587\u7ae0\u5c31\u5c06\u6a21\u62df A \u548c B \u540c\u5b66\uff0c\u7528\u547d\u4ee4\u884c\u6f14\u793a\u4e00\u4e0b\u51b2\u7a81\u7684\u5f62\u6210\u8fc7\u7a0b\u3002 \u5b9e\u8df5\uff1a\u51b2\u7a81\u662f\u5982\u4f55\u4ea7\u751f\u7684 \u00b6 \u63a5\u4e0b\u6765\uff0c\u4ee5\u5f00\u6e90\u9879\u76ee OneFlow \u4e2d\u7684 libai \u4ed3\u5e93\u4e2d\u7684\u6587\u6863\u4f5c\u4e3a\u4f8b\u5b50\u6765\u6f14\u793a\u3002\u6a21\u62df A \u548c B \u540c\u5b66\u90fd\u5bf9 libai \u4ed3\u5e93\u4e2d\u7684 README \u6587\u4ef6\u8fdb\u884c\u4fee\u6539\u3002 \u9996\u5148\uff0cA \u540c\u5b66\u57fa\u4e8e main \u5206\u652f\u5efa\u7acb\u4e86\u4e00\u4e2a branch_a \u7684\u5206\u652f\uff0c git checkout -b branch_a \u3002\u4ed6\u5728 branch_a \u4e0a\u505a\u4e86\u4fee\u6539\uff0c\u6bd4\u5982\u4ed6\u8ba4\u4e3a\u6587\u6863\u4e2d\u63d0\u53ca\u7684\u7248\u672c\u5e94\u8be5\u662f 0.A.0\uff0c\u4fee\u6539\u4fdd\u5b58\uff0c\u5e76\u4e14\u4ed6\u505a\u4e86\u4fee\u6539\u4e4b\u540e\uff0c\u8fdb\u884c\u4e86\u63d0\u4ea4\uff0c git commit -a -m \u201cby a\u201d \u3002 \u63a5\u7740\u6765\u6a21\u62df B \u540c\u5b66\u7684\u64cd\u4f5c\uff0c\u5148\u5207\u6362\u5230\u4e3b\u5206\u652f\uff0c git checkout main \u3002B \u540c\u5b66\u4ed6\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u57fa\u4e8e main \u5206\u652f\u4e5f\u521b\u7acb\u4e86\u4e00\u4e2a branch_b \u7684\u5206\u652f\uff0c git checkout -b branch_b \u3002\u4f46\u662f B \u540c\u5b66\u5c31\u548c A \u540c\u5b66\u7684\u610f\u89c1\u51b2\u7a81\u4e86\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u4e2a\u7248\u672c\u5e94\u8be5\u662f 0.B.0\uff0c\u4e8e\u662f\u4ed6\u505a\u4e86\u76f8\u5e94\u7684\u4fee\u6539\u3002\u63a5\u7740\uff0cB \u540c\u5b66\u5bf9\u8fd9\u4e00\u7b14\u4fee\u6539\u8fdb\u884c\u4e86\u63d0\u4ea4 commit\uff0c git commit -a -m \u201cby b\u201d \u3002 \u5b8c\u6210\u540e\uff0c\u5207\u6362\u56de\u4e3b\u5206\u652f\u3002\u63a5\u7740\uff0c\u4e3b\u5206\u652f\u60f3\u8981\u5408\u5e76\u65b0\u529f\u80fd\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9996\u5148\u5408\u5e76 a \u5206\u652f\uff0c git merge branch_a , \u7136\u540e\u5c31\u5408\u5e76\u6210\u529f\u4e86\u3002\u63a5\u7740\uff0c\u7c7b\u4f3c\u5730\u5408\u5e76 b \u5206\u652f\uff0c git merge branch_b \u3002\u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u4f1a\u62a5\u51b2\u7a81\uff0c\u8fd9\u662f\u7531\u4e8e A \u548c B \u4fee\u6539\u4e86\u76f8\u540c\u7684\u5730\u65b9\uff0c\u6240\u4ee5 Git \u68c0\u6d4b\u5230\u4e86\uff0c\u5e76\u4e14\u63d0\u793a\u4e86\u8981\u5148\u53bb\u89e3\u51b3\u51b2\u7a81\u540e\uff0c\u518d\u6765\u63d0\u4ea4\u3002 \u5982\u4f55\u89e3\u51b3\u51b2\u7a81 \u00b6 \u51b2\u7a81\u4ea7\u751f\u4e86\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u901a\u8fc7\u4eba\u4e3a\u89e3\u51b3\u624d\u80fd\u5408\u5e76\u5165\u5206\u652f\u3002\u5b9e\u9645\u4e0a\uff0cGit \u68c0\u6d4b\u548c\u6807\u8bb0\u51b2\u7a81\u7684\u65b9\u5f0f\u662f\u975e\u5e38\u6734\u7d20\u4e14\u76f4\u63a5\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u7eaf\u6587\u672c\u683c\u5f0f\u3002 \u7528 notepad++ \u6253\u5f00\u521a\u521a\u4fee\u6539\u8fc7\u7684 README \u6587\u4ef6\u3002\u53ef\u4ee5\u53d1\u73b0 Git \u68c0\u6d4b\u51fa\u4e86\u53d1\u751f\u51b2\u7a81\u7684\u5730\u65b9\uff0c\u5e76\u4e14\u7528\u5927\u4e8e\uff0c\u7b49\u4e8e\uff0c\u5c0f\u4e8e\u7b26\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\u90fd\u6807\u8bb0\u4e86\u51fa\u6765\uff0c\u8fd9\u4e00\u5207\u5b83\u90fd\u662f\u4e00\u79cd\u7eaf\u6587\u672c\u7684\u683c\u5f0f\u3002 <<<<<<< HEAD LiBai \u662f\u4e00\u4e2a\u57fa\u4e8e Oneflow \u7684\u5927\u578b\u89c4\u6a21\u6a21\u578b\u8bad\u7ec3\u5f00\u6e90\u5de5\u5177\u7bb1\uff0c\u4e3b\u5206\u652f\u4ee3\u7801\u76ee\u524d\u652f\u6301 OneFlow 0.A.0 \u4ee5\u4e0a\u7684\u7248\u672c\u3002 ======= LiBai \u662f\u4e00\u4e2a\u57fa\u4e8e Oneflow \u7684\u5927\u578b\u89c4\u6a21\u6a21\u578b\u8bad\u7ec3\u5f00\u6e90\u5de5\u5177\u7bb1\uff0c\u4e3b\u5206\u652f\u4ee3\u7801\u76ee\u524d\u652f\u6301 OneFlow 0.B.0 \u4ee5\u4e0a\u7684\u7248\u672c\u3002 >>>>>>> branch_b \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u90fd\u662f\u9700\u8981\u5bf9\u8fd9\u4e24\u4e2a\u5185\u5bb9\u8fdb\u884c\u4e00\u4e2a\u4e8c\u9009\u4e00\u7684\u64cd\u4f5c\uff0c\u5373\u4fdd\u7559\u5fc5\u8981\u7684\u5185\u5bb9\uff0c\u5220\u9664\u4e0d\u5fc5\u8981\u7684\u5185\u5bb9\uff0c\u8fd8\u5305\u62ec\u8fd9\u91cc\u7684\u6807\u8bb0\u7b26\u53f7\u3002\u5047\u8bbe\u8981\u4fdd\u7559 A \u7684\u4fee\u6539\uff0c\u90a3\u5c31\u9700\u8981\u5220\u6389 B \u7684\u5185\u5bb9\u548c\u5220\u6389\u5206\u9694\u7b26\u3002 LiBai \u662f\u4e00\u4e2a\u57fa\u4e8e Oneflow \u7684\u5927\u578b\u89c4\u6a21\u6a21\u578b\u8bad\u7ec3\u5f00\u6e90\u5de5\u5177\u7bb1\uff0c\u4e3b\u5206\u652f\u4ee3\u7801\u76ee\u524d\u652f\u6301 OneFlow 0.A.0 \u4ee5\u4e0a\u7684\u7248\u672c\u3002 \u4fdd\u5b58\u540e\uff0c\u518d\u67e5\u770b\u4e00\u4e0b\u72b6\u6001\uff0c git status \u3002\u63a5\u7740\uff0c\u5c06\u521a\u521a\u7684\u6539\u52a8\u8fdb\u884c\u4e00\u4e2a\u63d0\u4ea4\uff0c git add . \u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u81ea\u52a8\u751f\u6210\u4e86 commit \u7684\u4fe1\u606f\u3002 \u8f93\u5165 git commit \u5c31\u53ef\u4ee5\u63d0\u4ea4\u6210\u529f\u4e86\u3002 \u53ef\u4ee5\u8f93\u5165 git log \u67e5\u770b\u4e00\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230 branch_a \u548c branch_b \u90fd\u5df2\u7ecf\u5408\u5e76\u5230\u4e86 main \u5206\u652f\uff0c\u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e\u89e3\u51b3\u51b2\u7a81\u7684 commit\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u6700\u672c\u8d28\u7684\u65b9\u5f0f\u5728\u672c\u5730\u5236\u9020\u4e86\u51b2\u7a81\uff0c\u53c8\u89e3\u51b3\u4e86\u5b83\u3002\u7136\u800c\u5728\u66f4\u591a\u60c5\u51b5\u4e0b\uff0c\u4f5c\u4e3a\u5f00\u6e90\u8d21\u732e\u8005\uff0c\u5927\u5bb6\u90fd\u662f\u5728\u8fdc\u7a0b\u534f\u4f5c\u7684\u60c5\u51b5\u4e0b\u4ea7\u751f\u7684\u51b2\u7a81\u3002 \u800c GitHub\uff0c\u5927\u5bb6\u53ef\u4ee5\u7406\u89e3\u4e3a\u7f51\u9875\u7248\u7684 Git \u524d\u7aef\uff0c\u5b83\u6709\u4e00\u4e9b\u5f88\u65b9\u4fbf\u7684\u8bbe\u8ba1\u6765\u5e2e\u52a9\u89e3\u51b3\u51b2\u7a81\u3002 \u5728 GitHub \u4e0a\u89e3\u51b3\u51b2\u7a81 \u00b6 \u8fd9\u91cc\u7528\u5c0f\u7cd6 fork \u7684 OneFlow \u7684 libai \u4ed3\u5e93\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u4f9d\u65e7\u662f\u548c\u524d\u9762\u4e00\u6837\u7684\u4f8b\u5b50\u3002\u4e0d\u8fc7\u73b0\u5728\u9700\u8981\u5c06 branch_a \u548c branch_b \u8fd9\u4e24\u4e2a\u5206\u652f\u7ed9\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u5e76\u4e14\u521b\u5efa PR\u3002\u63a5\u7740\uff0c\u521b\u5efa\u4e00\u4e2a PR \u5230\u81ea\u5df1\u7684\u4ed3\u5e93\u540e\uff0c\u7136\u540e\u70b9\u51fb merge\u3002 \u63a5\u7740\uff0c\u6211\u4eec\u4e5f\u5bf9 b \u5206\u652f\u8fdb\u884c\u4e00\u4e2a\u521b\u5efa PR\u3002\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc GitHub \u5df2\u7ecf\u68c0\u6d4b\u51fa\u4e86\u5728 README \u8fd9\u4e2a\u6587\u4ef6\u4e2d\u4ea7\u751f\u4e86\u51b2\u7a81\u5fc5\u987b\u8981\u89e3\u51b3\u3002 \u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u70b9\u51fb Resolve Conflicts \u6765\u89e3\u51b3\u3002 \u7136\u540e\u53ef\u4ee5\u53d1\u73b0 GitHub \u7684\u754c\u9762\u6709\u4e00\u70b9\u70b9\u50cf\u7f51\u9875\u7248\u7684\u7f16\u8f91\u5668\uff0c\u53ef\u4ee5\u548c\u521a\u521a\u672c\u5730\u7684\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u53bb\u6389\u4e0d\u91cd\u8981\uff0c\u4e0d\u5fc5\u8981\u7684\u5185\u5bb9\u548c\u5206\u9694\u7b26\u3002\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u8981\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 Mark as resolved \uff0c\u63a5\u7740\u70b9\u51fb Commit merge \u3002\u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u70b9\u5230 Merge pull request \u4e86\u3002\u8fd9\u6837 branch_b \u7684 PR \u4e5f\u6210\u529f\u7684\u88ab\u5408\u5e76\u4e86\u3002 \u56de\u8fc7\u5934\u770b\u770b\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u4e24\u7b14 commit\u3002\u7b2c\u4e00\u7b14\uff0c\u662f\u6211\u4eec\u672c\u5730\u7684\u4fee\u6539\u7684 b \u7248\u672c\uff0c\u7b2c\u4e8c\u7b14\uff0c\u5c31\u662f\u89e3\u51b3\u51b2\u7a81\u65f6\u4ea7\u751f\u7684 commit\u3002 GitHub \u53ef\u4ee5\u4f7f\u5f97\u5728\u7f51\u9875\u4e0a\u5c31\u80fd\u89e3\u51b3\u51b2\u7a81\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u51b2\u7a81\uff0cGitHub \u7f51\u9875\u7aef\u4e5f\u662f\u65e0\u80fd\u4e3a\u529b\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u50cf\u89c6\u9891\u5f00\u59cb\u90a3\u6837\u901a\u8fc7\u547d\u4ee4\u884c + \u7f16\u8f91\u5668\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u51b2\u7a81\u3002 \u521a\u521a\u7528\u7684\u7f16\u8f91\u5668\u662f Notepad++\uff0c\u4f46\u662f\u8fd9\u91cc\u63a8\u8350\u4f7f\u7528 VSCode \u4f5c\u4e3a\u7f16\u8f91\u5668\u3002VSCode \u9488\u5bf9 Git \u505a\u4e86\u4e00\u4e9b\u529f\u80fd\u4f18\u5316\uff0c\u8fd9\u6837\u80fd\u591f\u5927\u5927\u63d0\u5347\u6211\u4eec\u89e3\u51b3\u51b2\u7a81\u7684\u6548\u7387 \u4f7f\u7528 VSCode \u89e3\u51b3\u51b2\u7a81 \u00b6 \u63a5\u4e0b\u6765\u770b\u770b\uff0cVSCode \u9762\u5bf9\u51b2\u7a81\u65f6\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u53ef\u4ee5\u53d1\u73b0 VSCode \u975e\u5e38\u4f53\u8d34\uff0c\u5b83\u4ee5\u5f69\u8272\u7684\u65b9\u5f0f\u6765\u5448\u73b0\u4e86\u51b2\u7a81\uff0cA \u7684\u4fee\u6539\u662f\u7eff\u8272\u7684\uff0cB \u7684\u4fee\u6539\u662f\u84dd\u8272\u7684\u3002 \u6b64\u5916\uff0cVSCode \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6309\u952e\u4f7f\u5f97\u6211\u4eec\u7684\u64cd\u4f5c\u66f4\u7b80\u4fbf\u3002 \u6bd4\u5982\u60f3\u4fdd\u7559 a \u5206\u652f\u7684\u5185\u5bb9\uff0c\u5c31\u5e94\u8be5\u5220\u9664 b \u5206\u652f\u7684\u5185\u5bb9\u548c\u5206\u9694\u7b26\u3002\u5728 VSCode \u4e2d\u5c31\u975e\u5e38\u65b9\u4fbf\u4e86\uff0c\u53ea\u7528\u70b9\u51fb Accept Current Change \u8fd9\u4e2a\u6309\u94ae\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e0d\u9700\u8981\u7684\u4e1c\u897f\u90fd\u88ab\u5220\u9664\u4e86\u3002 \u5e76\u4e14\uff0c\u7531\u4e8e\u8fd9\u4e9b\u64cd\u4f5c\u5176\u5b9e\u90fd\u662f\u7eaf\u6587\u672c\u7684\u64cd\u4f5c\uff0c\u662f\u53ef\u4ee5\u64a4\u9500\u7684\uff0c\u70b9\u51fb Edit \u4e2d\u7684 Undo \u5c31\u53ef\u4ee5\u8fd8\u539f\u3002 Accept Incoming Change \u662f\u4fdd\u7559 b \u5206\u652f\u7684\u5185\u5bb9\u3002 Accept Both Changes \u662f\u4e24\u4e2a\u5206\u652f\u90fd\u4fdd\u7559\u3002 \u5269\u4e0b\u7684\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u90fd\u53ef\u4ee5\u81ea\u5df1\u53bb\u8bd5\u4e00\u8bd5\uff0c\u603b\u4e4b\u6765\u8bf4\u5c31\u662f\u975e\u5e38\u7684\u65b9\u4fbf\u3002","title":"\u89e3\u51b3 Git \u51b2\u7a81 Merge Conflicts"},{"location":"github/09_merge_conflicts.html#git-merge-conflicts","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u89e3\u51b3 Git \u51b2\u7a81\uff1aMerge Conflicts \u8fd9\u7bc7\u6587\u7ae0\u662f GitHub \u4e13\u9898\uff0c\u53c2\u4e0e\u8fc7\u5f00\u6e90\u9879\u76ee\u7684\u540c\u5b66\u6216\u65e9\u6216\u665a\u90fd\u4f1a\u9047\u5230 Git \u51b2\u7a81\u7684\u95ee\u9898\u3002 \u672c\u7bc7\u6587\u7ae0\u60f3\u8ba9\u5927\u5bb6\u77e5\u5176\u7136\u77e5\u5176\u6240\u4ee5\u7136\uff0c\u7ed3\u6784\u5982\u4e0b\uff1a \u51b2\u7a81\u662f\u5982\u4f55\u5f62\u6210\u7684 \u5982\u4f55\u89e3\u51b3\u51b2\u7a81 \u5728 GitHub \u4e0a\u89e3\u51b3\u51b2\u7a81 \u4f7f\u7528 VSCode \u89e3\u51b3\u51b2\u7a81","title":"\u89e3\u51b3 Git \u51b2\u7a81\uff1aMerge Conflicts"},{"location":"github/09_merge_conflicts.html#_1","text":"\u5728\u4f7f\u7528 GitHub \u53c2\u4e0e\u5f00\u6e90\u9879\u76ee\u65f6\uff0c\u53ef\u80fd\u4f1a\u9047\u5230\u591a\u4e2a commit \u4fee\u6539\u7684\u4ee3\u7801\u90fd\u662f\u540c\u4e00\u5904\u7684\u60c5\u51b5\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c A \u540c\u5b66\u548c B \u540c\u5b66\u90fd\u57fa\u4e8e\u4e3b\u5206\u652f\u8fdb\u884c\u4fee\u6539\u3002A \u540c\u5b66\u5c06\u67d0\u884c\u4ee3\u7801\u5199\u6210\u4e86 Default True\u3002\u4f46\u662f B \u540c\u5b66\u5c06\u67d0\u884c\u4ee3\u7801\u5199\u6210\u4e86 Default False\uff0c\u7136\u540e\u5148\u540e\u5408\u5e76\u5165\u4e86\u4e3b\u5206\u652f\u3002 \u6b64\u65f6 Git \u68c0\u6d4b\u5230\u8fd9\u4e24\u4e2a\u540c\u5b66\u90fd\u5bf9\u8fd9\u540c\u4e00\u884c\u4ee3\u7801\u8fdb\u884c\u4e86\u4fee\u6539\u3002\u4f46\u662f Git \u5374\u6ca1\u6709\u80fd\u529b\u53bb\u5224\u65ad\u54ea\u4e00\u4e2a\u4fee\u6b63\u662f\u6b63\u786e\u7684\uff0c\u54ea\u4e00\u4e2a\u4fee\u6539\u662f\u66f4\u597d\u7684\u3002 \u8fd9\u6837\u7684\u51b2\u7a81\uff0c\u673a\u5668\u662f\u6ca1\u6709\u529e\u6cd5\u901a\u8fc7\u81ea\u52a8\u5316\u89e3\u51b3\u7684\uff0c\u5b83\u9700\u8981\u4eba\u4e3a\u5730\u901a\u8fc7\u903b\u8f91\u5224\u65ad\u624d\u80fd\u89e3\u51b3\u3002\u4e8e\u662f Git \u5c31\u4f1a\u62a5\u544a\u4ea7\u751f\u4e86\u51b2\u7a81\uff0c\u8bf7\u6c42 B \u540c\u5b66\u53bb\u89e3\u51b3\u51b2\u7a81\u3002 \u90a3\u51b2\u7a81\u5230\u5e95\u957f\u4ec0\u4e48\u6837\u5462\uff1f\u63a5\u4e0b\u6765\uff0c\u672c\u7bc7\u6587\u7ae0\u5c31\u5c06\u6a21\u62df A \u548c B \u540c\u5b66\uff0c\u7528\u547d\u4ee4\u884c\u6f14\u793a\u4e00\u4e0b\u51b2\u7a81\u7684\u5f62\u6210\u8fc7\u7a0b\u3002","title":"\u51b2\u7a81\u662f\u5982\u4f55\u5f62\u6210\u7684"},{"location":"github/09_merge_conflicts.html#_2","text":"\u63a5\u4e0b\u6765\uff0c\u4ee5\u5f00\u6e90\u9879\u76ee OneFlow \u4e2d\u7684 libai \u4ed3\u5e93\u4e2d\u7684\u6587\u6863\u4f5c\u4e3a\u4f8b\u5b50\u6765\u6f14\u793a\u3002\u6a21\u62df A \u548c B \u540c\u5b66\u90fd\u5bf9 libai \u4ed3\u5e93\u4e2d\u7684 README \u6587\u4ef6\u8fdb\u884c\u4fee\u6539\u3002 \u9996\u5148\uff0cA \u540c\u5b66\u57fa\u4e8e main \u5206\u652f\u5efa\u7acb\u4e86\u4e00\u4e2a branch_a \u7684\u5206\u652f\uff0c git checkout -b branch_a \u3002\u4ed6\u5728 branch_a \u4e0a\u505a\u4e86\u4fee\u6539\uff0c\u6bd4\u5982\u4ed6\u8ba4\u4e3a\u6587\u6863\u4e2d\u63d0\u53ca\u7684\u7248\u672c\u5e94\u8be5\u662f 0.A.0\uff0c\u4fee\u6539\u4fdd\u5b58\uff0c\u5e76\u4e14\u4ed6\u505a\u4e86\u4fee\u6539\u4e4b\u540e\uff0c\u8fdb\u884c\u4e86\u63d0\u4ea4\uff0c git commit -a -m \u201cby a\u201d \u3002 \u63a5\u7740\u6765\u6a21\u62df B \u540c\u5b66\u7684\u64cd\u4f5c\uff0c\u5148\u5207\u6362\u5230\u4e3b\u5206\u652f\uff0c git checkout main \u3002B \u540c\u5b66\u4ed6\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u57fa\u4e8e main \u5206\u652f\u4e5f\u521b\u7acb\u4e86\u4e00\u4e2a branch_b \u7684\u5206\u652f\uff0c git checkout -b branch_b \u3002\u4f46\u662f B \u540c\u5b66\u5c31\u548c A \u540c\u5b66\u7684\u610f\u89c1\u51b2\u7a81\u4e86\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u4e2a\u7248\u672c\u5e94\u8be5\u662f 0.B.0\uff0c\u4e8e\u662f\u4ed6\u505a\u4e86\u76f8\u5e94\u7684\u4fee\u6539\u3002\u63a5\u7740\uff0cB \u540c\u5b66\u5bf9\u8fd9\u4e00\u7b14\u4fee\u6539\u8fdb\u884c\u4e86\u63d0\u4ea4 commit\uff0c git commit -a -m \u201cby b\u201d \u3002 \u5b8c\u6210\u540e\uff0c\u5207\u6362\u56de\u4e3b\u5206\u652f\u3002\u63a5\u7740\uff0c\u4e3b\u5206\u652f\u60f3\u8981\u5408\u5e76\u65b0\u529f\u80fd\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9996\u5148\u5408\u5e76 a \u5206\u652f\uff0c git merge branch_a , \u7136\u540e\u5c31\u5408\u5e76\u6210\u529f\u4e86\u3002\u63a5\u7740\uff0c\u7c7b\u4f3c\u5730\u5408\u5e76 b \u5206\u652f\uff0c git merge branch_b \u3002\u53ef\u4ee5\u53d1\u73b0\u8fd9\u91cc\u4f1a\u62a5\u51b2\u7a81\uff0c\u8fd9\u662f\u7531\u4e8e A \u548c B \u4fee\u6539\u4e86\u76f8\u540c\u7684\u5730\u65b9\uff0c\u6240\u4ee5 Git \u68c0\u6d4b\u5230\u4e86\uff0c\u5e76\u4e14\u63d0\u793a\u4e86\u8981\u5148\u53bb\u89e3\u51b3\u51b2\u7a81\u540e\uff0c\u518d\u6765\u63d0\u4ea4\u3002","title":"\u5b9e\u8df5\uff1a\u51b2\u7a81\u662f\u5982\u4f55\u4ea7\u751f\u7684"},{"location":"github/09_merge_conflicts.html#_3","text":"\u51b2\u7a81\u4ea7\u751f\u4e86\uff0c\u90a3\u4e48\u5c31\u5fc5\u987b\u901a\u8fc7\u4eba\u4e3a\u89e3\u51b3\u624d\u80fd\u5408\u5e76\u5165\u5206\u652f\u3002\u5b9e\u9645\u4e0a\uff0cGit \u68c0\u6d4b\u548c\u6807\u8bb0\u51b2\u7a81\u7684\u65b9\u5f0f\u662f\u975e\u5e38\u6734\u7d20\u4e14\u76f4\u63a5\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u7eaf\u6587\u672c\u683c\u5f0f\u3002 \u7528 notepad++ \u6253\u5f00\u521a\u521a\u4fee\u6539\u8fc7\u7684 README \u6587\u4ef6\u3002\u53ef\u4ee5\u53d1\u73b0 Git \u68c0\u6d4b\u51fa\u4e86\u53d1\u751f\u51b2\u7a81\u7684\u5730\u65b9\uff0c\u5e76\u4e14\u7528\u5927\u4e8e\uff0c\u7b49\u4e8e\uff0c\u5c0f\u4e8e\u7b26\u53f7\u4f5c\u4e3a\u5206\u9694\u7b26\u90fd\u6807\u8bb0\u4e86\u51fa\u6765\uff0c\u8fd9\u4e00\u5207\u5b83\u90fd\u662f\u4e00\u79cd\u7eaf\u6587\u672c\u7684\u683c\u5f0f\u3002 <<<<<<< HEAD LiBai \u662f\u4e00\u4e2a\u57fa\u4e8e Oneflow \u7684\u5927\u578b\u89c4\u6a21\u6a21\u578b\u8bad\u7ec3\u5f00\u6e90\u5de5\u5177\u7bb1\uff0c\u4e3b\u5206\u652f\u4ee3\u7801\u76ee\u524d\u652f\u6301 OneFlow 0.A.0 \u4ee5\u4e0a\u7684\u7248\u672c\u3002 ======= LiBai \u662f\u4e00\u4e2a\u57fa\u4e8e Oneflow \u7684\u5927\u578b\u89c4\u6a21\u6a21\u578b\u8bad\u7ec3\u5f00\u6e90\u5de5\u5177\u7bb1\uff0c\u4e3b\u5206\u652f\u4ee3\u7801\u76ee\u524d\u652f\u6301 OneFlow 0.B.0 \u4ee5\u4e0a\u7684\u7248\u672c\u3002 >>>>>>> branch_b \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u90fd\u662f\u9700\u8981\u5bf9\u8fd9\u4e24\u4e2a\u5185\u5bb9\u8fdb\u884c\u4e00\u4e2a\u4e8c\u9009\u4e00\u7684\u64cd\u4f5c\uff0c\u5373\u4fdd\u7559\u5fc5\u8981\u7684\u5185\u5bb9\uff0c\u5220\u9664\u4e0d\u5fc5\u8981\u7684\u5185\u5bb9\uff0c\u8fd8\u5305\u62ec\u8fd9\u91cc\u7684\u6807\u8bb0\u7b26\u53f7\u3002\u5047\u8bbe\u8981\u4fdd\u7559 A \u7684\u4fee\u6539\uff0c\u90a3\u5c31\u9700\u8981\u5220\u6389 B \u7684\u5185\u5bb9\u548c\u5220\u6389\u5206\u9694\u7b26\u3002 LiBai \u662f\u4e00\u4e2a\u57fa\u4e8e Oneflow \u7684\u5927\u578b\u89c4\u6a21\u6a21\u578b\u8bad\u7ec3\u5f00\u6e90\u5de5\u5177\u7bb1\uff0c\u4e3b\u5206\u652f\u4ee3\u7801\u76ee\u524d\u652f\u6301 OneFlow 0.A.0 \u4ee5\u4e0a\u7684\u7248\u672c\u3002 \u4fdd\u5b58\u540e\uff0c\u518d\u67e5\u770b\u4e00\u4e0b\u72b6\u6001\uff0c git status \u3002\u63a5\u7740\uff0c\u5c06\u521a\u521a\u7684\u6539\u52a8\u8fdb\u884c\u4e00\u4e2a\u63d0\u4ea4\uff0c git add . \u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u81ea\u52a8\u751f\u6210\u4e86 commit \u7684\u4fe1\u606f\u3002 \u8f93\u5165 git commit \u5c31\u53ef\u4ee5\u63d0\u4ea4\u6210\u529f\u4e86\u3002 \u53ef\u4ee5\u8f93\u5165 git log \u67e5\u770b\u4e00\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230 branch_a \u548c branch_b \u90fd\u5df2\u7ecf\u5408\u5e76\u5230\u4e86 main \u5206\u652f\uff0c\u8fd8\u6709\u4e00\u4e2a\u7528\u4e8e\u89e3\u51b3\u51b2\u7a81\u7684 commit\u3002 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u6700\u672c\u8d28\u7684\u65b9\u5f0f\u5728\u672c\u5730\u5236\u9020\u4e86\u51b2\u7a81\uff0c\u53c8\u89e3\u51b3\u4e86\u5b83\u3002\u7136\u800c\u5728\u66f4\u591a\u60c5\u51b5\u4e0b\uff0c\u4f5c\u4e3a\u5f00\u6e90\u8d21\u732e\u8005\uff0c\u5927\u5bb6\u90fd\u662f\u5728\u8fdc\u7a0b\u534f\u4f5c\u7684\u60c5\u51b5\u4e0b\u4ea7\u751f\u7684\u51b2\u7a81\u3002 \u800c GitHub\uff0c\u5927\u5bb6\u53ef\u4ee5\u7406\u89e3\u4e3a\u7f51\u9875\u7248\u7684 Git \u524d\u7aef\uff0c\u5b83\u6709\u4e00\u4e9b\u5f88\u65b9\u4fbf\u7684\u8bbe\u8ba1\u6765\u5e2e\u52a9\u89e3\u51b3\u51b2\u7a81\u3002","title":"\u5982\u4f55\u89e3\u51b3\u51b2\u7a81"},{"location":"github/09_merge_conflicts.html#github","text":"\u8fd9\u91cc\u7528\u5c0f\u7cd6 fork \u7684 OneFlow \u7684 libai \u4ed3\u5e93\u4f5c\u4e3a\u4f8b\u5b50\uff0c\u4f9d\u65e7\u662f\u548c\u524d\u9762\u4e00\u6837\u7684\u4f8b\u5b50\u3002\u4e0d\u8fc7\u73b0\u5728\u9700\u8981\u5c06 branch_a \u548c branch_b \u8fd9\u4e24\u4e2a\u5206\u652f\u7ed9\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u5e76\u4e14\u521b\u5efa PR\u3002\u63a5\u7740\uff0c\u521b\u5efa\u4e00\u4e2a PR \u5230\u81ea\u5df1\u7684\u4ed3\u5e93\u540e\uff0c\u7136\u540e\u70b9\u51fb merge\u3002 \u63a5\u7740\uff0c\u6211\u4eec\u4e5f\u5bf9 b \u5206\u652f\u8fdb\u884c\u4e00\u4e2a\u521b\u5efa PR\u3002\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc GitHub \u5df2\u7ecf\u68c0\u6d4b\u51fa\u4e86\u5728 README \u8fd9\u4e2a\u6587\u4ef6\u4e2d\u4ea7\u751f\u4e86\u51b2\u7a81\u5fc5\u987b\u8981\u89e3\u51b3\u3002 \u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u70b9\u51fb Resolve Conflicts \u6765\u89e3\u51b3\u3002 \u7136\u540e\u53ef\u4ee5\u53d1\u73b0 GitHub \u7684\u754c\u9762\u6709\u4e00\u70b9\u70b9\u50cf\u7f51\u9875\u7248\u7684\u7f16\u8f91\u5668\uff0c\u53ef\u4ee5\u548c\u521a\u521a\u672c\u5730\u7684\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u53bb\u6389\u4e0d\u91cd\u8981\uff0c\u4e0d\u5fc5\u8981\u7684\u5185\u5bb9\u548c\u5206\u9694\u7b26\u3002\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u8981\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 Mark as resolved \uff0c\u63a5\u7740\u70b9\u51fb Commit merge \u3002\u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u70b9\u5230 Merge pull request \u4e86\u3002\u8fd9\u6837 branch_b \u7684 PR \u4e5f\u6210\u529f\u7684\u88ab\u5408\u5e76\u4e86\u3002 \u56de\u8fc7\u5934\u770b\u770b\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u4e24\u7b14 commit\u3002\u7b2c\u4e00\u7b14\uff0c\u662f\u6211\u4eec\u672c\u5730\u7684\u4fee\u6539\u7684 b \u7248\u672c\uff0c\u7b2c\u4e8c\u7b14\uff0c\u5c31\u662f\u89e3\u51b3\u51b2\u7a81\u65f6\u4ea7\u751f\u7684 commit\u3002 GitHub \u53ef\u4ee5\u4f7f\u5f97\u5728\u7f51\u9875\u4e0a\u5c31\u80fd\u89e3\u51b3\u51b2\u7a81\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u51b2\u7a81\uff0cGitHub \u7f51\u9875\u7aef\u4e5f\u662f\u65e0\u80fd\u4e3a\u529b\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u50cf\u89c6\u9891\u5f00\u59cb\u90a3\u6837\u901a\u8fc7\u547d\u4ee4\u884c + \u7f16\u8f91\u5668\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u51b2\u7a81\u3002 \u521a\u521a\u7528\u7684\u7f16\u8f91\u5668\u662f Notepad++\uff0c\u4f46\u662f\u8fd9\u91cc\u63a8\u8350\u4f7f\u7528 VSCode \u4f5c\u4e3a\u7f16\u8f91\u5668\u3002VSCode \u9488\u5bf9 Git \u505a\u4e86\u4e00\u4e9b\u529f\u80fd\u4f18\u5316\uff0c\u8fd9\u6837\u80fd\u591f\u5927\u5927\u63d0\u5347\u6211\u4eec\u89e3\u51b3\u51b2\u7a81\u7684\u6548\u7387","title":"\u5728 GitHub \u4e0a\u89e3\u51b3\u51b2\u7a81"},{"location":"github/09_merge_conflicts.html#vscode","text":"\u63a5\u4e0b\u6765\u770b\u770b\uff0cVSCode \u9762\u5bf9\u51b2\u7a81\u65f6\u662f\u4ec0\u4e48\u6837\u5b50\uff0c\u53ef\u4ee5\u53d1\u73b0 VSCode \u975e\u5e38\u4f53\u8d34\uff0c\u5b83\u4ee5\u5f69\u8272\u7684\u65b9\u5f0f\u6765\u5448\u73b0\u4e86\u51b2\u7a81\uff0cA \u7684\u4fee\u6539\u662f\u7eff\u8272\u7684\uff0cB \u7684\u4fee\u6539\u662f\u84dd\u8272\u7684\u3002 \u6b64\u5916\uff0cVSCode \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6309\u952e\u4f7f\u5f97\u6211\u4eec\u7684\u64cd\u4f5c\u66f4\u7b80\u4fbf\u3002 \u6bd4\u5982\u60f3\u4fdd\u7559 a \u5206\u652f\u7684\u5185\u5bb9\uff0c\u5c31\u5e94\u8be5\u5220\u9664 b \u5206\u652f\u7684\u5185\u5bb9\u548c\u5206\u9694\u7b26\u3002\u5728 VSCode \u4e2d\u5c31\u975e\u5e38\u65b9\u4fbf\u4e86\uff0c\u53ea\u7528\u70b9\u51fb Accept Current Change \u8fd9\u4e2a\u6309\u94ae\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u4e0d\u9700\u8981\u7684\u4e1c\u897f\u90fd\u88ab\u5220\u9664\u4e86\u3002 \u5e76\u4e14\uff0c\u7531\u4e8e\u8fd9\u4e9b\u64cd\u4f5c\u5176\u5b9e\u90fd\u662f\u7eaf\u6587\u672c\u7684\u64cd\u4f5c\uff0c\u662f\u53ef\u4ee5\u64a4\u9500\u7684\uff0c\u70b9\u51fb Edit \u4e2d\u7684 Undo \u5c31\u53ef\u4ee5\u8fd8\u539f\u3002 Accept Incoming Change \u662f\u4fdd\u7559 b \u5206\u652f\u7684\u5185\u5bb9\u3002 Accept Both Changes \u662f\u4e24\u4e2a\u5206\u652f\u90fd\u4fdd\u7559\u3002 \u5269\u4e0b\u7684\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u90fd\u53ef\u4ee5\u81ea\u5df1\u53bb\u8bd5\u4e00\u8bd5\uff0c\u603b\u4e4b\u6765\u8bf4\u5c31\u662f\u975e\u5e38\u7684\u65b9\u4fbf\u3002","title":"\u4f7f\u7528 VSCode \u89e3\u51b3\u51b2\u7a81"},{"location":"github/10_git_rebase.html","text":"\u5220\u9664\u6307\u5b9a commit \u5c0f\u5999\u62db\uff1agit rebase \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u5220\u9664\u6307\u5b9a commit \u5c0f\u5999\u62db\uff1agit rebase \u672c\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd git \u7684 rebase \u547d\u4ee4\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u5220\u9664\u67d0\u6761\u6307\u5b9a\u7684 commit\u3002 \u6709\u65f6\u5019\uff0c\u53ef\u80fd\u5728\u4e00\u4e2a\u5206\u652f\u4e2d\u63d0\u4ea4\u4e86\u591a\u7b14 commit\uff0c\u4f46\u662f\u4e8b\u540e\u53c8\u60f3\u8981\u5220\u9664\u67d0\u4e9b commit \u5e94\u8be5\u600e\u4e48\u529e\uff1f \u8fd9\u65f6\u5019\uff0c\u6709\u4e9b\u540c\u5b66\u5c31\u4f1a\u8bf4\u4f7f\u7528 git reset \u547d\u4ee4\u5c31\u597d\uff0c\u4f46\u662f\u8fd9\u5176\u5b9e\u662f\u4e0d\u884c\u7684\u3002 git reset \u547d\u4ee4\u5b83\u7684\u4f5c\u7528\u662f\u56de\u6eda\u5230\u67d0\u4e2a commit\uff0c\u5728\u8fd9\u4e2a commit \u4e4b\u540e\u7684\u6240\u6709 commit \u90fd\u4f1a\u88ab\u5220\u9664\u3002 \u6b63\u56e0\u5982\u6b64\uff0c\u624d\u9700\u8981\u4ecb\u7ecd git rebase \u547d\u4ee4\u3002 \u4ec0\u4e48\u60c5\u51b5\u9700\u8981\u5220\u9664\u6307\u5b9a commit \u00b6 \u4ec0\u4e48\u6837\u7684\u573a\u666f\u624d\u4f1a\u5220\u9664\u6307\u5b9a\u7684 commit? \u4ee5 OneFlow \u7684 flowvision \u4ed3\u5e93 \u4f5c\u4e3a\u4f8b\u5b50\u3002 \u5047\u5b9a\u4fee\u6539 flowvision \u7684 README \u6587\u4ef6\uff0c\u4e00\u5171\u6709\u4e09\u4e2a feature\uff0c\u9700\u8981\u63d0\u4ea4\u4e09\u6b21 commit\u3002 \u9996\u5148\uff0c\u7b2c\u4e00\u4e2a commit \u4fee\u6539\u4e86\u7248\u672c\uff0c\u628a pip install flowvision==0.1.0 \u6539\u6210\u4e86 pip install flowvision==0.A.0 \uff0c\u4fdd\u5b58\u540e\uff0c\u8fdb\u884c\u63d0\u4ea4\u3002 \u7b2c\u4e8c\u4e2a\u4fee\u6539\uff0c\u4fee\u6539\u4e86\u6a21\u578b\uff0c\u628a <li>AlexNet</li> \u4fee\u6539\u6210 <li>TangNet</li> \uff0c\u4fdd\u5b58\uff0c\u8fdb\u884c\u63d0\u4ea4\u3002 \u7b2c\u4e09\u4e2a commit\uff0c\u4fee\u6539\u4e86\u793a\u4f8b\u4ee3\u7801\uff0c\u5c06 model = alexnet() \u4fee\u6539\u6210 model = TangNet() \uff0c\u4fdd\u5b58\uff0c\u8fdb\u884c\u63d0\u4ea4\u3002 \u63a5\u7740\uff0c\u7528 git log \u67e5\u770b\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e09\u4e2a commit \u90fd\u5df2\u7ecf\u63d0\u4ea4\u4e86\u3002 \u90a3\u4e48\u73b0\u5728\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u5982\u679c\u540e\u6765\u53d1\u73b0\u7b2c\u4e8c\u4e2a commit \u7684\u4fee\u6539\u662f\u4e0d\u5408\u9002\u7684\uff0c\u60f3\u8981\u5355\u72ec\u5220\u9664\u7b2c\u4e8c\u4e2a commit\uff0c\u540c\u65f6\u4fdd\u7559\u53e6\u5916\u4e24\u4e2a\uff0c\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a commit \u5e94\u8be5\u600e\u4e48\u529e\uff1f \u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230 git rebase \u547d\u4ee4\u4e86\u3002 \u4f7f\u7528 git rebase \u5220\u9664\u6307\u5b9a commit \u00b6 git \u7684 rebase \u547d\u4ee4\u987e\u540d\u601d\u4e49\u5c31\u662f\u9700\u8981\u91cd\u65b0\u53bb\u9009\u62e9\u4e00\u4e2a commit \u4f5c\u4e3a base\uff0c\u7136\u540e\u91cd\u65b0\u51b3\u5b9a\u8fd9\u4e2a base \u4e4b\u540e\u7684 commit \u8981\u600e\u4e48\u5904\u7406\u3002 \u6240\u4ee5\uff0c\u6572\u91cd\u70b9\u6765\u4e86\uff0c\u5b83\u7684\u4f7f\u7528\u5176\u5b9e\u662f\u5206\u6210\u4e24\u6b65\u8d70\u7684\uff1a \u7b2c\u4e00\u6b65\uff1a\u662f\u9009\u62e9\u4e00\u4e2a commit \u4f5c\u4e3a\u65b0\u7684 base \u7b2c\u4e8c\u6b65\uff1a\u662f\u51b3\u5b9a\u8fd9\u4e2a base \u4e4b\u540e\u6bcf\u4e2a commit \u8be5\u5982\u4f55\u5904\u7406 \u63a5\u4e0b\u6765\uff0c\u5c31\u5b9e\u9645\u64cd\u4f5c\u4e00\u4e0b\u3002 \u9996\u5148\u5148\u7528 git log \u67e5\u770b\u4e00\u4e0b\uff0c\u627e\u5230\u90a3\u4e09\u7b14 commit \u4e4b\u524d\u7684 commit\uff0c\u5c06\u5b83\u4f5c\u4e3a base\uff0c\u8fd9\u6837\u5b50\u5728\u5b83\u4e4b\u540e\u7684 commit \u5c31\u9700\u8981\u91cd\u65b0\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u3002 \u7136\u540e\uff0c\u8fd0\u884c git rebase -i commit_hash \uff0c \u540e\u9762\u63a5\u4e0a\u6211\u4eec\u521a\u521a\u9009\u62e9\u7684 base \u7684 hash \u503c\u3002 \u4f8b\u5b50\uff1a git rebase -i f9d69755dd876dea481ece7775413d879bcf65a7 \u8fd9\u4e2a\u65f6\u5019\u8df3\u8f6c\u5230\u4e86\u4e00\u4e2a\u6587\u672c\u9875\u9762\uff0c\u5b83\u663e\u793a\u4e86\u521a\u521a\u505a\u7684\u4e09\u4e2a\u4fee\u6539\u7684 commit\u3002 \u627e\u5230\u7b2c\u4e8c\u4e2a\u4fee\u6539\uff0c\u628a pick \u6539\u6210 drop \uff0c\u7136\u540e\u4fdd\u5b58\uff0c\u9000\u51fa\uff0c\u5c31\u64cd\u4f5c\u6210\u529f\u4e86\u3002 \u63a5\u7740\u518d git log \u67e5\u770b\u4e00\u4e0b\uff0c \u53ef\u4ee5\u53d1\u73b0\u7b2c\u4e8c\u7b14 commit \u786e\u5b9e\u795e\u5947\u5730\u88ab\u5220\u9664\u4e86\u3002 \u5176\u5b9e rebase \u7684\u529f\u80fd\u6709\u5f88\u591a\uff0c\u9664\u4e86\u50cf\u521a\u521a\u770b\u5230\u7684 pick\u3001drop\uff0c \u8fd8\u6709\u50cf squash\u3001reset \u7b49\u7528\u5904\u3002 \u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b git \u7684\u5e2e\u52a9\u6587\u6863 \u3002","title":"\u5220\u9664\u6307\u5b9a commit \u5c0f\u5999\u62db git rebase"},{"location":"github/10_git_rebase.html#commit-git-rebase","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u5220\u9664\u6307\u5b9a commit \u5c0f\u5999\u62db\uff1agit rebase \u672c\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd git \u7684 rebase \u547d\u4ee4\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u5220\u9664\u67d0\u6761\u6307\u5b9a\u7684 commit\u3002 \u6709\u65f6\u5019\uff0c\u53ef\u80fd\u5728\u4e00\u4e2a\u5206\u652f\u4e2d\u63d0\u4ea4\u4e86\u591a\u7b14 commit\uff0c\u4f46\u662f\u4e8b\u540e\u53c8\u60f3\u8981\u5220\u9664\u67d0\u4e9b commit \u5e94\u8be5\u600e\u4e48\u529e\uff1f \u8fd9\u65f6\u5019\uff0c\u6709\u4e9b\u540c\u5b66\u5c31\u4f1a\u8bf4\u4f7f\u7528 git reset \u547d\u4ee4\u5c31\u597d\uff0c\u4f46\u662f\u8fd9\u5176\u5b9e\u662f\u4e0d\u884c\u7684\u3002 git reset \u547d\u4ee4\u5b83\u7684\u4f5c\u7528\u662f\u56de\u6eda\u5230\u67d0\u4e2a commit\uff0c\u5728\u8fd9\u4e2a commit \u4e4b\u540e\u7684\u6240\u6709 commit \u90fd\u4f1a\u88ab\u5220\u9664\u3002 \u6b63\u56e0\u5982\u6b64\uff0c\u624d\u9700\u8981\u4ecb\u7ecd git rebase \u547d\u4ee4\u3002","title":"\u5220\u9664\u6307\u5b9a commit \u5c0f\u5999\u62db\uff1agit rebase"},{"location":"github/10_git_rebase.html#commit","text":"\u4ec0\u4e48\u6837\u7684\u573a\u666f\u624d\u4f1a\u5220\u9664\u6307\u5b9a\u7684 commit? \u4ee5 OneFlow \u7684 flowvision \u4ed3\u5e93 \u4f5c\u4e3a\u4f8b\u5b50\u3002 \u5047\u5b9a\u4fee\u6539 flowvision \u7684 README \u6587\u4ef6\uff0c\u4e00\u5171\u6709\u4e09\u4e2a feature\uff0c\u9700\u8981\u63d0\u4ea4\u4e09\u6b21 commit\u3002 \u9996\u5148\uff0c\u7b2c\u4e00\u4e2a commit \u4fee\u6539\u4e86\u7248\u672c\uff0c\u628a pip install flowvision==0.1.0 \u6539\u6210\u4e86 pip install flowvision==0.A.0 \uff0c\u4fdd\u5b58\u540e\uff0c\u8fdb\u884c\u63d0\u4ea4\u3002 \u7b2c\u4e8c\u4e2a\u4fee\u6539\uff0c\u4fee\u6539\u4e86\u6a21\u578b\uff0c\u628a <li>AlexNet</li> \u4fee\u6539\u6210 <li>TangNet</li> \uff0c\u4fdd\u5b58\uff0c\u8fdb\u884c\u63d0\u4ea4\u3002 \u7b2c\u4e09\u4e2a commit\uff0c\u4fee\u6539\u4e86\u793a\u4f8b\u4ee3\u7801\uff0c\u5c06 model = alexnet() \u4fee\u6539\u6210 model = TangNet() \uff0c\u4fdd\u5b58\uff0c\u8fdb\u884c\u63d0\u4ea4\u3002 \u63a5\u7740\uff0c\u7528 git log \u67e5\u770b\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e09\u4e2a commit \u90fd\u5df2\u7ecf\u63d0\u4ea4\u4e86\u3002 \u90a3\u4e48\u73b0\u5728\u95ee\u9898\u5c31\u6765\u4e86\uff0c\u5982\u679c\u540e\u6765\u53d1\u73b0\u7b2c\u4e8c\u4e2a commit \u7684\u4fee\u6539\u662f\u4e0d\u5408\u9002\u7684\uff0c\u60f3\u8981\u5355\u72ec\u5220\u9664\u7b2c\u4e8c\u4e2a commit\uff0c\u540c\u65f6\u4fdd\u7559\u53e6\u5916\u4e24\u4e2a\uff0c\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a commit \u5e94\u8be5\u600e\u4e48\u529e\uff1f \u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u7528\u5230 git rebase \u547d\u4ee4\u4e86\u3002","title":"\u4ec0\u4e48\u60c5\u51b5\u9700\u8981\u5220\u9664\u6307\u5b9a commit"},{"location":"github/10_git_rebase.html#git-rebase-commit","text":"git \u7684 rebase \u547d\u4ee4\u987e\u540d\u601d\u4e49\u5c31\u662f\u9700\u8981\u91cd\u65b0\u53bb\u9009\u62e9\u4e00\u4e2a commit \u4f5c\u4e3a base\uff0c\u7136\u540e\u91cd\u65b0\u51b3\u5b9a\u8fd9\u4e2a base \u4e4b\u540e\u7684 commit \u8981\u600e\u4e48\u5904\u7406\u3002 \u6240\u4ee5\uff0c\u6572\u91cd\u70b9\u6765\u4e86\uff0c\u5b83\u7684\u4f7f\u7528\u5176\u5b9e\u662f\u5206\u6210\u4e24\u6b65\u8d70\u7684\uff1a \u7b2c\u4e00\u6b65\uff1a\u662f\u9009\u62e9\u4e00\u4e2a commit \u4f5c\u4e3a\u65b0\u7684 base \u7b2c\u4e8c\u6b65\uff1a\u662f\u51b3\u5b9a\u8fd9\u4e2a base \u4e4b\u540e\u6bcf\u4e2a commit \u8be5\u5982\u4f55\u5904\u7406 \u63a5\u4e0b\u6765\uff0c\u5c31\u5b9e\u9645\u64cd\u4f5c\u4e00\u4e0b\u3002 \u9996\u5148\u5148\u7528 git log \u67e5\u770b\u4e00\u4e0b\uff0c\u627e\u5230\u90a3\u4e09\u7b14 commit \u4e4b\u524d\u7684 commit\uff0c\u5c06\u5b83\u4f5c\u4e3a base\uff0c\u8fd9\u6837\u5b50\u5728\u5b83\u4e4b\u540e\u7684 commit \u5c31\u9700\u8981\u91cd\u65b0\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u3002 \u7136\u540e\uff0c\u8fd0\u884c git rebase -i commit_hash \uff0c \u540e\u9762\u63a5\u4e0a\u6211\u4eec\u521a\u521a\u9009\u62e9\u7684 base \u7684 hash \u503c\u3002 \u4f8b\u5b50\uff1a git rebase -i f9d69755dd876dea481ece7775413d879bcf65a7 \u8fd9\u4e2a\u65f6\u5019\u8df3\u8f6c\u5230\u4e86\u4e00\u4e2a\u6587\u672c\u9875\u9762\uff0c\u5b83\u663e\u793a\u4e86\u521a\u521a\u505a\u7684\u4e09\u4e2a\u4fee\u6539\u7684 commit\u3002 \u627e\u5230\u7b2c\u4e8c\u4e2a\u4fee\u6539\uff0c\u628a pick \u6539\u6210 drop \uff0c\u7136\u540e\u4fdd\u5b58\uff0c\u9000\u51fa\uff0c\u5c31\u64cd\u4f5c\u6210\u529f\u4e86\u3002 \u63a5\u7740\u518d git log \u67e5\u770b\u4e00\u4e0b\uff0c \u53ef\u4ee5\u53d1\u73b0\u7b2c\u4e8c\u7b14 commit \u786e\u5b9e\u795e\u5947\u5730\u88ab\u5220\u9664\u4e86\u3002 \u5176\u5b9e rebase \u7684\u529f\u80fd\u6709\u5f88\u591a\uff0c\u9664\u4e86\u50cf\u521a\u521a\u770b\u5230\u7684 pick\u3001drop\uff0c \u8fd8\u6709\u50cf squash\u3001reset \u7b49\u7528\u5904\u3002 \u611f\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b git \u7684\u5e2e\u52a9\u6587\u6863 \u3002","title":"\u4f7f\u7528 git rebase \u5220\u9664\u6307\u5b9a commit"},{"location":"learn_cpp/012_enable_if.html","text":"\u65b0\u6807\u51c6\uff1aenable_if \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6012 enable_if \u4e0a\u4e00\u671f\u89c6\u9891 \u6211\u4eec\u4ecb\u7ecd\u4e86 SFINAE \u539f\u5219\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u672c\u7bc7\u6587\u7ae0\u5c06\u7ee7\u7eed\u4ecb\u7ecd\u4e86 enable_if \u65b0\u6807\u51c6\uff0c\u4e3a\u540e\u7eed\u6df1\u5165\u5b66\u4e60\u6a21\u677f\u5143\u7f16\u7a0b\u6253\u4e0b\u57fa\u7840\u3002 \u672c\u6587\u7684\u7ed3\u6784\u5982\u4e0b\uff1a - \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 enable_if \uff1f - enable_if \u4e0e is_same \u7684\u4f7f\u7528 - enable_if \u4e0e is_same \u5185\u90e8\u7684\u5b9e\u73b0\u539f\u7406 \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 enable_if \uff1f \u00b6 C++\u6a21\u677f\u51fd\u6570\u91cd\u8f7d\u4f9d\u8d56\u4e8e SFINAE (substitution-failure-is-not-an-error) \u539f\u5219\uff0c\u5373\u66ff\u6362\u5931\u8d25\u4e0d\u8ba4\u4e3a\u662f\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u7ee7\u7eed\u5bfb\u627e\u5408\u9002\u7684\u91cd\u8f7d\u51fd\u6570\uff1b\u4ee5\u8fd4\u56de\u957f\u5ea6\u7684\u51fd\u6570\u4e3a\u4f8b\uff0c\u8be5\u51fd\u6570\u9488\u5bf9 STL \u4e2d\u7684 vector \u5bb9\u5668\u6765\u5b9e\u73b0\uff08\u5bb9\u5668\u4e2d\u6709 size() \u6210\u5458\u51fd\u6570\uff09 class CMyclass { public : using size_type = unsigned int ; }; template < typename T > decltype ( T (). size (), typename T :: size_type ()) len ( T const & t ) //\u8be5\u51fd\u6570\u53ef\u4ee5\u907f\u514d\u5339\u914d\u5230 CMyclass \u7c7b { return t . size (); } unsigned len (...) { return 0 ; } int main () { vector < int > vec = { 1 , 2 , 3 }; cout << len ( vec ) << endl ; //\u8c03\u7528\u9488\u5bf9stl\u5e93\u5bb9\u5668\u7684len\u51fd\u6570 cout << len ( CMyclass ()) << endl ; //\u8c03\u7528len(...)\u51fd\u6570 } decltype(T().size(), typename T::size_type()) len(T const &t) \u8be5\u51fd\u6570\u58f0\u660e\u901a\u8fc7 decltype \u7c7b\u578b\u5224\u522b\u5c06\u4e0d\u5305\u542b size() \u6210\u5458\u51fd\u6570\u7684\u7279\u4f8b\u7c7b\u6392\u9664\u51fa\u53bb\uff0c\u540c\u65f6\u9017\u53f7\u8868\u8fbe\u5f0f\u8fd4\u56de\u9017\u53f7\u540e\u9762\u7684\u53c2\u6570 typename T::size_type() \uff0c\u5b9e\u73b0\u907f\u514d\u5339\u914d\u5230 CMyclass \u7c7b\u7684\u529f\u80fd\uff1b\u8fd9\u79cd\u7f16\u7a0b\u6280\u5de7\u6666\u6da9\u96be\u61c2\uff0c\u9700\u8981\u7a0b\u5e8f\u5458\u6839\u636e\u7279\u4f8b\u7c7b\u4e0d\u5b58\u5728\u7684\u65b9\u6cd5\u5236\u56e0\u6b64\u9020\u201c\u9519\u8bef\u201d,\u5e76\u4e0d\u901a\u7528\uff1b \u4e3a\u4e86\u5b9e\u73b0 SFINAE \uff0c\u540c\u65f6\u964d\u4f4e\u7a0b\u5e8f\u7684\u7e41\u7410\u5ea6\uff0cC++11 \u91c7\u7528\u4e86\u5177\u6709\u901a\u7528\u6027\u7684 enable_if \u65b0\u6807\u51c6\u4ee3\u66ff\u8fd9\u79cd\u6280\u5de7 \uff1b\u6211\u4eec\u4f7f\u7528 enable_if \u7684\u5f62\u5f0f\u91cd\u5199\u8be5\u51fd\u6570 // `enable_if`\u7684\u5e94\u7528 class CMyclass { public : using size_type = unsigned int ; }; // template <typename T> // decltype(T().size(), typename T::size_type()) len(T const &t) // { // return t.size(); // } template < typename T , typename T2 = typename enable_if <! is_same < T , CMyclass >:: value >:: type > //`enable_if`\u5f62\u5f0f typename T :: size_type len ( T const & t ) { return t . size (); } unsigned len (...) { return 0 ; } int main () { vector < int > vec = { 1 , 2 , 3 }; cout << len ( vec ) << endl ; cout << len ( CMyclass ()) << endl ; } \u8be5\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u4e0e\u4e0d\u91c7\u7528 enable_if \u7684\u7a0b\u5e8f\u4e00\u81f4\uff0c\u8bf4\u660e\u91c7\u7528 enable_if \u4e5f\u53ef\u4ee5\u5b9e\u73b0**\u91cd\u8f7d\u51fd\u6570\u907f\u514d\u5339\u914d\u5230\u7279\u4f8b\u7c7b**\u7684\u529f\u80fd\u3002 \u4e0d\u540c\u7684\u5730\u65b9\u5728\u4e8e\uff0c enable_if \u53ef\u4ee5\u907f\u514d\u5339\u914d\u5230 CMyclass \u8fd9\u4e2a\u7c7b\uff0c decltype(T().size(), typename T::size_type()) len(T const &t) \u662f\u907f\u514d\u5339\u914d\u5230\u4e0d\u5305\u542b size() \u6210\u5458\u51fd\u6570\u7684\u7c7b\uff1b \u76f8\u6bd4\u4e4b\u4e0b enable_if \u66f4\u52a0**\u7075\u6d3b**\u3002 enable_if \u4e0e is_same \u7684\u4f7f\u7528 \u00b6 enable_if \u7684\u4f7f\u7528 \u00b6 \u9996\u5148\u7ed9\u51fa enable_if \u7684\u57fa\u672c\u5f62\u5f0f template < bool B , typename T = void > struct enable_if - \u5f53\u4f20\u5165\u7684\u6a21\u677f\u53c2\u6570 B \u4e3a True \u7684\u65f6\u5019\uff0c enable_if \u6a21\u677f\u7c7b\u7684 type \u5c31\u7b49\u4e8e T \uff1b\u5982\u679c\u4e0d\u4f20\u5165\u6a21\u677f\u53c2\u6570 T \uff0c type \u4e5f\u4f1a\u9ed8\u8ba4\u4e3a void - \u5f53\u4f20\u5165\u7684\u6a21\u677f\u53c2\u6570 B \u4e3a False \u7684\u65f6\u5019\uff0c enable_if \u6a21\u677f\u7c7b\u5c31\u4e0d\u518d\u62e5\u6709 type \u3002 \u4f7f\u7528 enable_if \u65f6\u53ef\u4ee5\u8ba9\u91cd\u8f7d\u51fd\u6570\u81ea\u7531\u4e22\u5f03\u4e0d\u9700\u8981\u5339\u914d\u7684\u7279\u4f8b\u7c7b\uff1b\u4e0b\u9762\u7ed9\u51fa\u5b9e\u9645\u5e94\u7528\u7684\u4f8b\u5b50 #\u5224\u65ad\u7c7b\u578b\u5b57\u8282\u6570\u662f\u5426\u5927\u4e8e4\u8f93\u51fa\u663e\u793a template < typename T > typename std :: enable_if < ( sizeof ( T ) <= 4 ) >:: type show () //\u9488\u5bf9 `T` \u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e4\u7684\u60c5\u51b5\u751f\u6548 { printf ( \"size<=4 \\n \" ); } template < typename T > typename std :: enable_if < ( sizeof ( T ) > 4 ) >:: type show () //\u9488\u5bf9 `T` \u7684\u957f\u5ea6\u5927\u4e8e4\u7684\u60c5\u51b5\u751f\u6548 { printf ( \"size>4 \\n \" ); } int main () { show < double > (); show < char > (); } \u8f93\u51fa\u7ed3\u679c\u4e3a size > 4 size <= 4 is_same \u7684\u4f7f\u7528 \u00b6 template < class T , class U > struct is_same - \u5f53\u6a21\u677f\u53c2\u6570 T \u7b49\u4e8e\u6a21\u677f\u53c2\u6570 U \u65f6, is_same<T,U> \u6a21\u677f\u7c7b\u7684\u6210\u5458 value \u7b49\u4e8e True - \u5f53\u6a21\u677f\u53c2\u6570 T \u4e0d\u7b49\u4e8e\u6a21\u677f U \u65f6, is_same<T,U> \u6a21\u677f\u7c7b\u7684\u6210\u5458 value \u7b49\u4e8e False is_same \u7ecf\u5e38\u4e0e eanble_if \u642d\u914d\u4f7f\u7528 template < typename T , typename T2 = typename enable_if <! is_same < T , CMyclass >:: value >:: type > //`enable_if`\u5f62\u5f0f typename T :: size_type len ( T const & t ) { return t . size (); } enable_if \u6a21\u677f\u7c7b\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7ecf\u5e38\u7528 is_same \u7684 value \u6765\u4ee3\u66ff\uff0c\u7ed3\u5408\u8d77\u6765\u5bf9\u4e00\u4e9b\u7279\u4f8b\u8fdb\u884c\u5224\u65ad\uff0c\u5b9e\u73b0 SFINAE enable_if \u4e0e is_same \u5185\u90e8\u7684\u5b9e\u73b0\u539f\u7406 \u00b6 \u4e86\u89e3\u8fd9\u4e24\u4e2a\u6a21\u677f\u7c7b\u7684\u5185\u90e8\u5b9e\u73b0\u539f\u7406\u4e4b\u524d\uff0c\u9700\u8981\u4e86\u89e3 type traits \u7684\u6982\u5ff5 \u4ec0\u4e48\u662f type traits ? \u00b6 traits \u662f C++ \u6a21\u677f\u7f16\u7a0b\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u6280\u672f\uff0c\u4e3b\u8981\u529f\u80fd\uff1a \u628a\u529f\u80fd\u76f8\u540c\u800c\u53c2\u6570\u4e0d\u540c\u7684\u51fd\u6570\u62bd\u8c61\u51fa\u6765\uff0c\u901a\u8fc7 traits \u5c06\u4e0d\u540c\u7684\u53c2\u6570\u7684\u76f8\u540c\u5c5e\u6027\u63d0\u53d6\u51fa\u6765\uff0c\u5728\u51fd\u6570\u4e2d\u5229\u7528\u8fd9\u4e9b\u7528 traits \u63d0\u53d6\u7684\u5c5e\u6027\uff0c\u4f7f\u5f97**\u51fd\u6570\u5bf9\u4e0d\u540c\u7684\u53c2\u6570\u8868\u73b0\u4e00\u81f4**\u3002 enable_if \u6e90\u7801\u89e3\u6790 \u00b6 \u4e0b\u9762\u7ed9\u51fa enable_if \u7684\u6e90\u7801 template < bool , typename _Tp = void > struct enable_if { }; template < typename _Tp > struct enable_if < true , _Tp > { typedef _Tp type ; }; - \u9996\u5148\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7a7a\u7684\u901a\u7528\u6a21\u677f\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u6210\u5458 - \u5f53\u7b2c\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\u503c\u4e3a True \u65f6\uff0c\u5c06\u6a21\u677f\u7279\u4f8b\u5316; type \u7684\u7c7b\u578b\u4e3a\u7b2c\u4e8c\u4e2a\u6a21\u677f\u53c2\u6570 _Tp \u3002 is_same \u6e90\u7801\u89e3\u6790 \u00b6 \u4ee5\u4e0b\u4ee3\u7801\u7b80\u5355\u5b9e\u73b0\u4e86 is_same \u6a21\u677f\u7c7b\u7684\u4f5c\u7528 template < typename T , typename U > struct my_is_same { static constexpr bool value = false ; } template < typename T > struct my_is_same { static constexpr bool value = true ; }; - \u5b9a\u4e49\u4e00\u4e2a\u901a\u7528\u6a21\u677f\uff0c\u9488\u5bf9\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\u7c7b\u578b\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\uff0c\u9ed8\u8ba4 value \u503c\u4e3a False \u3002 - \u6a21\u677f\u7279\u4f8b\u5316\uff0c\u9488\u5bf9\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\u7c7b\u578b\u4e00\u81f4\u7684\u60c5\u51b5\uff0c\u5c06 value \u503c\u8bbe\u7f6e\u4e3a True \u3002 is_same \u548c enable_if \u7684\u57fa\u672c\u5b9e\u73b0\u65b9\u6848\u53ef\u4ee5\u603b\u7ed3\u4e3a\uff1a \u901a\u7528\u6a21\u677f\u52a0\u6a21\u677f\u5b9e\u4f8b\u5316 \u3002 \u603b\u7ed3 \u00b6 enable_if \u662f\u901a\u7528\u7684\u907f\u514d\u91cd\u8f7d\u51fd\u6570\u5339\u914d\u5230\u7279\u4f8b\u7c7b\u7684\u89e3\u51b3\u65b9\u6848,\u4f7f\u7528\u7b80\u5355\u800c\u4e14\u66f4\u52a0\u81ea\u7531\u3002 is_same \u4e0e enable_if \u662f type traits \u6280\u672f\u7684\u5178\u578b\u5e94\u7528,\u5b9e\u73b0\u51fd\u6570\u5bf9\u4e0d\u540c\u53c2\u6570\u8868\u73b0\u4e00\u81f4\u7684\u529f\u80fd\u3002 is_same \u4e0e enable_if \u7684\u6e90\u7801\u5b9e\u73b0\u91c7\u7528\u4e86\u6a21\u677f\u5143\u7f16\u7a0b\u7684\u57fa\u672c\u5b9e\u73b0\u601d\u60f3\uff0c\u5927\u81f4\u5206\u4e3a\u901a\u7528\u6a21\u677f\u4e0e\u6a21\u677f\u7279\u4f8b\u5316\u3002","title":"enable_if \u65b0\u6807\u51c6"},{"location":"learn_cpp/012_enable_if.html#enable_if","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6012 enable_if \u4e0a\u4e00\u671f\u89c6\u9891 \u6211\u4eec\u4ecb\u7ecd\u4e86 SFINAE \u539f\u5219\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u672c\u7bc7\u6587\u7ae0\u5c06\u7ee7\u7eed\u4ecb\u7ecd\u4e86 enable_if \u65b0\u6807\u51c6\uff0c\u4e3a\u540e\u7eed\u6df1\u5165\u5b66\u4e60\u6a21\u677f\u5143\u7f16\u7a0b\u6253\u4e0b\u57fa\u7840\u3002 \u672c\u6587\u7684\u7ed3\u6784\u5982\u4e0b\uff1a - \u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 enable_if \uff1f - enable_if \u4e0e is_same \u7684\u4f7f\u7528 - enable_if \u4e0e is_same \u5185\u90e8\u7684\u5b9e\u73b0\u539f\u7406","title":"\u65b0\u6807\u51c6\uff1aenable_if"},{"location":"learn_cpp/012_enable_if.html#enable_if_1","text":"C++\u6a21\u677f\u51fd\u6570\u91cd\u8f7d\u4f9d\u8d56\u4e8e SFINAE (substitution-failure-is-not-an-error) \u539f\u5219\uff0c\u5373\u66ff\u6362\u5931\u8d25\u4e0d\u8ba4\u4e3a\u662f\u9519\u8bef\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u7ee7\u7eed\u5bfb\u627e\u5408\u9002\u7684\u91cd\u8f7d\u51fd\u6570\uff1b\u4ee5\u8fd4\u56de\u957f\u5ea6\u7684\u51fd\u6570\u4e3a\u4f8b\uff0c\u8be5\u51fd\u6570\u9488\u5bf9 STL \u4e2d\u7684 vector \u5bb9\u5668\u6765\u5b9e\u73b0\uff08\u5bb9\u5668\u4e2d\u6709 size() \u6210\u5458\u51fd\u6570\uff09 class CMyclass { public : using size_type = unsigned int ; }; template < typename T > decltype ( T (). size (), typename T :: size_type ()) len ( T const & t ) //\u8be5\u51fd\u6570\u53ef\u4ee5\u907f\u514d\u5339\u914d\u5230 CMyclass \u7c7b { return t . size (); } unsigned len (...) { return 0 ; } int main () { vector < int > vec = { 1 , 2 , 3 }; cout << len ( vec ) << endl ; //\u8c03\u7528\u9488\u5bf9stl\u5e93\u5bb9\u5668\u7684len\u51fd\u6570 cout << len ( CMyclass ()) << endl ; //\u8c03\u7528len(...)\u51fd\u6570 } decltype(T().size(), typename T::size_type()) len(T const &t) \u8be5\u51fd\u6570\u58f0\u660e\u901a\u8fc7 decltype \u7c7b\u578b\u5224\u522b\u5c06\u4e0d\u5305\u542b size() \u6210\u5458\u51fd\u6570\u7684\u7279\u4f8b\u7c7b\u6392\u9664\u51fa\u53bb\uff0c\u540c\u65f6\u9017\u53f7\u8868\u8fbe\u5f0f\u8fd4\u56de\u9017\u53f7\u540e\u9762\u7684\u53c2\u6570 typename T::size_type() \uff0c\u5b9e\u73b0\u907f\u514d\u5339\u914d\u5230 CMyclass \u7c7b\u7684\u529f\u80fd\uff1b\u8fd9\u79cd\u7f16\u7a0b\u6280\u5de7\u6666\u6da9\u96be\u61c2\uff0c\u9700\u8981\u7a0b\u5e8f\u5458\u6839\u636e\u7279\u4f8b\u7c7b\u4e0d\u5b58\u5728\u7684\u65b9\u6cd5\u5236\u56e0\u6b64\u9020\u201c\u9519\u8bef\u201d,\u5e76\u4e0d\u901a\u7528\uff1b \u4e3a\u4e86\u5b9e\u73b0 SFINAE \uff0c\u540c\u65f6\u964d\u4f4e\u7a0b\u5e8f\u7684\u7e41\u7410\u5ea6\uff0cC++11 \u91c7\u7528\u4e86\u5177\u6709\u901a\u7528\u6027\u7684 enable_if \u65b0\u6807\u51c6\u4ee3\u66ff\u8fd9\u79cd\u6280\u5de7 \uff1b\u6211\u4eec\u4f7f\u7528 enable_if \u7684\u5f62\u5f0f\u91cd\u5199\u8be5\u51fd\u6570 // `enable_if`\u7684\u5e94\u7528 class CMyclass { public : using size_type = unsigned int ; }; // template <typename T> // decltype(T().size(), typename T::size_type()) len(T const &t) // { // return t.size(); // } template < typename T , typename T2 = typename enable_if <! is_same < T , CMyclass >:: value >:: type > //`enable_if`\u5f62\u5f0f typename T :: size_type len ( T const & t ) { return t . size (); } unsigned len (...) { return 0 ; } int main () { vector < int > vec = { 1 , 2 , 3 }; cout << len ( vec ) << endl ; cout << len ( CMyclass ()) << endl ; } \u8be5\u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c\u4e0e\u4e0d\u91c7\u7528 enable_if \u7684\u7a0b\u5e8f\u4e00\u81f4\uff0c\u8bf4\u660e\u91c7\u7528 enable_if \u4e5f\u53ef\u4ee5\u5b9e\u73b0**\u91cd\u8f7d\u51fd\u6570\u907f\u514d\u5339\u914d\u5230\u7279\u4f8b\u7c7b**\u7684\u529f\u80fd\u3002 \u4e0d\u540c\u7684\u5730\u65b9\u5728\u4e8e\uff0c enable_if \u53ef\u4ee5\u907f\u514d\u5339\u914d\u5230 CMyclass \u8fd9\u4e2a\u7c7b\uff0c decltype(T().size(), typename T::size_type()) len(T const &t) \u662f\u907f\u514d\u5339\u914d\u5230\u4e0d\u5305\u542b size() \u6210\u5458\u51fd\u6570\u7684\u7c7b\uff1b \u76f8\u6bd4\u4e4b\u4e0b enable_if \u66f4\u52a0**\u7075\u6d3b**\u3002","title":"\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528 enable_if \uff1f"},{"location":"learn_cpp/012_enable_if.html#enable_if-is_same","text":"","title":"enable_if \u4e0e is_same \u7684\u4f7f\u7528"},{"location":"learn_cpp/012_enable_if.html#enable_if_2","text":"\u9996\u5148\u7ed9\u51fa enable_if \u7684\u57fa\u672c\u5f62\u5f0f template < bool B , typename T = void > struct enable_if - \u5f53\u4f20\u5165\u7684\u6a21\u677f\u53c2\u6570 B \u4e3a True \u7684\u65f6\u5019\uff0c enable_if \u6a21\u677f\u7c7b\u7684 type \u5c31\u7b49\u4e8e T \uff1b\u5982\u679c\u4e0d\u4f20\u5165\u6a21\u677f\u53c2\u6570 T \uff0c type \u4e5f\u4f1a\u9ed8\u8ba4\u4e3a void - \u5f53\u4f20\u5165\u7684\u6a21\u677f\u53c2\u6570 B \u4e3a False \u7684\u65f6\u5019\uff0c enable_if \u6a21\u677f\u7c7b\u5c31\u4e0d\u518d\u62e5\u6709 type \u3002 \u4f7f\u7528 enable_if \u65f6\u53ef\u4ee5\u8ba9\u91cd\u8f7d\u51fd\u6570\u81ea\u7531\u4e22\u5f03\u4e0d\u9700\u8981\u5339\u914d\u7684\u7279\u4f8b\u7c7b\uff1b\u4e0b\u9762\u7ed9\u51fa\u5b9e\u9645\u5e94\u7528\u7684\u4f8b\u5b50 #\u5224\u65ad\u7c7b\u578b\u5b57\u8282\u6570\u662f\u5426\u5927\u4e8e4\u8f93\u51fa\u663e\u793a template < typename T > typename std :: enable_if < ( sizeof ( T ) <= 4 ) >:: type show () //\u9488\u5bf9 `T` \u7684\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e4\u7684\u60c5\u51b5\u751f\u6548 { printf ( \"size<=4 \\n \" ); } template < typename T > typename std :: enable_if < ( sizeof ( T ) > 4 ) >:: type show () //\u9488\u5bf9 `T` \u7684\u957f\u5ea6\u5927\u4e8e4\u7684\u60c5\u51b5\u751f\u6548 { printf ( \"size>4 \\n \" ); } int main () { show < double > (); show < char > (); } \u8f93\u51fa\u7ed3\u679c\u4e3a size > 4 size <= 4","title":"enable_if \u7684\u4f7f\u7528"},{"location":"learn_cpp/012_enable_if.html#is_same","text":"template < class T , class U > struct is_same - \u5f53\u6a21\u677f\u53c2\u6570 T \u7b49\u4e8e\u6a21\u677f\u53c2\u6570 U \u65f6, is_same<T,U> \u6a21\u677f\u7c7b\u7684\u6210\u5458 value \u7b49\u4e8e True - \u5f53\u6a21\u677f\u53c2\u6570 T \u4e0d\u7b49\u4e8e\u6a21\u677f U \u65f6, is_same<T,U> \u6a21\u677f\u7c7b\u7684\u6210\u5458 value \u7b49\u4e8e False is_same \u7ecf\u5e38\u4e0e eanble_if \u642d\u914d\u4f7f\u7528 template < typename T , typename T2 = typename enable_if <! is_same < T , CMyclass >:: value >:: type > //`enable_if`\u5f62\u5f0f typename T :: size_type len ( T const & t ) { return t . size (); } enable_if \u6a21\u677f\u7c7b\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7ecf\u5e38\u7528 is_same \u7684 value \u6765\u4ee3\u66ff\uff0c\u7ed3\u5408\u8d77\u6765\u5bf9\u4e00\u4e9b\u7279\u4f8b\u8fdb\u884c\u5224\u65ad\uff0c\u5b9e\u73b0 SFINAE","title":"is_same \u7684\u4f7f\u7528"},{"location":"learn_cpp/012_enable_if.html#enable_if-is_same_1","text":"\u4e86\u89e3\u8fd9\u4e24\u4e2a\u6a21\u677f\u7c7b\u7684\u5185\u90e8\u5b9e\u73b0\u539f\u7406\u4e4b\u524d\uff0c\u9700\u8981\u4e86\u89e3 type traits \u7684\u6982\u5ff5","title":"enable_if \u4e0e is_same \u5185\u90e8\u7684\u5b9e\u73b0\u539f\u7406"},{"location":"learn_cpp/012_enable_if.html#type-traits","text":"traits \u662f C++ \u6a21\u677f\u7f16\u7a0b\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u6280\u672f\uff0c\u4e3b\u8981\u529f\u80fd\uff1a \u628a\u529f\u80fd\u76f8\u540c\u800c\u53c2\u6570\u4e0d\u540c\u7684\u51fd\u6570\u62bd\u8c61\u51fa\u6765\uff0c\u901a\u8fc7 traits \u5c06\u4e0d\u540c\u7684\u53c2\u6570\u7684\u76f8\u540c\u5c5e\u6027\u63d0\u53d6\u51fa\u6765\uff0c\u5728\u51fd\u6570\u4e2d\u5229\u7528\u8fd9\u4e9b\u7528 traits \u63d0\u53d6\u7684\u5c5e\u6027\uff0c\u4f7f\u5f97**\u51fd\u6570\u5bf9\u4e0d\u540c\u7684\u53c2\u6570\u8868\u73b0\u4e00\u81f4**\u3002","title":"\u4ec0\u4e48\u662f type traits ?"},{"location":"learn_cpp/012_enable_if.html#enable_if_3","text":"\u4e0b\u9762\u7ed9\u51fa enable_if \u7684\u6e90\u7801 template < bool , typename _Tp = void > struct enable_if { }; template < typename _Tp > struct enable_if < true , _Tp > { typedef _Tp type ; }; - \u9996\u5148\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7a7a\u7684\u901a\u7528\u6a21\u677f\uff0c\u4e0d\u5305\u542b\u4efb\u4f55\u6210\u5458 - \u5f53\u7b2c\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\u503c\u4e3a True \u65f6\uff0c\u5c06\u6a21\u677f\u7279\u4f8b\u5316; type \u7684\u7c7b\u578b\u4e3a\u7b2c\u4e8c\u4e2a\u6a21\u677f\u53c2\u6570 _Tp \u3002","title":"enable_if \u6e90\u7801\u89e3\u6790"},{"location":"learn_cpp/012_enable_if.html#is_same_1","text":"\u4ee5\u4e0b\u4ee3\u7801\u7b80\u5355\u5b9e\u73b0\u4e86 is_same \u6a21\u677f\u7c7b\u7684\u4f5c\u7528 template < typename T , typename U > struct my_is_same { static constexpr bool value = false ; } template < typename T > struct my_is_same { static constexpr bool value = true ; }; - \u5b9a\u4e49\u4e00\u4e2a\u901a\u7528\u6a21\u677f\uff0c\u9488\u5bf9\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\u7c7b\u578b\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\uff0c\u9ed8\u8ba4 value \u503c\u4e3a False \u3002 - \u6a21\u677f\u7279\u4f8b\u5316\uff0c\u9488\u5bf9\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\u7c7b\u578b\u4e00\u81f4\u7684\u60c5\u51b5\uff0c\u5c06 value \u503c\u8bbe\u7f6e\u4e3a True \u3002 is_same \u548c enable_if \u7684\u57fa\u672c\u5b9e\u73b0\u65b9\u6848\u53ef\u4ee5\u603b\u7ed3\u4e3a\uff1a \u901a\u7528\u6a21\u677f\u52a0\u6a21\u677f\u5b9e\u4f8b\u5316 \u3002","title":"is_same \u6e90\u7801\u89e3\u6790"},{"location":"learn_cpp/012_enable_if.html#_1","text":"enable_if \u662f\u901a\u7528\u7684\u907f\u514d\u91cd\u8f7d\u51fd\u6570\u5339\u914d\u5230\u7279\u4f8b\u7c7b\u7684\u89e3\u51b3\u65b9\u6848,\u4f7f\u7528\u7b80\u5355\u800c\u4e14\u66f4\u52a0\u81ea\u7531\u3002 is_same \u4e0e enable_if \u662f type traits \u6280\u672f\u7684\u5178\u578b\u5e94\u7528,\u5b9e\u73b0\u51fd\u6570\u5bf9\u4e0d\u540c\u53c2\u6570\u8868\u73b0\u4e00\u81f4\u7684\u529f\u80fd\u3002 is_same \u4e0e enable_if \u7684\u6e90\u7801\u5b9e\u73b0\u91c7\u7528\u4e86\u6a21\u677f\u5143\u7f16\u7a0b\u7684\u57fa\u672c\u5b9e\u73b0\u601d\u60f3\uff0c\u5927\u81f4\u5206\u4e3a\u901a\u7528\u6a21\u677f\u4e0e\u6a21\u677f\u7279\u4f8b\u5316\u3002","title":"\u603b\u7ed3"},{"location":"learn_cpp/014_materials.html","text":"\u6a21\u677f\u5143\u7f16\u7a0b\u63a8\u8350\u8d44\u6599 \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6014_\u6a21\u677f\u5143\u7f16\u7a0b\u8d44\u6599 \u4e3a\u4e86\u66f4\u597d\u5730\u5165\u95e8\u6216\u63d0\u5347\u6a21\u677f\u5143\u7f16\u7a0b\u80fd\u529b\uff0c\u6211\u4eec\u6574\u7406\u4e86 3 \u4e2a\u89c6\u9891\uff0c2 \u672c\u4e66\u7c4d\uff0c\u5171\u4e94\u4e2a\u8d44\u6599\u63a8\u8350\u7ed9\u5927\u5bb6\u3002 1. \u89c6\u9891\u4f20\u9001\u95e8\uff1a CPPCON 2020: Template MetaProgramming \u00b6 \u7b2c\u4e00\u4e2a\u63a8\u8350\u7684\u5c31\u662f CPPCON 2020 \u4e2d\u7684\u89c6\u9891\uff0c\u6807\u9898\u53eb\u505a Template MetaProgramming\uff1aType Traits\uff0c\u8fd9\u4e2a\u89c6\u9891\u9ad8\u5c4b\u5efa\u74f4\u5730\u8c08\u5230\u4e86\u6a21\u677f\u5143\u7f16\u7a0b\u7684\u8981\u7d20\uff0c \u5e76\u4e14\u548c\u666e\u901a\u7f16\u7a0b\u5c31\u53c2\u6570\u3001\u8fd4\u56de\u503c\u7b49\u505a\u4e86\u5bf9\u6bd4\u3002 \u8be5\u89c6\u9891\u8fd8\u4ecb\u7ecd\u4e86\u6a21\u677f\u5143\u7f16\u7a0b\u4e2d\u7684\u7ea6\u5b9a\u3001\u89c4\u8303\uff0c\u7136\u540e\u9009\u62e9\u4e86\u5e38\u7528\u5178\u578b\u7684 type traits \u505a\u4e86\u5206\u6790\uff0c\u671f\u95f4\u8fd8\u8c08\u5230\u4e86\u5404\u79cd\u5177\u4f53\u53c8\u6709\u6df1\u5ea6\u7684\u6982\u5ff5\uff0c\u6bd4\u5982 void constant \u3001SFINA \u7b49\u7b49\u3002 \u5e76\u4e14\u8fd9\u4e2a\u89c6\u9891\u505a\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u5206\u6d41\uff1a if \u4f60\u770b\u5b8c\u8fd9\u4e2a\u89c6\u9891\u89c9\u5f97\u975e\u5e38\u53d7\u7528 : \u8bf4\u660e\u4f60\u5bf9\u6a21\u677f\u5143\u7f16\u7a0b\u7684\u6982\u5ff5\u5df2\u7ecf\u638c\u63e1\u7684\u4e0d\u9519\u4e86 \uff0c \u4e0b\u4e00\u6b65\u53ef\u4ee5\u5b9e\u6218\u64cd\u7ec3 \uff0c \u6bd4\u5982\u770b\u770b OneFlow \u6e90\u7801 ; else if \u4f60\u770b\u5b8c\u89c6\u9891\u8fd8\u662f\u5f88\u61f5 : \u90a3\u4e48\u4f60\u9700\u8981\u589e\u5f3a\u4e00\u4e0b\u57fa\u7840\u77e5\u8bc6 \uff0c \u7ee7\u7eed\u770b\u4e0b\u9762\u7684\u4e24\u4e2a\u89c6\u9891 ; CPP Conference \u6709\u4e00\u4e2a Back to Basics \u4e13\u9898\uff0c\u7531\u4e00\u4e9b\u6280\u672f\u5927\u725b\u8bb2\u89e3\u4e00\u4e9b\u770b\u4f3c\u5e38\u89c1\u666e\u901a\u4f46\u5374\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\uff0c \u63a8\u8350\u5bf9\u6a21\u677f\u7f16\u7a0b\u4e0d\u719f\u6089\u7684\u540c\u5b66\u770b\u4ee5\u4e0b\u4e24\u4e2a\u89c6\u9891\u3002 2. \u89c6\u9891\u4f20\u9001\u95e8\uff1a CPPCON 2019: Function and Class Templates \u00b6 \u7b2c\u4e8c\u4e2a\u63a8\u8350\u7684\u662f CPPCON 2019 \u4e2d\u7684\u89c6\u9891\uff0c\u6807\u9898\u53eb\u505a Function and Class Templates\u3002 3. \u89c6\u9891\u4f20\u9001\u95e8\uff1a CPPCON 2021: Back to Basics: Templates \u00b6 \u7b2c\u4e09\u4e2a\u63a8\u8350\u7684\u662f CPPCON 2021 \u4e2d\u7684\u89c6\u9891\uff0c\u6807\u9898\u53eb\u505a Back to Basice: Templates\u3002 4. \u4e66\u7c4d\uff1a C++ Templates \u00b6 \u8fd9\u672c\u4e66\u51e0\u4e4e\u6db5\u76d6\u4e86 C++ \u6a21\u677f\u76f8\u5173\u7684\u6240\u6709\u91cd\u8981\u8bdd\u9898\uff0c\u5206\u4e3a\u4e09\u4e2a\u5c42\u6b21\uff1a basics depth design \u5982\u679c\u8bf4\u53ea\u80fd\u9009\u62e9\u4e00\u672c C++ \u6a21\u677f\u76f8\u5173\u7684\u4e66\u7c4d\uff0c\u5c0f\u7cd6\u4e00\u5b9a\u53ea\u9009\u5b83\u3002 5. \u4e66\u7c4d: C++ \u6807\u51c6\u5e93 \u00b6 \u8fd9\u672c\u4e66\u9664\u4e86\u53ef\u4ee5\u4f5c\u5de5\u5177\u4e66\u4e4b\u5916\uff0c\u8fd8\u4f1a\u4ecb\u7ecd\u4e00\u4e9b\u5468\u8fb9\u6982\u5ff5\u3001\u5185\u90e8\u539f\u7406\u53ca\u5e38\u89c1\u7684\u5751\uff0c\u5bf9\u6211\u4eec\u7406\u89e3 STL \u548c\u6a21\u677f\u7f16\u7a0b\u90fd\u975e\u5e38\u6709\u7528\uff0c \u4e0d\u8fc7\u672c\u4e66\u7684\u5185\u5bb9\u5927\u90e8\u5206\u90fd\u96c6\u4e2d\u5728 C++ 11\uff0c\u8fd8\u6ca1\u6709\u5f15\u5165\u66f4\u65b0\u7684\u6807\u51c6\u3002 \u6269\u5c55\u9605\u8bfb\uff1aOneFlow \u6e90\u7801 \u00b6 OneFlow-Github OneFlow-Index","title":"\u6a21\u677f\u5143\u7f16\u7a0b"},{"location":"learn_cpp/014_materials.html#_1","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6014_\u6a21\u677f\u5143\u7f16\u7a0b\u8d44\u6599 \u4e3a\u4e86\u66f4\u597d\u5730\u5165\u95e8\u6216\u63d0\u5347\u6a21\u677f\u5143\u7f16\u7a0b\u80fd\u529b\uff0c\u6211\u4eec\u6574\u7406\u4e86 3 \u4e2a\u89c6\u9891\uff0c2 \u672c\u4e66\u7c4d\uff0c\u5171\u4e94\u4e2a\u8d44\u6599\u63a8\u8350\u7ed9\u5927\u5bb6\u3002","title":"\u6a21\u677f\u5143\u7f16\u7a0b\u63a8\u8350\u8d44\u6599"},{"location":"learn_cpp/014_materials.html#1-cppcon-2020-template-metaprogramming","text":"\u7b2c\u4e00\u4e2a\u63a8\u8350\u7684\u5c31\u662f CPPCON 2020 \u4e2d\u7684\u89c6\u9891\uff0c\u6807\u9898\u53eb\u505a Template MetaProgramming\uff1aType Traits\uff0c\u8fd9\u4e2a\u89c6\u9891\u9ad8\u5c4b\u5efa\u74f4\u5730\u8c08\u5230\u4e86\u6a21\u677f\u5143\u7f16\u7a0b\u7684\u8981\u7d20\uff0c \u5e76\u4e14\u548c\u666e\u901a\u7f16\u7a0b\u5c31\u53c2\u6570\u3001\u8fd4\u56de\u503c\u7b49\u505a\u4e86\u5bf9\u6bd4\u3002 \u8be5\u89c6\u9891\u8fd8\u4ecb\u7ecd\u4e86\u6a21\u677f\u5143\u7f16\u7a0b\u4e2d\u7684\u7ea6\u5b9a\u3001\u89c4\u8303\uff0c\u7136\u540e\u9009\u62e9\u4e86\u5e38\u7528\u5178\u578b\u7684 type traits \u505a\u4e86\u5206\u6790\uff0c\u671f\u95f4\u8fd8\u8c08\u5230\u4e86\u5404\u79cd\u5177\u4f53\u53c8\u6709\u6df1\u5ea6\u7684\u6982\u5ff5\uff0c\u6bd4\u5982 void constant \u3001SFINA \u7b49\u7b49\u3002 \u5e76\u4e14\u8fd9\u4e2a\u89c6\u9891\u505a\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u5206\u6d41\uff1a if \u4f60\u770b\u5b8c\u8fd9\u4e2a\u89c6\u9891\u89c9\u5f97\u975e\u5e38\u53d7\u7528 : \u8bf4\u660e\u4f60\u5bf9\u6a21\u677f\u5143\u7f16\u7a0b\u7684\u6982\u5ff5\u5df2\u7ecf\u638c\u63e1\u7684\u4e0d\u9519\u4e86 \uff0c \u4e0b\u4e00\u6b65\u53ef\u4ee5\u5b9e\u6218\u64cd\u7ec3 \uff0c \u6bd4\u5982\u770b\u770b OneFlow \u6e90\u7801 ; else if \u4f60\u770b\u5b8c\u89c6\u9891\u8fd8\u662f\u5f88\u61f5 : \u90a3\u4e48\u4f60\u9700\u8981\u589e\u5f3a\u4e00\u4e0b\u57fa\u7840\u77e5\u8bc6 \uff0c \u7ee7\u7eed\u770b\u4e0b\u9762\u7684\u4e24\u4e2a\u89c6\u9891 ; CPP Conference \u6709\u4e00\u4e2a Back to Basics \u4e13\u9898\uff0c\u7531\u4e00\u4e9b\u6280\u672f\u5927\u725b\u8bb2\u89e3\u4e00\u4e9b\u770b\u4f3c\u5e38\u89c1\u666e\u901a\u4f46\u5374\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\uff0c \u63a8\u8350\u5bf9\u6a21\u677f\u7f16\u7a0b\u4e0d\u719f\u6089\u7684\u540c\u5b66\u770b\u4ee5\u4e0b\u4e24\u4e2a\u89c6\u9891\u3002","title":"1. \u89c6\u9891\u4f20\u9001\u95e8\uff1a CPPCON 2020: Template MetaProgramming"},{"location":"learn_cpp/014_materials.html#2-cppcon-2019-function-and-class-templates","text":"\u7b2c\u4e8c\u4e2a\u63a8\u8350\u7684\u662f CPPCON 2019 \u4e2d\u7684\u89c6\u9891\uff0c\u6807\u9898\u53eb\u505a Function and Class Templates\u3002","title":"2. \u89c6\u9891\u4f20\u9001\u95e8\uff1a CPPCON 2019: Function and Class Templates"},{"location":"learn_cpp/014_materials.html#3-cppcon-2021-back-to-basics-templates","text":"\u7b2c\u4e09\u4e2a\u63a8\u8350\u7684\u662f CPPCON 2021 \u4e2d\u7684\u89c6\u9891\uff0c\u6807\u9898\u53eb\u505a Back to Basice: Templates\u3002","title":"3. \u89c6\u9891\u4f20\u9001\u95e8\uff1a CPPCON 2021: Back to Basics: Templates"},{"location":"learn_cpp/014_materials.html#4-c-templates","text":"\u8fd9\u672c\u4e66\u51e0\u4e4e\u6db5\u76d6\u4e86 C++ \u6a21\u677f\u76f8\u5173\u7684\u6240\u6709\u91cd\u8981\u8bdd\u9898\uff0c\u5206\u4e3a\u4e09\u4e2a\u5c42\u6b21\uff1a basics depth design \u5982\u679c\u8bf4\u53ea\u80fd\u9009\u62e9\u4e00\u672c C++ \u6a21\u677f\u76f8\u5173\u7684\u4e66\u7c4d\uff0c\u5c0f\u7cd6\u4e00\u5b9a\u53ea\u9009\u5b83\u3002","title":"4. \u4e66\u7c4d\uff1a C++  Templates"},{"location":"learn_cpp/014_materials.html#5-c","text":"\u8fd9\u672c\u4e66\u9664\u4e86\u53ef\u4ee5\u4f5c\u5de5\u5177\u4e66\u4e4b\u5916\uff0c\u8fd8\u4f1a\u4ecb\u7ecd\u4e00\u4e9b\u5468\u8fb9\u6982\u5ff5\u3001\u5185\u90e8\u539f\u7406\u53ca\u5e38\u89c1\u7684\u5751\uff0c\u5bf9\u6211\u4eec\u7406\u89e3 STL \u548c\u6a21\u677f\u7f16\u7a0b\u90fd\u975e\u5e38\u6709\u7528\uff0c \u4e0d\u8fc7\u672c\u4e66\u7684\u5185\u5bb9\u5927\u90e8\u5206\u90fd\u96c6\u4e2d\u5728 C++ 11\uff0c\u8fd8\u6ca1\u6709\u5f15\u5165\u66f4\u65b0\u7684\u6807\u51c6\u3002","title":"5. \u4e66\u7c4d: C++ \u6807\u51c6\u5e93"},{"location":"learn_cpp/014_materials.html#oneflow","text":"OneFlow-Github OneFlow-Index","title":"\u6269\u5c55\u9605\u8bfb\uff1aOneFlow \u6e90\u7801"},{"location":"learn_cpp/01_rvalue_ref.html","text":"\u53f3\u503c\u5f15\u7528 \u00b6 \u53f3\u503c\u5f15\u7528\u8d77\u7801\u89e3\u51b3\u4e86\u4e24\u4e2a\u95ee\u9898\uff1a \u5b9e\u73b0 move \u8bed\u4e49\uff08\u672c\u6587\u4ecb\u7ecd\uff09 \u5b9e\u73b0\u5b8c\u7f8e\u8f6c\u53d1\uff08\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\uff09 \u672c\u6587\u4f1a\u4ecb\u7ecd\u4ec0\u4e48\u662f\uff1a \u4ec0\u4e48\u662f\u53f3\u503c \u4ec0\u4e48\u662f\u53f3\u503c\u5f15\u7528\u3001move \u8bed\u4e49 std::move \u539f\u7406\u5256\u6790 std::move \u4f7f\u7528\u6ce8\u610f\u4e8b\u9879 \u4ec0\u4e48\u662f\u53f3\u503c \u00b6 C++ \u4e2d\u8868\u8fbe\u5f0f\u5206\u4e3a\u5de6\u503c\u548c\u53f3\u503c\uff0c\u7b80\u5355\u800c\u8a00\uff0c\u6709\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f\u5c31\u662f\u5de6\u503c\uff0c\u5b83\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u7684**\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9**\u3002\u65e0\u6cd5\u53d6\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f\u662f\u53f3\u503c\uff0c**\u53ea\u80fd**\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u7684\u53f3\u8fb9\u3002 \u4ee5\u4e0b\u662f C++ \u4e2d\u5e38\u89c1\u7684\u51fa\u73b0\u53f3\u503c\u7684\u60c5\u51b5\uff1a \u5e38\u91cf\u5b57\u9762\u91cf \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u7684\u503c\u6216\u5bf9\u8c61\uff08\u5de6\u503c\u5f15\u7528\u7c7b\u578b\u9664\u5916\uff09 \u65e0\u540d\u5bf9\u8c61 int funA ( int a ){ return a ; } int & funB ( int a ){ return a ; } class A { public : A (){} ~ A (){} }; int main ( int argc , char * argv []){ auto pos_num = & ( 10 ); // \u4e0d\u80fd\u53d6\u5730\u5740 1. \u5e38\u91cf\u5b57\u9762\u91cf auto pos_funA = & ( funA ( 0x1111 )); // \u4e0d\u80fd\u53d6\u5730\u5740 2. \u51fd\u6570\u8c03\u7528\u7684\u8fd4\u56de\u503c auto pos_funB = & ( funB ( 0x2222 )); // \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u7684\u7c7b\u578b\u4e3a\u5de6\u503c\u5f15\u7528\uff0c\u5219\u8fd4\u56de\u7684\u7ed3\u679c\u4e3a\u5de6\u503c auto pos_class = & ( A ()); // \u4e0d\u80fd\u53d6\u5730\u5740 3. \u65e0\u540d\u5bf9\u8c61 return 0 ; } \u4ec0\u4e48\u662f\u53f3\u503c\u5f15\u7528 \u00b6 \u5728 C++11 \u4e4b\u524d\uff0c\u662f\u53ea\u6709\u5de6\u503c\u5f15\u7528\uff08C++11\u4e4b\u540e\uff0c\u4e3a\u4e86\u548c\u53f3\u503c\u5f15\u7528\u533a\u5206\uff0c\u539f\u6765\u7684\u201c\u5f15\u7528\u201d\u624d\u79f0\u4e3a\u201c\u5de6\u503c\u5f15\u7528\u201d\uff09\uff0c\u6ca1\u6709\u53f3\u503c\u5f15\u7528\u7684\u3002\u56e0\u6b64\u65e0\u6cd5\u7528\u975e const \uff08\u5de6\u503c\uff09\u5f15\u7528\u5339\u914d\u53f3\u503c\u7684\u3002 \u6bd4\u5982\uff1a int fun ( int & a ){ return a ; } \u4ee5\u4e0b\u8c03\u7528\u4f1a\u51fa\u9519\uff1a fun ( 10 ); // \u7f16\u8bd1\u62a5\u9519\uff1a\u65e0\u6cd5\u4ece int \u8f6c\u4e3a int& \u5982\u679c\u975e\u8981\u5339\u914d\uff0c\u5219\u9700\u8981\u4f7f\u7528 const \uff08\u5de6\u503c\uff09\u5f15\u7528\uff1a int fun ( const int & a ){ return a ; } int main ( int argc , char * argv []){ fun ( 10 ); // \u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\u3002const (\u5de6\u503c)\u5f15\u7528\u53ef\u4ee5\u5339\u914d\u53f3\u503c return 0 ; } \u5728 C++11 \u4e4b\u540e\uff0c\u4e0d\u7528 const \u5de6\u503c\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u5339\u914d\u53f3\u503c\u4e86\uff1a int fun ( int && a ){ return a ; } int main ( int argc , char * argv []){ fun ( 10 ); // \u53f3\u503c\u5f15\u7528\u53ef\u4ee5\u5339\u914d\u53f3\u503c return 0 ; } \u5f53\u7136\uff0c\u53f3\u503c\u5f15\u7528\u7684\u53d1\u660e\u4e0d\u662f\u4e3b\u8981\u4e3a\u4e86\u89e3\u51b3\u8fd9\u7c7b\u7b80\u5355\u7684\u8c03\u7528\u5339\u914d\u95ee\u9898\uff0c\u800c\u662f\u4e3a\u4e86\u5f15\u5165 move \u8bed\u4e49 \u3002 move \u8bed\u4e49 \u00b6 \u5148\u770b\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u53d1\u660e\u524d\uff0c\u8d44\u6e90\u5229\u7528\u6548\u7387\u4e0d\u9ad8\u7684\u95ee\u9898\uff0c\u4ee5\u5b57\u7b26\u4e32\u7c7b\u4e3a\u4f8b\u3002\u6211\u4eec\u77e5\u9053\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u505a\u6d45\u62f7\u8d1d\uff0c\u662f\u9519\u8bef\u7684\uff1a class CMyString { public : char * m_pBuffer ; int m_iLen ; CMyString ( const char * pString ){ m_iLen = strlen ( pString ) + 1 ; m_pBuffer = new char [ m_iLen ]; strcpy ( m_pBuffer , pString ); } ~ CMyString (){ m_iLen = 0 ; if ( m_pBuffer ){ delete [] m_pBuffer ; } } CMyString ( CMyString & other ){ // \u6d45\u62f7\u8d1d\uff0c\u9519\u8bef this -> m_pBuffer = other . m_pBuffer ; this -> m_iLen = other . m_iLen ; } }; \u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u5982\u679c A \u5bf9\u8c61\u62f7\u8d1d\u590d\u5236\u81ea B \u5bf9\u8c61\uff0c\u90a3\u4e48\u5f53 B \u5bf9\u8c61\u6790\u6784\u65f6\uff0c\u4f1a\u9500\u6bc1 m_pBuffer \u6307\u5411\u7684\u7f13\u51b2\u533a\uff0c\u8fd9\u6837 A \u5bf9\u8c61\u6240\u6307\u5411\u7684\u7f13\u51b2\u533a\u4e5f\u88ab\u4e00\u8d77\u9500\u6bc1\u4e86\u3002 \u56e0\u6b64 CMyString \u5176\u5b9e\u9700\u8981\u7684\u662f\u6df1\u62f7\u8d1d\uff1a CMyString ( CMyString & other ){ // \u6df1\u62f7\u8d1d this -> m_iLen = other . m_iLen ; this -> m_pBuffer = new char [ m_iLen ]; strcpy ( this -> m_pBuffer , other . m_pBuffer ); } \u8fd9\u662f\u5b89\u5168\u3001\u6b63\u786e\u7684\u505a\u6cd5\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u6df1\u62f7\u8d1d\u5176\u5b9e \u4e0d\u662f\u6700\u9ad8\u6548\u7684 \uff0c\u6bd4\u5982\u5bf9\u4e8e\u4ee5\u4e0b\u4ee3\u7801\uff1a int main ( int argc , char * argv []){ CMyString str1 ( CMyString ( \"hello\" )); return 0 ; } \u4ee5\u4e0a\u7684 CMyString(\"hello\") \u662f\u4e00\u4e2a\u53f3\u503c\uff08\u65e0\u540d\u5bf9\u8c61\uff09\uff0c\u8fd9\u4e2a\u65e0\u540d\u5bf9\u8c61\u5728\u5b8c\u6210 str1 \u7684\u6784\u9020\u540e\uff0c\u751f\u547d\u5468\u671f\u4e5f\u5c31\u7ed3\u675f\u4e86\uff0c\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u4e5f\u5c31\u88ab\u91ca\u653e\u4e86\u3002 \u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u6765\u4e86\uff1a\u65e2\u7136\u660e\u77e5\u9053\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u9a6c\u4e0a\u5c31\u4f1a\u91ca\u653e\uff0c\u90a3\u4f55\u5fc5\u4e0d\u505a\u6df1\u62f7\u8d1d\uff0c\u800c\u662f\u76f4\u63a5\u201c\u5077\u201d\u8fd9\u4e2a\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u5462\uff1f\u4ee3\u7801\u903b\u8f91\u5982\u4e0b\uff1a CMyString ( /*\u7c7b\u578b\u6682\u4e14\u4fdd\u5bc6*/ other ){ this -> m_iLen = other . m_iLen ; this -> m_pBuffer = other . m_pBuffer ; // \u6d45\u62f7\u8d1d\u3001\u5077\u8d44\u6e90 other . m_pBuffer = nullptr ; // \u8ba9 other.m_pBuffer \u4e0d\u88ab\u91ca\u653e } \u6709\u4e86\u4ee5\u4e0a\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\uff0c\u5176\u5b9e\u6709\u4e24\u79cd\u201c\u4ece\u5bf9\u8c61B\u5f97\u5230\u5bf9\u8c61A\u201d\u7684\u6784\u9020\uff1a \u4e00\u79cd\u662f C++11 \u4e4b\u524d\u7684\u62f7\u8d1d\u6784\u9020 \u4e00\u79cd\u662f C++11 \u4e4b\u540e\u5f15\u5165\u7684\uff0c\u4e13\u95e8\u9488\u5bf9 B \u662f\u53f3\u503c\u3001\u53ef\u4ee5\u88ab\u201c\u5077\u8d44\u6e90\u201d\u573a\u666f\u7684\u6784\u9020\uff0c\u79f0\u4e3a \u79fb\u52a8\u6784\u9020 \u7528\u4ee5\u4e0a CMyString \u4e3a\u4f8b\uff0c\u63ed\u6653\u79fb\u52a8\u6784\u9020\u7684\u539f\u578b\uff0c\u5b83\u7684\u5f62\u53c2\u662f \u53f3\u503c\u5f15\u7528 \uff1a CMyString ( CMyString && other ){ this -> m_iLen = other . m_iLen ; this -> m_pBuffer = other . m_pBuffer ; // \u6d45\u62f7\u8d1d\u3001\u5077\u8d44\u6e90 other . m_pBuffer = nullptr ; // \u8ba9 m_pBuffer \u4e0d\u56e0\u4e3aother\u6790\u6784\u800c\u91ca\u653e } \u7c7b\u4f3c\u4e8e\u62f7\u8d1d\u6784\u9020\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d operator=(CMyString&) \uff08\u62f7\u8d1d\u8d4b\u503c\uff09\uff0c\u79fb\u52a8\u6784\u9020\u4e5f\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff1a operator=(CMyString&&) \uff08\u79fb\u52a8\u8d4b\u503c\uff09\u3002 \u79fb\u52a8\u6784\u9020\u548c\u79fb\u52a8\u8d4b\u503c\uff0c\u7edf\u79f0\u4e3a \u79fb\u52a8\u8bed\u4e49 \u3002 std::move \u00b6 C++11 \u4e2d\u5f15\u5165\u53f3\u503c\u5f15\u7528\u7684\u540c\u65f6\uff0c\u8fd8\u5728\u6807\u51c6\u4e2d\u5f15\u5165\u4e86 std::move \u51fd\u6570\u3002\u5b83\u7684\u4f5c\u7528\u662f\u201c\u5c06\u8868\u8fbe\u5f0f\u5f3a\u884c\u8f6c\u4e3a\u53f3\u503c\u7c7b\u578b\u201d\u3002 \u6211\u4eec\u5148\u770b\u4e0b\u4f8b\uff0c\u5b83\u662f\u4e00\u4e2a\u201c\u53ef\u4ee5\u6539\u8fdb\u201d\u7684 myswap \u51fd\u6570\uff1a template < typename T > void myswap ( T & a , T & b ){ T temp ( a ); // \u53d1\u751f\u62f7\u8d1d\u6784\u9020 a = b ; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c b = temp ; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c } \u4ee5\u4e0a\u4e09\u884c\u4ee3\u7801\uff0c\u56e0\u4e3a\u6ca1\u6709\u53f3\u503c\u7c7b\u578b\uff0c\u6240\u4ee5\u4e0d\u4f1a\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\u3002\u5982\u679c T \u662f CMyString \uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u4e09\u6b21\u6df1\u62f7\u8d1d\u3002 \u4f46\u662f\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\uff0c\u5b9e\u9645\u4e0a\u4ee5\u4e0a\u4e09\u884c\u4f7f\u7528\u79fb\u52a8\u8bed\u4e49\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a\u4f5c\u4e3a\u6784\u9020\u6216\u8005\u8d4b\u503c\u7684\u6e90\u53d8\u91cf\uff0c\u8981\u4e48\u4f7f\u7528\u8fc7\u4e00\u6b21\u540e\u5c31\u4e0d\u518d\u4f7f\u7528\uff0c\u8981\u4e48\u4ec5\u4f5c\u4e3a\u8d4b\u503c\u7684\u76ee\u6807\u3002\u6362\u8a00\u4e4b\uff0c\u5b83\u4eec\u7684\u8d44\u6e90\u662f\u53ef\u4ee5\u88ab\u201c\u5077\u201d\u7684\u3002 \u8fd9\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 std::move \u5f3a\u884c\u628a\u53d8\u91cf\u8f6c\u4e3a\u53f3\u503c\u7c7b\u578b\uff0c\u6765\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\u4e86\uff1a template < typename T > void myswap ( T & a , T & b ){ T temp ( std :: move ( a )); // \u53d1\u751f\u79fb\u52a8\u6784\u9020\uff0c\u5077 a \u7684\u8d44\u6e90 a = std :: move ( b ); // \u53d1\u751f\u79fb\u52a8\u6784\u9020\uff0c\u5077 b \u7684\u8d44\u6e90 b = std :: move ( temp ); // \u53d1\u751f\u79fb\u52a8\u8d4b\u503c\uff0c\u5077 temp \u7684\u8d44\u6e90 } std::move \u539f\u7406\u89e3\u6790 \u00b6 std::move \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u795e\u5947\u5730\u628a\u5de6\u503c\u7ed9\u5f3a\u5236\u8f6c\u53d8\u6210\u53f3\u503c\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u89e3\u6790\u5b83\u7684\u6e90\u7801\u77e5\u6653\u7b54\u6848\uff0c\u4ece C++ \u5934\u6587\u4ef6\u4e2d\u627e\u5230 move \u7684\u6e90\u7801\uff1a template < typename _Tp > constexpr typename std :: remove_reference < _Tp >:: type && move ( _Tp && __t ) noexcept { return static_cast < typename std :: remove_reference < _Tp >:: type &&> ( __t ); } \u79fb\u9664\u6389\u4e0d\u592a\u76f8\u5173\u7684 constexpr \u3001 noexcept \u5f97\u5230\uff1a template < typename _Tp > typename std :: remove_reference < _Tp >:: type && move ( _Tp && __t ) { return static_cast < typename std :: remove_reference < _Tp >:: type &&> ( __t ); } \u4f1a\u53d1\u73b0 move \u7684\u8fd4\u56de\u503c\u548c\u5185\u90e8\u5b9e\u73b0\uff0c\u90fd\u548c std::remove_reference<_Tp>::type \u5f88\u6709\u5173\u7cfb\uff0c\u90a3\u4e48\u7ee7\u7eed\u770b\u770b std::remove_reference \u7684\u5b9e\u73b0\uff1a template < typename _Tp > struct remove_reference { typedef _Tp type ; }; template < typename _Tp > struct remove_reference < _Tp &> { typedef _Tp type ; }; template < typename _Tp > struct remove_reference < _Tp &&> { typedef _Tp type ; }; \u53d1\u73b0 remove_reference \uff0c\u53d1\u73b0\u5b83\u7684\u4f5c\u7528\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e0d\u7ba1\u6a21\u677f\u53c2\u6570\u662f _Tp \uff0c\u8fd8\u662f _Tp \u7684\u5de6\u503c\u5f15\u7528\uff0c\u6216\u8005 _Tp \u7684\u53f3\u503c\u5f15\u7528\uff0c\u90fd\u7edf\u7edf\u90fd\u5b9a\u4e49\u4e00\u4e2a type \u7b49\u4ef7\u4e8e _Tp \u7c7b\u578b\u3002\u56de\u5934\u770b\uff0c\u5176\u5b9e remove_reference \u7684\u4f5c\u7528\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u201c\u79fb\u9664\u6389\u7c7b\u578b\u7684\u5f15\u7528\u6027\u8d28\u201d \u7684\u610f\u601d\u3002 \u77e5\u9053\u8fd9\u4e2a\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u6b65\u4e00\u90e8\u7b80\u5316 move \u7684\u6e90\u7801\uff0c\u53ea\u8c08\u539f\u7406\u4e0d\u6c42\u4e25\u8c28\u7684\u8bdd\u5176\u5b9e\u5c31\u662f\uff1a template < typename _Tp > _Tp && move ( _Tp && __t ){ return ( _Tp && )( __t ); // \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 } move \u4ec5\u4ec5\u662f\u505a\u4e86\u4e00\u4e2a\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u800c\u5df2\uff08\u5176\u5b9e\u8fd8\u6d89\u53ca\u5230\u4e86\u201c\u4e07\u80fd\u5f15\u7528\u201d\u7684\u77e5\u8bc6\u70b9\uff0c\u6211\u4eec\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\uff09\u3002 std::move \u7684\u4f7f\u7528\u6ce8\u610f\u4e8b\u9879 \u00b6 \u7ec4\u5408\u6216\u8005\u7ee7\u627f\u65f6\uff0c\u663e\u5f0f\u8c03\u7528 std::move \u00b6 \u4e00\u822c\u800c\u8a00\uff0c\u6d3e\u751f\u7c7b\u5982\u679c\u662f\u79fb\u52a8\uff0c\u90a3\u4e48\u4e5f \u671f\u5f85 \u57fa\u7c7b\u4e5f\u662f\u79fb\u52a8\u6784\u9020\uff08\u6d3e\u751f\u7c7b\u3001\u57fa\u7c7b\u7684\u8d44\u6e90\u4e00\u8d77\u201c\u5077\u201d\uff09\u3002 \u4f46\u662f\uff0c\u4ee5\u4e0b\u7684\u5199\u6cd5\u662f\u4e0d\u6b63\u786e\u7684\uff1a class CDerived : public CBase { public : CDerived ( CDerived && other ) : CBase ( other ) // \u65e0\u6cd5\u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020 { // ... } }; \u5b9e\u9645\u4e0a\uff0c\u4ee5\u4e0a\u4ee3\u7801 \u4e0d\u4f1a \u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020\uff0c\u800c\u662f\u89e6\u53d1\u7684\u62f7\u8d1d\u6784\u9020\u3002\u56e0\u4e3a\uff1a Note \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6240\u4ee5\uff0c\u5f53\u6211\u4eec\u671f\u5f85\u201c\u57fa\u7c7b\u4e5f\u662f\u505a\u79fb\u52a8\u6784\u9020\u65f6\u201d\uff0c\u5e94\u8be5\u663e\u5f0f\u8c03\u7528 std::move \uff1a class CDerived : public CBase { public : CDerived ( CDerived && other ) : CBase ( std :: move ( other )) // \u5f3a\u5236\u8f6c\u4e3a\u53f3\u503c\uff0c\u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020 { // ... } }; \u8fd9\u6837\u7684\u4f8b\u5b50\u4e5f\u9002\u7528\u4e8e\u7ec4\u5408\uff08\u6210\u5458\u521d\u59cb\u5316\uff09\u7684\u60c5\u51b5\uff0c\u5728 OneFlow \u4ed3\u5e93\u4e2d\u53ef\u4ee5\u627e\u5230\u4e0d\u5c11\uff1a HightOrderBool , OpExpression \u3002 \u5c40\u90e8\u53d8\u91cf\u8fd4\u56de\u65f6\uff0c\u4e0d\u8c03\u7528 std::move \u00b6 \u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0b\u4f8b\uff1a CTemp foo (){ CTemp x ; return x ; // x \u7684\u4f5c\u7528\u57df\u548c\u751f\u547d\u5468\u671f\u5373\u5c06\u7ed3\u675f } \u8fd9\u65f6\u4f60\u53ef\u80fd\u4f1a\u60f3\u5230\u201c\u7b49\u7b49\uff0c\u5728 foo() \u8c03\u7528\u5e76\u8fd4\u56de\u7684\u5730\u65b9\uff0c\u4f1a\u590d\u5236\u4e00\u6b21\u8fd4\u56de\u503c\uff0c\u800c x \u6700\u597d\u8f6c\u6210\u53f3\u503c\uff0c\u4f7f\u7528\u79fb\u52a8\u6784\u9020\u6765\u590d\u5236\uff1a CTemp foo (){ CTemp x ; return std :: move ( x ); // \u5f88\u53ef\u80fd\u597d\u5fc3\u529e\u574f\u4e8b } \u5176\u5b9e\u8fd9\u6837\u4fee\u6539\u540e\uff0c\u53cd\u800c\u53ef\u80fd\u4f1a\u628a\u4e8b\u60c5\u53d8\u7cdf\u7cd5\uff0c\u6211\u4eec\u7528\u4ee5\u4e0b\u8bd5\u9a8c\u770b\u770b\u6548\u679c\uff1a #include <iostream> #include <utility> class CTemp { public : CTemp () { std :: cout << \"CTemp\uff1a\u6784\u9020\" << std :: endl ; } CTemp ( CTemp & other ) { std :: cout << \"CTemp\uff1a\u62f7\u8d1d\u6784\u9020\" << std :: endl ; } CTemp ( CTemp && other ) { std :: cout << \"CTemp\uff1a\u79fb\u52a8\u6784\u9020\" << std :: endl ; } }; //2.\u6ce8\u610f\u5b9e\u73b0\uff1a\u8fd4\u56de\u65f6\u4f18\u5316 CTemp foo (){ CTemp x ; return x ; //\u4f5c\u7528\u57df\u5728\u8be5\u51fd\u6570\u4e2d\u5c31\u7ed3\u675f\u4e86 } CTemp foo_move (){ CTemp x ; return std :: move ( x ); //\u4f5c\u7528\u57df\u5728\u8be5\u51fd\u6570\u4e2d\u5c31\u7ed3\u675f\u4e86 } int main ( int argc , char * argv []) { auto a = foo (); std :: cout << \"-----------\" << std :: endl ; auto b = foo_move (); return 0 ; } \u8f93\u51fa\u7ed3\u679c\u662f\uff1a CTemp\uff1a\u6784\u9020 ----------- CTemp\uff1a\u6784\u9020 CTemp\uff1a\u79fb\u52a8\u6784\u9020 \u4f1a\u53d1\u73b0\u53cd\u800c\u662f\u505a\u4e86 std::move \u7684 foo_move \u591a\u4e86\u4e00\u6b21\u6784\u9020\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e\u662f\u56e0\u4e3a\uff0c\u73b0\u4ee3\u7f16\u8bd1\u5668\u4e00\u822c\u90fd\u505a \u8fd4\u56de\u503c\u4f18\u5316 \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0e\u5176\u73b0\u5728 foo \u5185\u90e8\u6784\u9020\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf x \uff0c\u518d\u628a\u5b83\u590d\u5236\u51fa\u53bb\uff1b\u4e0d\u5982\u76f4\u63a5\u5728 foo \u51fd\u6570\u8c03\u7528\u7684\u5730\u65b9\u76f4\u63a5\u6784\u9020\u4e00\u4e2a x \u5bf9\u8c61\u3002\u8fd9\u6837\u505a\u7684\u6548\u7387\u663e\u7136\u6bd4\u79fb\u52a8\u8bed\u4e49\u8981\u9ad8\u3002 \u5728\u8fd9\u7c7b\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7528 std::move \u4e3a\u4f73\u3002 \u5f53\u7136\uff0c\u8fd9\u4e5f\u4e0d\u662f\u4e00\u6982\u800c\u8bba\u7684\uff0c\u6bd4\u5982\u8fd8\u6709\u4e0d\u5c11\u5176\u5b83\u60c5\u51b5\u5728\u8fd4\u56de\u65f6\u662f\u4f7f\u7528 std::move \u7684\uff0c\u6bd4\u5982 OneFlow \u4e2d\u5c31\u53ef\u4ee5\u627e\u5230\u4f8b\u5b50\u3002 \u603b\u4e4b\uff0c\u9700\u8981\u975e\u5e38\u6df1\u523b\u7684\u7406\u89e3 std::move \u7684\u201c\u526f\u4f5c\u7528\u201d\uff0c\u624d\u80fd\u505a\u597d\u76f8\u5173\u4f18\u5316\uff0c\u63a8\u8350\u5927\u5bb6\u53ef\u4ee5\u770b\u770b copy elision \u3002","title":"\u53f3\u503c\u5f15\u7528"},{"location":"learn_cpp/01_rvalue_ref.html#_1","text":"\u53f3\u503c\u5f15\u7528\u8d77\u7801\u89e3\u51b3\u4e86\u4e24\u4e2a\u95ee\u9898\uff1a \u5b9e\u73b0 move \u8bed\u4e49\uff08\u672c\u6587\u4ecb\u7ecd\uff09 \u5b9e\u73b0\u5b8c\u7f8e\u8f6c\u53d1\uff08\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\uff09 \u672c\u6587\u4f1a\u4ecb\u7ecd\u4ec0\u4e48\u662f\uff1a \u4ec0\u4e48\u662f\u53f3\u503c \u4ec0\u4e48\u662f\u53f3\u503c\u5f15\u7528\u3001move \u8bed\u4e49 std::move \u539f\u7406\u5256\u6790 std::move \u4f7f\u7528\u6ce8\u610f\u4e8b\u9879","title":"\u53f3\u503c\u5f15\u7528"},{"location":"learn_cpp/01_rvalue_ref.html#_2","text":"C++ \u4e2d\u8868\u8fbe\u5f0f\u5206\u4e3a\u5de6\u503c\u548c\u53f3\u503c\uff0c\u7b80\u5355\u800c\u8a00\uff0c\u6709\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f\u5c31\u662f\u5de6\u503c\uff0c\u5b83\u53ef\u4ee5\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u7684**\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9**\u3002\u65e0\u6cd5\u53d6\u5185\u5b58\u5730\u5740\u7684\u8868\u8fbe\u5f0f\u662f\u53f3\u503c\uff0c**\u53ea\u80fd**\u51fa\u73b0\u5728\u8d4b\u503c\u8bed\u53e5\u7684\u53f3\u8fb9\u3002 \u4ee5\u4e0b\u662f C++ \u4e2d\u5e38\u89c1\u7684\u51fa\u73b0\u53f3\u503c\u7684\u60c5\u51b5\uff1a \u5e38\u91cf\u5b57\u9762\u91cf \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u7684\u503c\u6216\u5bf9\u8c61\uff08\u5de6\u503c\u5f15\u7528\u7c7b\u578b\u9664\u5916\uff09 \u65e0\u540d\u5bf9\u8c61 int funA ( int a ){ return a ; } int & funB ( int a ){ return a ; } class A { public : A (){} ~ A (){} }; int main ( int argc , char * argv []){ auto pos_num = & ( 10 ); // \u4e0d\u80fd\u53d6\u5730\u5740 1. \u5e38\u91cf\u5b57\u9762\u91cf auto pos_funA = & ( funA ( 0x1111 )); // \u4e0d\u80fd\u53d6\u5730\u5740 2. \u51fd\u6570\u8c03\u7528\u7684\u8fd4\u56de\u503c auto pos_funB = & ( funB ( 0x2222 )); // \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u7684\u7c7b\u578b\u4e3a\u5de6\u503c\u5f15\u7528\uff0c\u5219\u8fd4\u56de\u7684\u7ed3\u679c\u4e3a\u5de6\u503c auto pos_class = & ( A ()); // \u4e0d\u80fd\u53d6\u5730\u5740 3. \u65e0\u540d\u5bf9\u8c61 return 0 ; }","title":"\u4ec0\u4e48\u662f\u53f3\u503c"},{"location":"learn_cpp/01_rvalue_ref.html#_3","text":"\u5728 C++11 \u4e4b\u524d\uff0c\u662f\u53ea\u6709\u5de6\u503c\u5f15\u7528\uff08C++11\u4e4b\u540e\uff0c\u4e3a\u4e86\u548c\u53f3\u503c\u5f15\u7528\u533a\u5206\uff0c\u539f\u6765\u7684\u201c\u5f15\u7528\u201d\u624d\u79f0\u4e3a\u201c\u5de6\u503c\u5f15\u7528\u201d\uff09\uff0c\u6ca1\u6709\u53f3\u503c\u5f15\u7528\u7684\u3002\u56e0\u6b64\u65e0\u6cd5\u7528\u975e const \uff08\u5de6\u503c\uff09\u5f15\u7528\u5339\u914d\u53f3\u503c\u7684\u3002 \u6bd4\u5982\uff1a int fun ( int & a ){ return a ; } \u4ee5\u4e0b\u8c03\u7528\u4f1a\u51fa\u9519\uff1a fun ( 10 ); // \u7f16\u8bd1\u62a5\u9519\uff1a\u65e0\u6cd5\u4ece int \u8f6c\u4e3a int& \u5982\u679c\u975e\u8981\u5339\u914d\uff0c\u5219\u9700\u8981\u4f7f\u7528 const \uff08\u5de6\u503c\uff09\u5f15\u7528\uff1a int fun ( const int & a ){ return a ; } int main ( int argc , char * argv []){ fun ( 10 ); // \u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\u3002const (\u5de6\u503c)\u5f15\u7528\u53ef\u4ee5\u5339\u914d\u53f3\u503c return 0 ; } \u5728 C++11 \u4e4b\u540e\uff0c\u4e0d\u7528 const \u5de6\u503c\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u5339\u914d\u53f3\u503c\u4e86\uff1a int fun ( int && a ){ return a ; } int main ( int argc , char * argv []){ fun ( 10 ); // \u53f3\u503c\u5f15\u7528\u53ef\u4ee5\u5339\u914d\u53f3\u503c return 0 ; } \u5f53\u7136\uff0c\u53f3\u503c\u5f15\u7528\u7684\u53d1\u660e\u4e0d\u662f\u4e3b\u8981\u4e3a\u4e86\u89e3\u51b3\u8fd9\u7c7b\u7b80\u5355\u7684\u8c03\u7528\u5339\u914d\u95ee\u9898\uff0c\u800c\u662f\u4e3a\u4e86\u5f15\u5165 move \u8bed\u4e49 \u3002","title":"\u4ec0\u4e48\u662f\u53f3\u503c\u5f15\u7528"},{"location":"learn_cpp/01_rvalue_ref.html#move","text":"\u5148\u770b\u4e00\u4e2a\u53f3\u503c\u5f15\u7528\u53d1\u660e\u524d\uff0c\u8d44\u6e90\u5229\u7528\u6548\u7387\u4e0d\u9ad8\u7684\u95ee\u9898\uff0c\u4ee5\u5b57\u7b26\u4e32\u7c7b\u4e3a\u4f8b\u3002\u6211\u4eec\u77e5\u9053\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5b57\u7b26\u4e32\u505a\u6d45\u62f7\u8d1d\uff0c\u662f\u9519\u8bef\u7684\uff1a class CMyString { public : char * m_pBuffer ; int m_iLen ; CMyString ( const char * pString ){ m_iLen = strlen ( pString ) + 1 ; m_pBuffer = new char [ m_iLen ]; strcpy ( m_pBuffer , pString ); } ~ CMyString (){ m_iLen = 0 ; if ( m_pBuffer ){ delete [] m_pBuffer ; } } CMyString ( CMyString & other ){ // \u6d45\u62f7\u8d1d\uff0c\u9519\u8bef this -> m_pBuffer = other . m_pBuffer ; this -> m_iLen = other . m_iLen ; } }; \u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u5982\u679c A \u5bf9\u8c61\u62f7\u8d1d\u590d\u5236\u81ea B \u5bf9\u8c61\uff0c\u90a3\u4e48\u5f53 B \u5bf9\u8c61\u6790\u6784\u65f6\uff0c\u4f1a\u9500\u6bc1 m_pBuffer \u6307\u5411\u7684\u7f13\u51b2\u533a\uff0c\u8fd9\u6837 A \u5bf9\u8c61\u6240\u6307\u5411\u7684\u7f13\u51b2\u533a\u4e5f\u88ab\u4e00\u8d77\u9500\u6bc1\u4e86\u3002 \u56e0\u6b64 CMyString \u5176\u5b9e\u9700\u8981\u7684\u662f\u6df1\u62f7\u8d1d\uff1a CMyString ( CMyString & other ){ // \u6df1\u62f7\u8d1d this -> m_iLen = other . m_iLen ; this -> m_pBuffer = new char [ m_iLen ]; strcpy ( this -> m_pBuffer , other . m_pBuffer ); } \u8fd9\u662f\u5b89\u5168\u3001\u6b63\u786e\u7684\u505a\u6cd5\u3002\u4f46\u662f\uff0c\u5728\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u6df1\u62f7\u8d1d\u5176\u5b9e \u4e0d\u662f\u6700\u9ad8\u6548\u7684 \uff0c\u6bd4\u5982\u5bf9\u4e8e\u4ee5\u4e0b\u4ee3\u7801\uff1a int main ( int argc , char * argv []){ CMyString str1 ( CMyString ( \"hello\" )); return 0 ; } \u4ee5\u4e0a\u7684 CMyString(\"hello\") \u662f\u4e00\u4e2a\u53f3\u503c\uff08\u65e0\u540d\u5bf9\u8c61\uff09\uff0c\u8fd9\u4e2a\u65e0\u540d\u5bf9\u8c61\u5728\u5b8c\u6210 str1 \u7684\u6784\u9020\u540e\uff0c\u751f\u547d\u5468\u671f\u4e5f\u5c31\u7ed3\u675f\u4e86\uff0c\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u4e5f\u5c31\u88ab\u91ca\u653e\u4e86\u3002 \u8fd9\u4e2a\u65f6\u5019\u95ee\u9898\u6765\u4e86\uff1a\u65e2\u7136\u660e\u77e5\u9053\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u9a6c\u4e0a\u5c31\u4f1a\u91ca\u653e\uff0c\u90a3\u4f55\u5fc5\u4e0d\u505a\u6df1\u62f7\u8d1d\uff0c\u800c\u662f\u76f4\u63a5\u201c\u5077\u201d\u8fd9\u4e2a\u65e0\u540d\u5bf9\u8c61\u7684\u8d44\u6e90\u5462\uff1f\u4ee3\u7801\u903b\u8f91\u5982\u4e0b\uff1a CMyString ( /*\u7c7b\u578b\u6682\u4e14\u4fdd\u5bc6*/ other ){ this -> m_iLen = other . m_iLen ; this -> m_pBuffer = other . m_pBuffer ; // \u6d45\u62f7\u8d1d\u3001\u5077\u8d44\u6e90 other . m_pBuffer = nullptr ; // \u8ba9 other.m_pBuffer \u4e0d\u88ab\u91ca\u653e } \u6709\u4e86\u4ee5\u4e0a\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u4e86\uff0c\u5176\u5b9e\u6709\u4e24\u79cd\u201c\u4ece\u5bf9\u8c61B\u5f97\u5230\u5bf9\u8c61A\u201d\u7684\u6784\u9020\uff1a \u4e00\u79cd\u662f C++11 \u4e4b\u524d\u7684\u62f7\u8d1d\u6784\u9020 \u4e00\u79cd\u662f C++11 \u4e4b\u540e\u5f15\u5165\u7684\uff0c\u4e13\u95e8\u9488\u5bf9 B \u662f\u53f3\u503c\u3001\u53ef\u4ee5\u88ab\u201c\u5077\u8d44\u6e90\u201d\u573a\u666f\u7684\u6784\u9020\uff0c\u79f0\u4e3a \u79fb\u52a8\u6784\u9020 \u7528\u4ee5\u4e0a CMyString \u4e3a\u4f8b\uff0c\u63ed\u6653\u79fb\u52a8\u6784\u9020\u7684\u539f\u578b\uff0c\u5b83\u7684\u5f62\u53c2\u662f \u53f3\u503c\u5f15\u7528 \uff1a CMyString ( CMyString && other ){ this -> m_iLen = other . m_iLen ; this -> m_pBuffer = other . m_pBuffer ; // \u6d45\u62f7\u8d1d\u3001\u5077\u8d44\u6e90 other . m_pBuffer = nullptr ; // \u8ba9 m_pBuffer \u4e0d\u56e0\u4e3aother\u6790\u6784\u800c\u91ca\u653e } \u7c7b\u4f3c\u4e8e\u62f7\u8d1d\u6784\u9020\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d operator=(CMyString&) \uff08\u62f7\u8d1d\u8d4b\u503c\uff09\uff0c\u79fb\u52a8\u6784\u9020\u4e5f\u6709\u4e0e\u4e4b\u5bf9\u5e94\u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff1a operator=(CMyString&&) \uff08\u79fb\u52a8\u8d4b\u503c\uff09\u3002 \u79fb\u52a8\u6784\u9020\u548c\u79fb\u52a8\u8d4b\u503c\uff0c\u7edf\u79f0\u4e3a \u79fb\u52a8\u8bed\u4e49 \u3002","title":"move \u8bed\u4e49"},{"location":"learn_cpp/01_rvalue_ref.html#stdmove","text":"C++11 \u4e2d\u5f15\u5165\u53f3\u503c\u5f15\u7528\u7684\u540c\u65f6\uff0c\u8fd8\u5728\u6807\u51c6\u4e2d\u5f15\u5165\u4e86 std::move \u51fd\u6570\u3002\u5b83\u7684\u4f5c\u7528\u662f\u201c\u5c06\u8868\u8fbe\u5f0f\u5f3a\u884c\u8f6c\u4e3a\u53f3\u503c\u7c7b\u578b\u201d\u3002 \u6211\u4eec\u5148\u770b\u4e0b\u4f8b\uff0c\u5b83\u662f\u4e00\u4e2a\u201c\u53ef\u4ee5\u6539\u8fdb\u201d\u7684 myswap \u51fd\u6570\uff1a template < typename T > void myswap ( T & a , T & b ){ T temp ( a ); // \u53d1\u751f\u62f7\u8d1d\u6784\u9020 a = b ; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c b = temp ; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c } \u4ee5\u4e0a\u4e09\u884c\u4ee3\u7801\uff0c\u56e0\u4e3a\u6ca1\u6709\u53f3\u503c\u7c7b\u578b\uff0c\u6240\u4ee5\u4e0d\u4f1a\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\u3002\u5982\u679c T \u662f CMyString \uff0c\u90a3\u4e48\u4f1a\u53d1\u751f\u4e09\u6b21\u6df1\u62f7\u8d1d\u3002 \u4f46\u662f\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\uff0c\u5b9e\u9645\u4e0a\u4ee5\u4e0a\u4e09\u884c\u4f7f\u7528\u79fb\u52a8\u8bed\u4e49\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a\u4f5c\u4e3a\u6784\u9020\u6216\u8005\u8d4b\u503c\u7684\u6e90\u53d8\u91cf\uff0c\u8981\u4e48\u4f7f\u7528\u8fc7\u4e00\u6b21\u540e\u5c31\u4e0d\u518d\u4f7f\u7528\uff0c\u8981\u4e48\u4ec5\u4f5c\u4e3a\u8d4b\u503c\u7684\u76ee\u6807\u3002\u6362\u8a00\u4e4b\uff0c\u5b83\u4eec\u7684\u8d44\u6e90\u662f\u53ef\u4ee5\u88ab\u201c\u5077\u201d\u7684\u3002 \u8fd9\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528 std::move \u5f3a\u884c\u628a\u53d8\u91cf\u8f6c\u4e3a\u53f3\u503c\u7c7b\u578b\uff0c\u6765\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\u4e86\uff1a template < typename T > void myswap ( T & a , T & b ){ T temp ( std :: move ( a )); // \u53d1\u751f\u79fb\u52a8\u6784\u9020\uff0c\u5077 a \u7684\u8d44\u6e90 a = std :: move ( b ); // \u53d1\u751f\u79fb\u52a8\u6784\u9020\uff0c\u5077 b \u7684\u8d44\u6e90 b = std :: move ( temp ); // \u53d1\u751f\u79fb\u52a8\u8d4b\u503c\uff0c\u5077 temp \u7684\u8d44\u6e90 }","title":"std::move"},{"location":"learn_cpp/01_rvalue_ref.html#stdmove_1","text":"std::move \u4e3a\u4ec0\u4e48\u53ef\u4ee5\u795e\u5947\u5730\u628a\u5de6\u503c\u7ed9\u5f3a\u5236\u8f6c\u53d8\u6210\u53f3\u503c\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u89e3\u6790\u5b83\u7684\u6e90\u7801\u77e5\u6653\u7b54\u6848\uff0c\u4ece C++ \u5934\u6587\u4ef6\u4e2d\u627e\u5230 move \u7684\u6e90\u7801\uff1a template < typename _Tp > constexpr typename std :: remove_reference < _Tp >:: type && move ( _Tp && __t ) noexcept { return static_cast < typename std :: remove_reference < _Tp >:: type &&> ( __t ); } \u79fb\u9664\u6389\u4e0d\u592a\u76f8\u5173\u7684 constexpr \u3001 noexcept \u5f97\u5230\uff1a template < typename _Tp > typename std :: remove_reference < _Tp >:: type && move ( _Tp && __t ) { return static_cast < typename std :: remove_reference < _Tp >:: type &&> ( __t ); } \u4f1a\u53d1\u73b0 move \u7684\u8fd4\u56de\u503c\u548c\u5185\u90e8\u5b9e\u73b0\uff0c\u90fd\u548c std::remove_reference<_Tp>::type \u5f88\u6709\u5173\u7cfb\uff0c\u90a3\u4e48\u7ee7\u7eed\u770b\u770b std::remove_reference \u7684\u5b9e\u73b0\uff1a template < typename _Tp > struct remove_reference { typedef _Tp type ; }; template < typename _Tp > struct remove_reference < _Tp &> { typedef _Tp type ; }; template < typename _Tp > struct remove_reference < _Tp &&> { typedef _Tp type ; }; \u53d1\u73b0 remove_reference \uff0c\u53d1\u73b0\u5b83\u7684\u4f5c\u7528\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e0d\u7ba1\u6a21\u677f\u53c2\u6570\u662f _Tp \uff0c\u8fd8\u662f _Tp \u7684\u5de6\u503c\u5f15\u7528\uff0c\u6216\u8005 _Tp \u7684\u53f3\u503c\u5f15\u7528\uff0c\u90fd\u7edf\u7edf\u90fd\u5b9a\u4e49\u4e00\u4e2a type \u7b49\u4ef7\u4e8e _Tp \u7c7b\u578b\u3002\u56de\u5934\u770b\uff0c\u5176\u5b9e remove_reference \u7684\u4f5c\u7528\u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u201c\u79fb\u9664\u6389\u7c7b\u578b\u7684\u5f15\u7528\u6027\u8d28\u201d \u7684\u610f\u601d\u3002 \u77e5\u9053\u8fd9\u4e2a\u4ee5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u6b65\u4e00\u90e8\u7b80\u5316 move \u7684\u6e90\u7801\uff0c\u53ea\u8c08\u539f\u7406\u4e0d\u6c42\u4e25\u8c28\u7684\u8bdd\u5176\u5b9e\u5c31\u662f\uff1a template < typename _Tp > _Tp && move ( _Tp && __t ){ return ( _Tp && )( __t ); // \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362 } move \u4ec5\u4ec5\u662f\u505a\u4e86\u4e00\u4e2a\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u800c\u5df2\uff08\u5176\u5b9e\u8fd8\u6d89\u53ca\u5230\u4e86\u201c\u4e07\u80fd\u5f15\u7528\u201d\u7684\u77e5\u8bc6\u70b9\uff0c\u6211\u4eec\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\uff09\u3002","title":"std::move \u539f\u7406\u89e3\u6790"},{"location":"learn_cpp/01_rvalue_ref.html#stdmove_2","text":"","title":"std::move \u7684\u4f7f\u7528\u6ce8\u610f\u4e8b\u9879"},{"location":"learn_cpp/01_rvalue_ref.html#stdmove_3","text":"\u4e00\u822c\u800c\u8a00\uff0c\u6d3e\u751f\u7c7b\u5982\u679c\u662f\u79fb\u52a8\uff0c\u90a3\u4e48\u4e5f \u671f\u5f85 \u57fa\u7c7b\u4e5f\u662f\u79fb\u52a8\u6784\u9020\uff08\u6d3e\u751f\u7c7b\u3001\u57fa\u7c7b\u7684\u8d44\u6e90\u4e00\u8d77\u201c\u5077\u201d\uff09\u3002 \u4f46\u662f\uff0c\u4ee5\u4e0b\u7684\u5199\u6cd5\u662f\u4e0d\u6b63\u786e\u7684\uff1a class CDerived : public CBase { public : CDerived ( CDerived && other ) : CBase ( other ) // \u65e0\u6cd5\u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020 { // ... } }; \u5b9e\u9645\u4e0a\uff0c\u4ee5\u4e0a\u4ee3\u7801 \u4e0d\u4f1a \u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020\uff0c\u800c\u662f\u89e6\u53d1\u7684\u62f7\u8d1d\u6784\u9020\u3002\u56e0\u4e3a\uff1a Note \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6709\u540d\u5b57 \u7684\u53f3\u503c\u5f15\u7528\u5176\u5b9e\u662f \u5de6\u503c \u6240\u4ee5\uff0c\u5f53\u6211\u4eec\u671f\u5f85\u201c\u57fa\u7c7b\u4e5f\u662f\u505a\u79fb\u52a8\u6784\u9020\u65f6\u201d\uff0c\u5e94\u8be5\u663e\u5f0f\u8c03\u7528 std::move \uff1a class CDerived : public CBase { public : CDerived ( CDerived && other ) : CBase ( std :: move ( other )) // \u5f3a\u5236\u8f6c\u4e3a\u53f3\u503c\uff0c\u89e6\u53d1 CBase \u7684\u79fb\u52a8\u6784\u9020 { // ... } }; \u8fd9\u6837\u7684\u4f8b\u5b50\u4e5f\u9002\u7528\u4e8e\u7ec4\u5408\uff08\u6210\u5458\u521d\u59cb\u5316\uff09\u7684\u60c5\u51b5\uff0c\u5728 OneFlow \u4ed3\u5e93\u4e2d\u53ef\u4ee5\u627e\u5230\u4e0d\u5c11\uff1a HightOrderBool , OpExpression \u3002","title":"\u7ec4\u5408\u6216\u8005\u7ee7\u627f\u65f6\uff0c\u663e\u5f0f\u8c03\u7528 std::move"},{"location":"learn_cpp/01_rvalue_ref.html#stdmove_4","text":"\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u8fd4\u56de\u5c40\u90e8\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0b\u4f8b\uff1a CTemp foo (){ CTemp x ; return x ; // x \u7684\u4f5c\u7528\u57df\u548c\u751f\u547d\u5468\u671f\u5373\u5c06\u7ed3\u675f } \u8fd9\u65f6\u4f60\u53ef\u80fd\u4f1a\u60f3\u5230\u201c\u7b49\u7b49\uff0c\u5728 foo() \u8c03\u7528\u5e76\u8fd4\u56de\u7684\u5730\u65b9\uff0c\u4f1a\u590d\u5236\u4e00\u6b21\u8fd4\u56de\u503c\uff0c\u800c x \u6700\u597d\u8f6c\u6210\u53f3\u503c\uff0c\u4f7f\u7528\u79fb\u52a8\u6784\u9020\u6765\u590d\u5236\uff1a CTemp foo (){ CTemp x ; return std :: move ( x ); // \u5f88\u53ef\u80fd\u597d\u5fc3\u529e\u574f\u4e8b } \u5176\u5b9e\u8fd9\u6837\u4fee\u6539\u540e\uff0c\u53cd\u800c\u53ef\u80fd\u4f1a\u628a\u4e8b\u60c5\u53d8\u7cdf\u7cd5\uff0c\u6211\u4eec\u7528\u4ee5\u4e0b\u8bd5\u9a8c\u770b\u770b\u6548\u679c\uff1a #include <iostream> #include <utility> class CTemp { public : CTemp () { std :: cout << \"CTemp\uff1a\u6784\u9020\" << std :: endl ; } CTemp ( CTemp & other ) { std :: cout << \"CTemp\uff1a\u62f7\u8d1d\u6784\u9020\" << std :: endl ; } CTemp ( CTemp && other ) { std :: cout << \"CTemp\uff1a\u79fb\u52a8\u6784\u9020\" << std :: endl ; } }; //2.\u6ce8\u610f\u5b9e\u73b0\uff1a\u8fd4\u56de\u65f6\u4f18\u5316 CTemp foo (){ CTemp x ; return x ; //\u4f5c\u7528\u57df\u5728\u8be5\u51fd\u6570\u4e2d\u5c31\u7ed3\u675f\u4e86 } CTemp foo_move (){ CTemp x ; return std :: move ( x ); //\u4f5c\u7528\u57df\u5728\u8be5\u51fd\u6570\u4e2d\u5c31\u7ed3\u675f\u4e86 } int main ( int argc , char * argv []) { auto a = foo (); std :: cout << \"-----------\" << std :: endl ; auto b = foo_move (); return 0 ; } \u8f93\u51fa\u7ed3\u679c\u662f\uff1a CTemp\uff1a\u6784\u9020 ----------- CTemp\uff1a\u6784\u9020 CTemp\uff1a\u79fb\u52a8\u6784\u9020 \u4f1a\u53d1\u73b0\u53cd\u800c\u662f\u505a\u4e86 std::move \u7684 foo_move \u591a\u4e86\u4e00\u6b21\u6784\u9020\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e\u662f\u56e0\u4e3a\uff0c\u73b0\u4ee3\u7f16\u8bd1\u5668\u4e00\u822c\u90fd\u505a \u8fd4\u56de\u503c\u4f18\u5316 \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0e\u5176\u73b0\u5728 foo \u5185\u90e8\u6784\u9020\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf x \uff0c\u518d\u628a\u5b83\u590d\u5236\u51fa\u53bb\uff1b\u4e0d\u5982\u76f4\u63a5\u5728 foo \u51fd\u6570\u8c03\u7528\u7684\u5730\u65b9\u76f4\u63a5\u6784\u9020\u4e00\u4e2a x \u5bf9\u8c61\u3002\u8fd9\u6837\u505a\u7684\u6548\u7387\u663e\u7136\u6bd4\u79fb\u52a8\u8bed\u4e49\u8981\u9ad8\u3002 \u5728\u8fd9\u7c7b\u60c5\u51b5\u4e0b\uff0c\u4e0d\u7528 std::move \u4e3a\u4f73\u3002 \u5f53\u7136\uff0c\u8fd9\u4e5f\u4e0d\u662f\u4e00\u6982\u800c\u8bba\u7684\uff0c\u6bd4\u5982\u8fd8\u6709\u4e0d\u5c11\u5176\u5b83\u60c5\u51b5\u5728\u8fd4\u56de\u65f6\u662f\u4f7f\u7528 std::move \u7684\uff0c\u6bd4\u5982 OneFlow \u4e2d\u5c31\u53ef\u4ee5\u627e\u5230\u4f8b\u5b50\u3002 \u603b\u4e4b\uff0c\u9700\u8981\u975e\u5e38\u6df1\u523b\u7684\u7406\u89e3 std::move \u7684\u201c\u526f\u4f5c\u7528\u201d\uff0c\u624d\u80fd\u505a\u597d\u76f8\u5173\u4f18\u5316\uff0c\u63a8\u8350\u5927\u5bb6\u53ef\u4ee5\u770b\u770b copy elision \u3002","title":"\u5c40\u90e8\u53d8\u91cf\u8fd4\u56de\u65f6\uff0c\u4e0d\u8c03\u7528 std::move"},{"location":"learn_cpp/02_forward.html","text":"\u5b8c\u7f8e\u8f6c\u53d1 \u00b6 \u73b0\u4ee3 C++ \u9879\u76ee\u7684\u6e90\u7801\u4e2d\uff0c\u5e38\u5e38\u4f1a\u4f7f\u7528 std::forward \u51fd\u6570\u3002\u5b83\u662f C++ \u6807\u51c6\u5e93\u4e2d\u7684\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u51fd\u6570\u3002 \u672c\u6587\u4f1a\u4ecb\u7ecd\uff1a \u4ec0\u4e48\u662f\u5b8c\u7f8e\u8f6c\u53d1 \u4e07\u80fd\u5f15\u7528 std::forward \u539f\u7406\u5256\u6790 \u4ec0\u4e48\u662f\u5b8c\u7f8e\u8f6c\u53d1 \u00b6 \u5728\u67d0\u4e9b\u4ee3\u7801\u573a\u666f\u6216\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\uff0c\u4f1a\u51fa\u73b0\u53c2\u6570\u8f6c\u53d1\u7684\u9700\u6c42\u3002 \u6bd4\u5982\uff0c\u4ee5\u4e0b\u7684\u5de5\u5382\u6a21\u5f0f\uff0c\u5f88\u663e\u7136\u662f\u60f3\u901a\u8fc7 factory \u51fd\u6570\u628a\u53c2\u6570\uff0c\u4f20\u9012\u7ed9 T \u7684\u6784\u9020\u3002 template < typename T , typename Arg > shared_ptr < T > factory ( Arg arg ) { return shared_ptr < T > ( new T ( arg )); } \u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b factory \u51fd\u6570\u5c31\u50cf\u4e0d\u5b58\u5728\u4e00\u6837\uff0c T \u7684\u6784\u9020\u5c31\u50cf\u88ab\u76f4\u63a5\u8c03\u7528\u4e00\u6837\u3002\u4e0d\u4e25\u8c28\u5730\u8bf4\uff08\u4e25\u8c28\u7684\u5b9a\u4e49\u5728\u4e0b\u6587\u4e2d\uff09\uff0c\u8fd9\u5c31\u662f\u5b8c\u7f8e\u8f6c\u53d1\u3002 \u8f6c\u53d1\u53c2\u6570\u7684\u7a98\u5883 I \u00b6 \u7136\u800c\uff0c\u4ee5\u4e0a\u7684\u4ee3\u7801\u5e76\u4e0d\u5b8c\u7f8e\uff1a factory \u51fd\u6570\u7684\u53c2\u6570\u662f\u503c\u4f20\u9012\u7684\uff0c factory \u51fd\u6570\u8c03\u7528\u65f6\uff0c\u4f1a\u5148\u53d1\u751f\u4e00\u6b21\u53c2\u6570\u62f7\u8d1d\uff0c\u8fd9\u6837\u6709\u6027\u80fd\u4ee3\u4ef7\u3002 \u90a3\u81ea\u7136\u4f1a\u6709\u4eba\u60f3\u5230\uff0c\u53ef\u4ee5\u4e0d\u505a\u503c\u4f20\u9012\uff0c\u6539\u6210\u5f15\u7528\u4f20\u9012\uff0c\u63d0\u9ad8\u6027\u80fd\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg & arg /*\u6539\u6210\uff08\u5de6\u503c\uff09\u5f15\u7528*/ ) { return shared_ptr < T > ( new T ( arg )); } \u4f46\u662f\uff0c\u4ee5\u4e0a\u7684\u4ee3\u7801\u4e5f\u4e0d\u201c\u5b8c\u7f8e\u201d\uff0c\u9996\u5148\u7684\u95ee\u9898\u662f factory \u8c03\u7528\u65f6\uff0c\u65e0\u6cd5\u4f20\u9012\u53f3\u503c\uff1a factory < Foo , int > ( 5 /*\u53f3\u503c*/ ); //\u51fa\u9519\uff0c\u65e0\u6cd5\u4f20\u9012\u53f3\u503c \u867d\u7136\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 const \u5f15\u7528\uff08\u52c9\u5f3a\uff09\u89e3\u51b3\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg const & arg ) { return shared_ptr < T > ( new T ( arg )); } \u4f46\u662f\u5b83\u5e76\u4e0d\u4f18\u96c5\uff0c\u5f53\u6709\u591a\u4e2a\u5f62\u53c2\u65f6\uff0c\u7528\u8fd9\u79cd\u65b9\u6cd5\u89e3\u51b3\u53f3\u503c\u4f20\u9012\u7684\u95ee\u9898\uff0c\u9700\u8981\u4e3a\u6bcf\u4e2a\u5f62\u53c2\u5b9e\u73b0 const \u548c\u975e cosnt \u7248\u672c\uff0c\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u6392\u5217\u7ec4\u5408\u95ee\u9898\u3002 \u6bd4\u5982\uff0c\u5047\u8bbe factory \u6709\u4e09\u4e2a\u5f62\u53c2\uff0c\u90a3\u4e48\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u7684\u91cd\u8f7d\uff1a factory ( const T & , const T & , const T & ); factory ( T & , const T & , const T & ); factory ( const T & , T & , const T & ); factory ( const T & , const T & , T & ); factory ( const T & , T & , T & ); factory ( T & , const T & , T & ); factory ( T & , T & , const T & ); factory ( T & , T & , T & ); \u8f6c\u53d1\u7684\u7a98\u5883 II \u00b6 \u5176\u6b21\uff0c\u8fd9\u79cd\u65b9\u5f0f \u66f4\u672c\u8d28\u7684\u7f3a\u70b9 \u662f\uff1a factory \u5185\u90e8\uff0c\u56e0\u4e3a arg \u4e00\u5b9a\u662f\u5de6\u503c\uff0c\u65e0\u6cd5\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg const & arg ) { return shared_ptr < T > ( new T ( arg /* arg \u6709\u540d\u5b57\uff0c\u4e00\u5b9a\u662f\u5de6\u503c\uff0c\u65e0\u6cd5\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49*/ )); } \u5b8c\u7f8e\u8f6c\u53d1 std::forward \u00b6 \u6211\u4eec\u4e4b\u524d\u6bd4\u8f83\u53cb\u597d\u4f46\u662f\u4e0d\u4e25\u8c28\u5730\u5b9a\u4e49\u4e86\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u662f\u201c\u5916\u5c42 warpper\uff08 factory \u51fd\u6570\uff09\u5c31\u50cf\u4e0d\u5b58\u5728\uff0c\u5185\u5c42\u51fd\u6570\u50cf\u662f\u88ab\u76f4\u63a5\u8c03\u7528\u4e00\u6837\u201d\u3002 \u5b8c\u7f8e\u8f6c\u53d1\u7684\u4e25\u8c28\u5b9a\u4e49\u5176\u5b9e\u5e94\u8be5\u662f\uff1a \u8c03\u7528 wrapper \uff08 factory \uff09\u65f6\u4f20\u9012\u7684\u662f\u5de6\u503c\uff0c\u5185\u5c42\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u5f97\u5230\u7684\u5c31\u662f\u5de6\u503c \u8c03\u7528 wrapper \uff08 factory \uff09\u65f6\u4f20\u9012\u7684\u662f\u53f3\u503c\uff0c\u5185\u5c42\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u5f97\u5230\u7684\u5c31\u662f\u53f3\u503c \u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528 std::forward \u5c31\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002 \u770b\u4ee5\u4e0b\u7684\u4f8b\u5b50\uff1a #include <iostream> #include <utility> #include <memory> using namespace std ; class CBase { public : CBase ( int & ){ cout << \"CBase(int&)\" << endl ; } CBase ( int && ){ cout << \"CBase(int&&)\" << endl ; } }; template < typename T , typename Arg > shared_ptr < T > facotry ( Arg && arg ){ return shared_ptr < T > ( new T ( std :: forward < Arg > ( arg ))); } int main () { int value = 5 ; auto p1 = facotry < CBase > ( 5 ); auto p2 = facotry < CBase > ( value ); } \u4f1a\u8f93\u51fa\uff1a CBase ( int &&) # \u5bf9\u5e94\u4e86 facotry<CBase>(5); CBase ( int & ) # \u5bf9\u5e94\u4e86 facotry<CBase>(value); \u8fd9\u8bf4\u660e forward \u786e\u5b9e\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u4e86\u53c2\u6570\uff1a \u5f53\u8c03\u7528 facotry<CBase>(5) \u65f6\uff0c 5 \u662f\u53f3\u503c\uff0c\u4f20\u9012\u7ed9 new T(std::forward<Arg>(arg)) \u7684\u4e5f\u662f\u53f3\u503c\uff0c\u6700\u7ec8\u89e6\u53d1\u7684\u662f CBase(int&&) \u5f53\u8c03\u7528 facotry<CBase>(value) \u65f6\uff0c value \u662f\u5de6\u503c\uff0c\u4f20\u9012\u7ed9 new T(std::forward<Arg>(arg)) \u7684\u4e5f\u662f\u5de6\u503c\uff0c\u6700\u7ec8\u89e6\u53d1\u7684\u662f CBase(int&) \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u7b49\u6211\u4eec\u5b66\u4e60\u4e86\u201c\u4e07\u80fd\u5f15\u7528\u201d\u548c\u201c\u5f15\u7528\u6298\u53e0\u201d\u540e\uff0c\u5c31\u53ef\u4ee5\u5256\u6790 std::forward \u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u3002 std::forward \u4ee3\u7801\u5256\u6790 \u00b6 \u8981\u89e3\u8bfb std::forward \u5185\u90e8\u4ee3\u7801\u5b9e\u73b0\uff0c\u9700\u8981\u5148\u638c\u63e1 \u4e07\u80fd\u5f15\u7528 \u548c \u5f15\u7528\u6298\u53e0 \u7684\u77e5\u8bc6\u3002 \u4e07\u80fd\u5f15\u7528 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u666e\u901a\u51fd\u6570\uff0c\u5b83\u7684\u5f62\u53c2\uff0c\u8981\u4e48\u63a5\u53d7\u5de6\u503c\u3001\u8981\u4e48\u63a5\u53d7\u53f3\u503c\u7c7b\u578b\u3002\u5c31\u50cf\u6211\u4eec\u8fd9\u91cc\u7684 foo1 \u53ea\u80fd\u63a5\u6536\u5de6\u503c\uff1b foo2 \u53ea\u80fd\u63a5\u6536\u53f3\u503c\u3002 #include <iostream> #include <utility> #include <memory> using namespace std ; void foo1 ( int & ){ cout << \"foo(int&)\" << endl ; } void foo2 ( int && ){ cout << \"foo(int&&)\" << endl ; } int main () { int value = 5 ; foo1 ( 5 ); // \u9519 foo1 ( value ); // \u5bf9 foo2 ( 5 ); // \u5bf9 foo2 ( value ); // \u9519 } \u4f46\u662f\uff0c\u4ece C++11 \u5f00\u59cb\uff0c\u89c4\u5b9a\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u5f62\u5f0f\u4e0b\uff0c\u51fd\u6570\u5f62\u53c2\u65e2\u53ef\u4ee5\u5339\u914d\u5de6\u503c\uff0c\u4e5f\u53ef\u4ee5\u5339\u914d\u53f3\u503c\u3002 \u8fd9\u79cd\u60c5\u51b5\u5fc5\u987b\u662f\u6a21\u677f\u7684\u5f62\u5f0f\uff0c\u5e76\u4e14\u4ee5 && \u4f5c\u4e3a\u5f62\u53c2\u6570\u3002\u5b83\u88ab\u79f0\u4e3a\u201c\u4e07\u80fd\u5f15\u7528\u201d\uff08\u82f1\u6587\u4e3a universal reference \u6216 forwarding refference\uff09\u3002 \u4ee5\u4e0b\u7684 foo \u7684\u5f62\u53c2\u5c31\u662f\u201c\u4e07\u80fd\u5f15\u7528\u201d\uff1a template < typename T > void foo ( T && arg ) { cout << \"foo(T&& arg)\" << endl ; } \u5b83\u65e2\u53ef\u4ee5\u5339\u914d\u5de6\u503c\uff0c\u53c8\u53ef\u4ee5\u5339\u914d\u53f3\u503c\uff1a int main () { int value = 5 ; foo ( 5 ); // \u53ef\u4ee5 foo ( value ); // \u53ef\u4ee5 } \u90a3\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u795e\u5947\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u65e2\u5339\u914d\u5de6\u503c\uff0c\u53c8\u5339\u914d\u53f3\u503c\u5462\uff0c\u5176\u5b9e\u662f\u56e0\u4e3a C++11 \u5f15\u5165\u4e86\u5f15\u7528\u6298\u53e0\u3002 \u5f15\u7528\u6298\u53e0 \u00b6 \u5728 C++11 \u4e4b\u524d\uff0c\u662f\u4e0d\u5141\u8bb8\u5f15\u7528\u7684\u5f15\u7528\u5b58\u5728\u7684\u3002\u4f46\u662f C++11 \u4e4b\u540e\uff0c\u5f15\u7528\u7684\u5f15\u7528\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u5141\u8bb8\u5b58\u5728\uff0c\u4ed6\u4eec\u4f1a\u5728\u7f16\u8bd1\u65f6\uff0c\u88ab\u81ea\u52a8\u5316\u7b80\u4e3a\u5de6\u503c\u5f15\u7528\u6216\u8005\u53f3\u503c\u5f15\u7528\uff0c\u5316\u7b80\u7684\u8fc7\u7a0b\u79f0\u4e3a \u5f15\u7528\u6298\u53e0 \u3002 \u5316\u7b80\u7684\u89c4\u5219\u5982\u4e0b\uff1a T & & => T & T && & => T & T & && => T & T && && => T && \u5b83\u662f\u600e\u4e48\u5728\u201c\u4e07\u80fd\u5f15\u7528\u201d\u4e2d\u53d1\u6325\u4f5c\u7528\u7684\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a C++ \u91cc\u89c4\u5b9a\u4e86\u4e07\u80fd\u5f15\u7528\uff08\u6a21\u677f\uff09\u88ab\u8c03\u7528\u65f6\uff0c\u6a21\u677f\u53c2\u6570\u7684\u5c55\u5f00\u89c4\u5219\u5982\u4e0b\uff1a \u5f53 foo \u8c03\u7528\u65f6\u5b9e\u53c2\u4e3a\u7c7b\u578bT\u7684\u5de6\u503c\uff0c\u90a3\u4e48\u6a21\u677fT\u4f1a\u88ab\u5c55\u5f00\u4e3a T& \u5f53 foo \u8c03\u7528\u65f6\u5b9e\u53c2\u4e3a\u7c7b\u578bT\u7684\u53f3\u503c\uff0c\u90a3\u4e48\u6a21\u677fT\u4f1a\u88ab\u5c55\u5f00\u4e3a T \u6211\u4eec\u56de\u987e\u6211\u4eec\u521a\u624d\u7684\u4ee3\u7801\uff1a template < typename T > void foo ( T && arg ) { cout << \"foo(T&& arg)\" << endl ; } int main () { int value = 5 ; foo ( value ); // \u5de6\u503c\uff0c\u6a21\u677fT \u88ab\u5c55\u5f00\u4e3a int& foo ( 5 ); // \u53f3\u503c\uff0c\u6a21\u677fT \u88ab\u5c55\u5f00\u4e3a int } \u6240\u4ee5\u5f53 foo(value) \u8c03\u7528\u65f6\uff0c void foo(T&& arg) \u4e2d\u7684 T \u4f1a\u88ab\u5c55\u5f00\u4e3a int& \uff0c\u51fd\u6570\u88ab\u5c55\u5f00\u4e3a void foo(int& && arg) \uff0c\u7ecf\u8fc7\u5f15\u7528\u6298\u53e0\uff0c\u5f97\u5230\u7684\u662f void foo(int& arg) \uff0c\u5339\u914d\u5de6\u503c\u3002 \u7c7b\u4f3c\u7684\uff0c\u5f53 foo(5) \u8c03\u7528\u65f6\uff0c void foo(T&& arg) \u4e2d\u7684 T \u4f1a\u88ab\u5c55\u5f00\u4e3a int \uff0c\u51fd\u6570\u88ab\u5c55\u5f00\u4e3a void foo(int && arg) \uff0c\u5339\u914d\u53f3\u503c\u3002 std::forward \u7684\u539f\u7406\u5256\u6790 \u00b6 \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6765\u67e5\u770b std::forward \u4e2d\u7684\u5b9e\u73b0\u539f\u7406\u4e86\u3002\u67e5\u770b\u5e93\u51fd\u6570\u4e2d\u7684\u539f\u59cb\u5b9e\u73b0\uff1a template < typename _Tp > constexpr _Tp && forward ( typename std :: remove_reference < _Tp >:: type & __t ) noexcept { return static_cast < _Tp &&> ( __t ); } template < typename _Tp > constexpr _Tp && forward ( typename std :: remove_reference < _Tp >:: type && __t ) noexcept { static_assert ( ! std :: is_lvalue_reference < _Tp >:: value , \"template argument\" \" substituting _Tp is an lvalue reference type\" ); return static_cast < _Tp &&> ( __t ); } \u4e0e\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7c7b\u4f3c\uff0c\u53bb\u6389 constexpr \u3001 static_assert \u3001 noexcept \u8fd9\u4e9b\u975e\u6838\u5fc3\u91cd\u70b9\uff0c\u4ee5\u53ca\u7b80\u5316\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u8fc7\u7684 remove_reference \u4e4b\u540e\uff1a template < typename _Tp > _Tp && forward ( _TP & __t ) { return static_cast < _Tp &&> ( __t ); } template < typename _Tp > _Tp && forward ( _TP && __t ){ return static_cast < _Tp &&> ( __t ); } \u5f53 forward \u8c03\u7528\u65f6\u4f20\u9012\u7684\u662f\u5de6\u503c\u65f6\uff0c\u4f1a\u5339\u914d\u6a21\u677f\u7279\u4f8b\uff1a template < typename _Tp > _Tp && forward ( _TP & __t ) { return static_cast < _Tp &&> ( __t ); } _TP \u4f1a\u88ab\u5c55\u5f00\u4e3a T& \uff1a T & && forward ( T & & __t ) { return static_cast < T & &&> ( __t ); } \u7ecf\u5f15\u7528\u6298\u53e0\u540e\u5f97\u5230\uff1a T & forward ( T & __t ) { return static_cast < T &> ( __t ); } \u4e5f\u5c31\u8bf4\u628a __t \u8f6c\u4e3a\u5de6\u503c\u5f15\u7528\u7c7b\u578b\u540e\u8fd4\u56de\u3002 \u7c7b\u4f3c\u5730\uff0c\u5982\u679c forward \u8c03\u7528\u65f6\u4f20\u9012\u7684\u662f\u53f3\u503c\u65f6\uff0c\u90a3\u4e48\u4f1a\u5339\u914d\u6a21\u677f\u7279\u4f8b\uff1a template < typename _Tp > _Tp && forward ( _TP && __t ){ return static_cast < _Tp &&> ( __t ); } _TP \u4f1a\u88ab\u5c55\u5f00\u4e3a T \uff1a T && forward ( T && __t ){ return static_cast < T &&> ( __t ); } \u4e5f\u5c31\u8bf4\u628a __t \u8f6c\u4e3a\u53f3\u503c\u5f15\u7528\u7c7b\u578b\u540e\u8fd4\u56de\u3002","title":"\u5b8c\u7f8e\u8f6c\u53d1"},{"location":"learn_cpp/02_forward.html#_1","text":"\u73b0\u4ee3 C++ \u9879\u76ee\u7684\u6e90\u7801\u4e2d\uff0c\u5e38\u5e38\u4f1a\u4f7f\u7528 std::forward \u51fd\u6570\u3002\u5b83\u662f C++ \u6807\u51c6\u5e93\u4e2d\u7684\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u51fd\u6570\u3002 \u672c\u6587\u4f1a\u4ecb\u7ecd\uff1a \u4ec0\u4e48\u662f\u5b8c\u7f8e\u8f6c\u53d1 \u4e07\u80fd\u5f15\u7528 std::forward \u539f\u7406\u5256\u6790","title":"\u5b8c\u7f8e\u8f6c\u53d1"},{"location":"learn_cpp/02_forward.html#_2","text":"\u5728\u67d0\u4e9b\u4ee3\u7801\u573a\u666f\u6216\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\uff0c\u4f1a\u51fa\u73b0\u53c2\u6570\u8f6c\u53d1\u7684\u9700\u6c42\u3002 \u6bd4\u5982\uff0c\u4ee5\u4e0b\u7684\u5de5\u5382\u6a21\u5f0f\uff0c\u5f88\u663e\u7136\u662f\u60f3\u901a\u8fc7 factory \u51fd\u6570\u628a\u53c2\u6570\uff0c\u4f20\u9012\u7ed9 T \u7684\u6784\u9020\u3002 template < typename T , typename Arg > shared_ptr < T > factory ( Arg arg ) { return shared_ptr < T > ( new T ( arg )); } \u6700\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b factory \u51fd\u6570\u5c31\u50cf\u4e0d\u5b58\u5728\u4e00\u6837\uff0c T \u7684\u6784\u9020\u5c31\u50cf\u88ab\u76f4\u63a5\u8c03\u7528\u4e00\u6837\u3002\u4e0d\u4e25\u8c28\u5730\u8bf4\uff08\u4e25\u8c28\u7684\u5b9a\u4e49\u5728\u4e0b\u6587\u4e2d\uff09\uff0c\u8fd9\u5c31\u662f\u5b8c\u7f8e\u8f6c\u53d1\u3002","title":"\u4ec0\u4e48\u662f\u5b8c\u7f8e\u8f6c\u53d1"},{"location":"learn_cpp/02_forward.html#i","text":"\u7136\u800c\uff0c\u4ee5\u4e0a\u7684\u4ee3\u7801\u5e76\u4e0d\u5b8c\u7f8e\uff1a factory \u51fd\u6570\u7684\u53c2\u6570\u662f\u503c\u4f20\u9012\u7684\uff0c factory \u51fd\u6570\u8c03\u7528\u65f6\uff0c\u4f1a\u5148\u53d1\u751f\u4e00\u6b21\u53c2\u6570\u62f7\u8d1d\uff0c\u8fd9\u6837\u6709\u6027\u80fd\u4ee3\u4ef7\u3002 \u90a3\u81ea\u7136\u4f1a\u6709\u4eba\u60f3\u5230\uff0c\u53ef\u4ee5\u4e0d\u505a\u503c\u4f20\u9012\uff0c\u6539\u6210\u5f15\u7528\u4f20\u9012\uff0c\u63d0\u9ad8\u6027\u80fd\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg & arg /*\u6539\u6210\uff08\u5de6\u503c\uff09\u5f15\u7528*/ ) { return shared_ptr < T > ( new T ( arg )); } \u4f46\u662f\uff0c\u4ee5\u4e0a\u7684\u4ee3\u7801\u4e5f\u4e0d\u201c\u5b8c\u7f8e\u201d\uff0c\u9996\u5148\u7684\u95ee\u9898\u662f factory \u8c03\u7528\u65f6\uff0c\u65e0\u6cd5\u4f20\u9012\u53f3\u503c\uff1a factory < Foo , int > ( 5 /*\u53f3\u503c*/ ); //\u51fa\u9519\uff0c\u65e0\u6cd5\u4f20\u9012\u53f3\u503c \u867d\u7136\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 const \u5f15\u7528\uff08\u52c9\u5f3a\uff09\u89e3\u51b3\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg const & arg ) { return shared_ptr < T > ( new T ( arg )); } \u4f46\u662f\u5b83\u5e76\u4e0d\u4f18\u96c5\uff0c\u5f53\u6709\u591a\u4e2a\u5f62\u53c2\u65f6\uff0c\u7528\u8fd9\u79cd\u65b9\u6cd5\u89e3\u51b3\u53f3\u503c\u4f20\u9012\u7684\u95ee\u9898\uff0c\u9700\u8981\u4e3a\u6bcf\u4e2a\u5f62\u53c2\u5b9e\u73b0 const \u548c\u975e cosnt \u7248\u672c\uff0c\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u6392\u5217\u7ec4\u5408\u95ee\u9898\u3002 \u6bd4\u5982\uff0c\u5047\u8bbe factory \u6709\u4e09\u4e2a\u5f62\u53c2\uff0c\u90a3\u4e48\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u7684\u91cd\u8f7d\uff1a factory ( const T & , const T & , const T & ); factory ( T & , const T & , const T & ); factory ( const T & , T & , const T & ); factory ( const T & , const T & , T & ); factory ( const T & , T & , T & ); factory ( T & , const T & , T & ); factory ( T & , T & , const T & ); factory ( T & , T & , T & );","title":"\u8f6c\u53d1\u53c2\u6570\u7684\u7a98\u5883 I"},{"location":"learn_cpp/02_forward.html#ii","text":"\u5176\u6b21\uff0c\u8fd9\u79cd\u65b9\u5f0f \u66f4\u672c\u8d28\u7684\u7f3a\u70b9 \u662f\uff1a factory \u5185\u90e8\uff0c\u56e0\u4e3a arg \u4e00\u5b9a\u662f\u5de6\u503c\uff0c\u65e0\u6cd5\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49\uff1a template < typename T , typename Arg > shared_ptr < T > factory ( Arg const & arg ) { return shared_ptr < T > ( new T ( arg /* arg \u6709\u540d\u5b57\uff0c\u4e00\u5b9a\u662f\u5de6\u503c\uff0c\u65e0\u6cd5\u89e6\u53d1\u79fb\u52a8\u8bed\u4e49*/ )); }","title":"\u8f6c\u53d1\u7684\u7a98\u5883 II"},{"location":"learn_cpp/02_forward.html#stdforward","text":"\u6211\u4eec\u4e4b\u524d\u6bd4\u8f83\u53cb\u597d\u4f46\u662f\u4e0d\u4e25\u8c28\u5730\u5b9a\u4e49\u4e86\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u662f\u201c\u5916\u5c42 warpper\uff08 factory \u51fd\u6570\uff09\u5c31\u50cf\u4e0d\u5b58\u5728\uff0c\u5185\u5c42\u51fd\u6570\u50cf\u662f\u88ab\u76f4\u63a5\u8c03\u7528\u4e00\u6837\u201d\u3002 \u5b8c\u7f8e\u8f6c\u53d1\u7684\u4e25\u8c28\u5b9a\u4e49\u5176\u5b9e\u5e94\u8be5\u662f\uff1a \u8c03\u7528 wrapper \uff08 factory \uff09\u65f6\u4f20\u9012\u7684\u662f\u5de6\u503c\uff0c\u5185\u5c42\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u5f97\u5230\u7684\u5c31\u662f\u5de6\u503c \u8c03\u7528 wrapper \uff08 factory \uff09\u65f6\u4f20\u9012\u7684\u662f\u53f3\u503c\uff0c\u5185\u5c42\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u5f97\u5230\u7684\u5c31\u662f\u53f3\u503c \u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u4eec\u4f7f\u7528 std::forward \u5c31\u53ef\u4ee5\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\u3002 \u770b\u4ee5\u4e0b\u7684\u4f8b\u5b50\uff1a #include <iostream> #include <utility> #include <memory> using namespace std ; class CBase { public : CBase ( int & ){ cout << \"CBase(int&)\" << endl ; } CBase ( int && ){ cout << \"CBase(int&&)\" << endl ; } }; template < typename T , typename Arg > shared_ptr < T > facotry ( Arg && arg ){ return shared_ptr < T > ( new T ( std :: forward < Arg > ( arg ))); } int main () { int value = 5 ; auto p1 = facotry < CBase > ( 5 ); auto p2 = facotry < CBase > ( value ); } \u4f1a\u8f93\u51fa\uff1a CBase ( int &&) # \u5bf9\u5e94\u4e86 facotry<CBase>(5); CBase ( int & ) # \u5bf9\u5e94\u4e86 facotry<CBase>(value); \u8fd9\u8bf4\u660e forward \u786e\u5b9e\u201c\u5b8c\u7f8e\u8f6c\u53d1\u201d\u4e86\u53c2\u6570\uff1a \u5f53\u8c03\u7528 facotry<CBase>(5) \u65f6\uff0c 5 \u662f\u53f3\u503c\uff0c\u4f20\u9012\u7ed9 new T(std::forward<Arg>(arg)) \u7684\u4e5f\u662f\u53f3\u503c\uff0c\u6700\u7ec8\u89e6\u53d1\u7684\u662f CBase(int&&) \u5f53\u8c03\u7528 facotry<CBase>(value) \u65f6\uff0c value \u662f\u5de6\u503c\uff0c\u4f20\u9012\u7ed9 new T(std::forward<Arg>(arg)) \u7684\u4e5f\u662f\u5de6\u503c\uff0c\u6700\u7ec8\u89e6\u53d1\u7684\u662f CBase(int&) \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u7b49\u6211\u4eec\u5b66\u4e60\u4e86\u201c\u4e07\u80fd\u5f15\u7528\u201d\u548c\u201c\u5f15\u7528\u6298\u53e0\u201d\u540e\uff0c\u5c31\u53ef\u4ee5\u5256\u6790 std::forward \u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u3002","title":"\u5b8c\u7f8e\u8f6c\u53d1 std::forward"},{"location":"learn_cpp/02_forward.html#stdforward_1","text":"\u8981\u89e3\u8bfb std::forward \u5185\u90e8\u4ee3\u7801\u5b9e\u73b0\uff0c\u9700\u8981\u5148\u638c\u63e1 \u4e07\u80fd\u5f15\u7528 \u548c \u5f15\u7528\u6298\u53e0 \u7684\u77e5\u8bc6\u3002","title":"std::forward \u4ee3\u7801\u5256\u6790"},{"location":"learn_cpp/02_forward.html#_3","text":"\u5bf9\u4e8e\u4e00\u4e2a\u666e\u901a\u51fd\u6570\uff0c\u5b83\u7684\u5f62\u53c2\uff0c\u8981\u4e48\u63a5\u53d7\u5de6\u503c\u3001\u8981\u4e48\u63a5\u53d7\u53f3\u503c\u7c7b\u578b\u3002\u5c31\u50cf\u6211\u4eec\u8fd9\u91cc\u7684 foo1 \u53ea\u80fd\u63a5\u6536\u5de6\u503c\uff1b foo2 \u53ea\u80fd\u63a5\u6536\u53f3\u503c\u3002 #include <iostream> #include <utility> #include <memory> using namespace std ; void foo1 ( int & ){ cout << \"foo(int&)\" << endl ; } void foo2 ( int && ){ cout << \"foo(int&&)\" << endl ; } int main () { int value = 5 ; foo1 ( 5 ); // \u9519 foo1 ( value ); // \u5bf9 foo2 ( 5 ); // \u5bf9 foo2 ( value ); // \u9519 } \u4f46\u662f\uff0c\u4ece C++11 \u5f00\u59cb\uff0c\u89c4\u5b9a\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u5f62\u5f0f\u4e0b\uff0c\u51fd\u6570\u5f62\u53c2\u65e2\u53ef\u4ee5\u5339\u914d\u5de6\u503c\uff0c\u4e5f\u53ef\u4ee5\u5339\u914d\u53f3\u503c\u3002 \u8fd9\u79cd\u60c5\u51b5\u5fc5\u987b\u662f\u6a21\u677f\u7684\u5f62\u5f0f\uff0c\u5e76\u4e14\u4ee5 && \u4f5c\u4e3a\u5f62\u53c2\u6570\u3002\u5b83\u88ab\u79f0\u4e3a\u201c\u4e07\u80fd\u5f15\u7528\u201d\uff08\u82f1\u6587\u4e3a universal reference \u6216 forwarding refference\uff09\u3002 \u4ee5\u4e0b\u7684 foo \u7684\u5f62\u53c2\u5c31\u662f\u201c\u4e07\u80fd\u5f15\u7528\u201d\uff1a template < typename T > void foo ( T && arg ) { cout << \"foo(T&& arg)\" << endl ; } \u5b83\u65e2\u53ef\u4ee5\u5339\u914d\u5de6\u503c\uff0c\u53c8\u53ef\u4ee5\u5339\u914d\u53f3\u503c\uff1a int main () { int value = 5 ; foo ( 5 ); // \u53ef\u4ee5 foo ( value ); // \u53ef\u4ee5 } \u90a3\u4e3a\u4ec0\u4e48\u8fd9\u79cd\u795e\u5947\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u65e2\u5339\u914d\u5de6\u503c\uff0c\u53c8\u5339\u914d\u53f3\u503c\u5462\uff0c\u5176\u5b9e\u662f\u56e0\u4e3a C++11 \u5f15\u5165\u4e86\u5f15\u7528\u6298\u53e0\u3002","title":"\u4e07\u80fd\u5f15\u7528"},{"location":"learn_cpp/02_forward.html#_4","text":"\u5728 C++11 \u4e4b\u524d\uff0c\u662f\u4e0d\u5141\u8bb8\u5f15\u7528\u7684\u5f15\u7528\u5b58\u5728\u7684\u3002\u4f46\u662f C++11 \u4e4b\u540e\uff0c\u5f15\u7528\u7684\u5f15\u7528\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u5141\u8bb8\u5b58\u5728\uff0c\u4ed6\u4eec\u4f1a\u5728\u7f16\u8bd1\u65f6\uff0c\u88ab\u81ea\u52a8\u5316\u7b80\u4e3a\u5de6\u503c\u5f15\u7528\u6216\u8005\u53f3\u503c\u5f15\u7528\uff0c\u5316\u7b80\u7684\u8fc7\u7a0b\u79f0\u4e3a \u5f15\u7528\u6298\u53e0 \u3002 \u5316\u7b80\u7684\u89c4\u5219\u5982\u4e0b\uff1a T & & => T & T && & => T & T & && => T & T && && => T && \u5b83\u662f\u600e\u4e48\u5728\u201c\u4e07\u80fd\u5f15\u7528\u201d\u4e2d\u53d1\u6325\u4f5c\u7528\u7684\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a C++ \u91cc\u89c4\u5b9a\u4e86\u4e07\u80fd\u5f15\u7528\uff08\u6a21\u677f\uff09\u88ab\u8c03\u7528\u65f6\uff0c\u6a21\u677f\u53c2\u6570\u7684\u5c55\u5f00\u89c4\u5219\u5982\u4e0b\uff1a \u5f53 foo \u8c03\u7528\u65f6\u5b9e\u53c2\u4e3a\u7c7b\u578bT\u7684\u5de6\u503c\uff0c\u90a3\u4e48\u6a21\u677fT\u4f1a\u88ab\u5c55\u5f00\u4e3a T& \u5f53 foo \u8c03\u7528\u65f6\u5b9e\u53c2\u4e3a\u7c7b\u578bT\u7684\u53f3\u503c\uff0c\u90a3\u4e48\u6a21\u677fT\u4f1a\u88ab\u5c55\u5f00\u4e3a T \u6211\u4eec\u56de\u987e\u6211\u4eec\u521a\u624d\u7684\u4ee3\u7801\uff1a template < typename T > void foo ( T && arg ) { cout << \"foo(T&& arg)\" << endl ; } int main () { int value = 5 ; foo ( value ); // \u5de6\u503c\uff0c\u6a21\u677fT \u88ab\u5c55\u5f00\u4e3a int& foo ( 5 ); // \u53f3\u503c\uff0c\u6a21\u677fT \u88ab\u5c55\u5f00\u4e3a int } \u6240\u4ee5\u5f53 foo(value) \u8c03\u7528\u65f6\uff0c void foo(T&& arg) \u4e2d\u7684 T \u4f1a\u88ab\u5c55\u5f00\u4e3a int& \uff0c\u51fd\u6570\u88ab\u5c55\u5f00\u4e3a void foo(int& && arg) \uff0c\u7ecf\u8fc7\u5f15\u7528\u6298\u53e0\uff0c\u5f97\u5230\u7684\u662f void foo(int& arg) \uff0c\u5339\u914d\u5de6\u503c\u3002 \u7c7b\u4f3c\u7684\uff0c\u5f53 foo(5) \u8c03\u7528\u65f6\uff0c void foo(T&& arg) \u4e2d\u7684 T \u4f1a\u88ab\u5c55\u5f00\u4e3a int \uff0c\u51fd\u6570\u88ab\u5c55\u5f00\u4e3a void foo(int && arg) \uff0c\u5339\u914d\u53f3\u503c\u3002","title":"\u5f15\u7528\u6298\u53e0"},{"location":"learn_cpp/02_forward.html#stdforward_2","text":"\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6765\u67e5\u770b std::forward \u4e2d\u7684\u5b9e\u73b0\u539f\u7406\u4e86\u3002\u67e5\u770b\u5e93\u51fd\u6570\u4e2d\u7684\u539f\u59cb\u5b9e\u73b0\uff1a template < typename _Tp > constexpr _Tp && forward ( typename std :: remove_reference < _Tp >:: type & __t ) noexcept { return static_cast < _Tp &&> ( __t ); } template < typename _Tp > constexpr _Tp && forward ( typename std :: remove_reference < _Tp >:: type && __t ) noexcept { static_assert ( ! std :: is_lvalue_reference < _Tp >:: value , \"template argument\" \" substituting _Tp is an lvalue reference type\" ); return static_cast < _Tp &&> ( __t ); } \u4e0e\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7c7b\u4f3c\uff0c\u53bb\u6389 constexpr \u3001 static_assert \u3001 noexcept \u8fd9\u4e9b\u975e\u6838\u5fc3\u91cd\u70b9\uff0c\u4ee5\u53ca\u7b80\u5316\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4ecb\u7ecd\u8fc7\u7684 remove_reference \u4e4b\u540e\uff1a template < typename _Tp > _Tp && forward ( _TP & __t ) { return static_cast < _Tp &&> ( __t ); } template < typename _Tp > _Tp && forward ( _TP && __t ){ return static_cast < _Tp &&> ( __t ); } \u5f53 forward \u8c03\u7528\u65f6\u4f20\u9012\u7684\u662f\u5de6\u503c\u65f6\uff0c\u4f1a\u5339\u914d\u6a21\u677f\u7279\u4f8b\uff1a template < typename _Tp > _Tp && forward ( _TP & __t ) { return static_cast < _Tp &&> ( __t ); } _TP \u4f1a\u88ab\u5c55\u5f00\u4e3a T& \uff1a T & && forward ( T & & __t ) { return static_cast < T & &&> ( __t ); } \u7ecf\u5f15\u7528\u6298\u53e0\u540e\u5f97\u5230\uff1a T & forward ( T & __t ) { return static_cast < T &> ( __t ); } \u4e5f\u5c31\u8bf4\u628a __t \u8f6c\u4e3a\u5de6\u503c\u5f15\u7528\u7c7b\u578b\u540e\u8fd4\u56de\u3002 \u7c7b\u4f3c\u5730\uff0c\u5982\u679c forward \u8c03\u7528\u65f6\u4f20\u9012\u7684\u662f\u53f3\u503c\u65f6\uff0c\u90a3\u4e48\u4f1a\u5339\u914d\u6a21\u677f\u7279\u4f8b\uff1a template < typename _Tp > _Tp && forward ( _TP && __t ){ return static_cast < _Tp &&> ( __t ); } _TP \u4f1a\u88ab\u5c55\u5f00\u4e3a T \uff1a T && forward ( T && __t ){ return static_cast < T &&> ( __t ); } \u4e5f\u5c31\u8bf4\u628a __t \u8f6c\u4e3a\u53f3\u503c\u5f15\u7528\u7c7b\u578b\u540e\u8fd4\u56de\u3002","title":"std::forward \u7684\u539f\u7406\u5256\u6790"},{"location":"learn_cpp/03_varadic_template.html","text":"\u53ef\u53d8\u53c2\u6a21\u677f \u00b6 \u4ec0\u4e48\u662f\u53ef\u53d8\u53c2 \u00b6 \u5728\u4ecb\u7ecd\u53d8\u53c2\u6a21\u677f\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8bb2\u4e0b\uff08\u53ef\uff09\u53d8\u53c2\u51fd\u6570\uff0c\u4ed6\u4eec\u4e24\u8005\u867d\u7136\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\uff0c \u4f46\u662f\u6709\u7c7b\u4f3c\u7684\u76f4\u89c2\u8ba4\u8bc6\u3002 \u4ec0\u4e48\u662f\u53d8\u53c2\u51fd\u6570\u5462\uff0c\u5b66\u8fc7 C \u8bed\u8a00\u7684\u4eba\uff0c\u4e0d\u4e00\u5b9a\u542c\u8bf4\u8fc7\u8fd9\u4e2a\u540d\u5b57\uff0c\u4f46\u4e00\u5b9a\u5df2\u7ecf\u7528\u8fc7\u53d8\u53c2\u51fd\u6570\u3002\u56e0\u4e3a printf \u5c31\u662f\u53d8\u53c2\u51fd\u6570\u3002 \u6240\u8c13\u53d8\u53c2\u51fd\u6570\uff0c\u5c31\u662f\u8c03\u7528\u65f6\u4f20\u9012\u7684\u53c2\u6570\u4e2a\u6570\u662f\u53ef\u4ee5\u53d8\u5316\u7684\u3002\u6bd4\u5982 printf \uff1a printf ( \"%d, %d\" , 10 , 20 ); printf ( \"%d, %d, %d\" , 10 , 20 , 30 ); \u800c\u6211\u4eec\u5b9a\u4e49\u7684\u666e\u901a\u51fd\u6570\u5374\u4e0d\u80fd\u8fd9\u6837\uff0c\u53c2\u6570\u4e2a\u6570\u662f\u786e\u5b9a\u7684\uff1a int foo ( int , int ); // \u53ea\u80fd2\u4e2a\u53c2\u6570 int foo ( int , int , int ); // \u53ea\u80fd\u4e09\u4e2a\u53c2\u6570 \u81f3\u4e8e\u600e\u4e48\u5b9e\u73b0\u53d8\u53c2\u51fd\u6570\uff0c\u4e0d\u662f\u672c\u6587\u91cd\u70b9\uff0c\u6211\u4eec\u5c31\u8df3\u8fc7\u4e86\u3002\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u53d8\u53c2\u51fd\u6570 + va_start \u5173\u952e\u5b57\u5f97\u5230\u7b54\u6848\u3002 \u53d8\u53c2\u6a21\u677f\u57fa\u672c\u8bed\u6cd5 \u00b6 \u6240\u8c13\u7684\u53d8\u53c2\u6a21\u677f\uff0c\u5b9e\u73b0\u539f\u7406\u548c\u53d8\u53c2\u51fd\u6570\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u53d8\u53c2\u51fd\u6570\u662f\u8fd0\u884c\u65f6\u89e3\u6790\u6808\u6765\u8fbe\u5230\u53ef\u53d8\u53c2\u7684\u76ee\u7684\u3002 \u800c\u53ef\u53d8\u53c2\u6a21\u677f\u662f\u7f16\u8bd1\u65f6\u901a\u8fc7\u6a21\u677f\u5c55\u5f00\u8fbe\u5230\u76ee\u7684\u7684\uff0c\u6ca1\u6709\u8fd0\u884c\u65f6\u7684\u989d\u5916\u6027\u80fd\u635f\u5931\u3002 \u4f46\u4e24\u8005\u7684\u76f4\u89c2\u6548\u679c\u662f\u7c7b\u4f3c\u7684\uff0c\u90fd\u53ef\u4ee5\u5b9a\u4e49\u51fd\u6570\u6216\u8005\u7c7b\u65b9\u6cd5\uff0c\u63a5\u6536\u4efb\u610f\u4e2a\u6570\u7684\u53c2\u6570\u3002 \u53d8\u53c2\u6a21\u677f\u7684\u5b9e\u4f8b \u00b6 \u8ba9\u6211\u4eec\u5148\u4ece\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u770b\u770b\u53d8\u53c2\u6a21\u677f\u7684\u8bed\u6cd5\u3002 template < typename ... Args > void fun ( Args ... args ){ } int main ( int argc , char * argv []) { fun ( 1 , 3.5 , \"hello\" ); fun ( 1 , 2 ); fun ( 1 ); return 0 ; } \u4ee5\u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u53c2\u6a21\u677f\u3002\u6211\u4eec\u6765\u8c03\u7528\u5b83\u4f1a\u53d1\u73b0\uff0c\u65e0\u8bba\u662f\u4f20\u90123\u4e2a\u53c2\u6570\u30012\u4e2a\u53c2\u6570\u8fd8\u662f1\u4e2a\u53c2\u6570\uff0c\u90fd\u662f\u53ef\u4ee5\u7684\u3002\u751a\u81f3\u53c2\u6570\u7c7b\u578b\u4e0d\u4e00\u81f4\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u7b80\u5355\u4f8b\u5b50\uff0c\u6211\u4eec\u603b\u7ed3\u4e0b\u53d8\u53c2\u6a21\u677f\u7684\u57fa\u672c\u8bed\u6cd5\uff0c\u4f1a\u53d1\u73b0\u5173\u952e\u70b9\u662f\u4e24\u4e2a\uff1a \u4f7f\u7528 typename... \u4fee\u9970\u6a21\u677f\u53c2\u6570\uff0c\u5927\u5bb6\u5176\u5b9e\u53ef\u4ee5\u628a\u5b83\u7b80\u5355\u7406\u89e3\u6210 typename \u4e4b\u5916\u7684\u65b0\u5173\u952e\u5b57\uff0c\u4e13\u95e8\u7528\u4e8e\u4fee\u9970\u53d8\u53c2\u6a21\u677f\u7684\u6a21\u677f\u53c2\u6570 Args... args \uff0c\u8fd9\u5176\u5b9e\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u8fd9\u4e2a\u51fd\u6570\uff0c\u53c2\u6570\u4e2a\u6570\u662f\u53ef\u53d8\u7684 \u53ef\u53d8\u53c2\u6a21\u677f\u7684\u8bed\u6cd5\u8fd8\u662f\u5f88\u7b80\u5355\u7684\u3002\u4e0d\u8fc7\uff0c\u867d\u7136\u6211\u4eec\u7528\u53d8\u53c2\u6a21\u677f\u5b9e\u73b0\u4e86\u51fd\u6570\uff0c\u8c03\u7528\u65f6\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u5374\u5e76\u6ca1\u6709\u4f7f\u7528\u53c2\u6570\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b9a\u4e49\u7684\u51fd\u6570\u4e00\u70b9\u7528\u90fd\u6ca1\u6709\u3002 \u6211\u4eec\u63a5\u7740\u8981\u770b\u53ef\u53d8\u53c2\u6a21\u677f\u51fd\u6570\u5185\u90e8\uff0c\u5982\u4f55\u4f7f\u7528\u53c2\u6570\u3002 \u6253\u5370\u4efb\u610f\u4e2a\u53c2\u6570 \u00b6 \u6211\u4eec\u5148\u770b\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\u3002\u5982\u4f55\u4f7f\u7528\u53d8\u53c2\u6a21\u677f\u201c\u9012\u5f52\u201d\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u6253\u5370\u4efb\u610f\u591a\u4e2a\u53c2\u6570\u7684 myprint \u3002 #include <iostream> void myprint (){ } template < typename T , typename ... Args > void myprint ( T firstArg , Args ... args ){ std :: cout << firstArg << std :: endl ; // \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 myprint ( args ...); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } int main ( int argc , char * argv []){ myprint ( 1 , 3.14 , \"hello\" ); return 0 ; } \u6211\u4eec\u6682\u65f6\u4e0d\u7528\u7ea0\u7ed3\u7ec6\u8282\uff0c\u53ea\u8981\u77e5\u9053\u5176\u4e2d\u7684\u5173\u952e\u70b9\u662f\uff1a Args... \u548c args... \u3002\u5b83\u4eec\u662f\u5f88\u91cd\u8981\u7684\u64cd\u4f5c\uff0c\u79f0\u4e3a \u89e3\u5305 \uff08pack expansion\uff09\u3002\u4e5f\u5c31\u662f\u6839\u636e\u8c03\u7528\u65f6\u7684\u60c5\u51b5\uff0c\u628a\u6253\u5305\u597d\u7684\u53c2\u6570\u5c55\u5f00\u3002 \u76f4\u63a5\u89e3\u91ca myprint \u7684\u5de5\u4f5c\u539f\u7406\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u4eec\u5148\u901a\u8fc7 myprint \u7684\u6a21\u677f\u5c55\u5f00\u8fc7\u7a0b\u4e86\u89e3\u89e3\u5305\u64cd\u4f5c\u3002 myprint \u7684\u5c55\u5f00\u8fc7\u7a0b \u00b6 \u5f53 myprint \u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\uff08\u5373 myprint(1, 3.14, \"hello\"); \uff09\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570 1 \uff0c\u4f1a\u88ab\u63a8\u5bfc\u6210 int \u7c7b\u578b\uff0c 3.14 \u88ab\u63a8\u5bfc\u6210 double \u7c7b\u578b\uff0c \"Hello\" \u88ab\u63a8\u5bfc\u6210 const char* \u7c7b\u578b\uff0c myprint \u6a21\u677f\u88ab\u66ff\u6362\u6210\u4e86\u8fd9\u4e2a\u51fd\u6570\uff1a //\u7b2c\u4e00\u6b21\u8c03\u7528\uff1a myprint(1, 3.14, \"hello\"); void myprint ( int firstArg , double E1 , const char * E2 /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=1 \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...); //E1=3.14 E2=\"hello\" myprint ( E1 , E2 ); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u7c7b\u4f3c\u7684\uff0c\u4ee5\u4e0a myprint(E1,E2); \u4f1a\u88ab\u81ea\u52a8\u63a8\u5bfc\u7c7b\u578b\uff0c\u5e76\u5c55\u5f00\u4e3a\u5982\u4e0b\u51fd\u6570\uff1a //\u7b2c\u4e8c\u6b21\u8c03\u7528\uff1a myprint(3.14, \"hello\"); void myprint ( double firstArg , const char * E1 /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=3.14 \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...);E1=\"hello\" myprint ( E1 ); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u7ee7\u7eed\uff0c myprint(E1); \u4f1a\u88ab\u5c55\u5f00\u4e3a\uff1a //\u7b2c\u4e09\u6b21\u8c03\u7528\uff1a myprint(\"hello\"); void myprint ( const char * firstArg /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=\"hello\" \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...);E1=\u65e0\u53c2\u6570 myprint (); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e00\u6b21\u5c55\u5f00\uff0c\u5185\u90e8\u7684 myprint() \u5df2\u7ecf\u6ca1\u6709\u5b9e\u53c2\u4e86\uff0c\u8fd9\u4e5f\u662f\u5728\u6700\u521d\u7684\u5b9e\u73b0 myprit \u65f6\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u6ca1\u6709\u53c2\u6570\u7684 myprint \u7684\u539f\u56e0\uff1a void myprint (){ } sizeof... \u8fd0\u7b97\u7b26 \u00b6 \u53d8\u53c2\u6a21\u677f\u7684\u91cd\u70b9\u548c\u539f\u7406\uff0c\u57fa\u672c\u4ecb\u7ecd\u5b8c\u4e86\u3002\u8fd8\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u8fd0\u7b97\u7b26\u9700\u8981\u4e86\u89e3\uff1a sizeof... \u3002 \u5b83\u89e3\u51b3\u7684\u9700\u6c42\u662f\uff1a\u5e2e\u52a9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u77e5\u6653\uff0c\u51fd\u6570\u8c03\u7528\u65f6\u5177\u4f53\u6709\u51e0\u4e2a\u53c2\u6570\u3002 template < typename ... Args > void fun ( Args ... args ){ std :: cout << \"sizeof...(Args): \" << sizeof ...( Args ) << std :: endl ; std :: cout << \"sizeof...(args): \" << sizeof ...( args ) << std :: endl ; std :: cout << \"======================\" << std :: endl ; } int main ( int argc , char * argv []) { fun ( 1 , 3.5 , \"hello\" ); fun ( 1 , 2 ); fun ( 1 ); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a sizeof...(Args): 3 sizeof...(args): 3 ====================== sizeof...(Args): 2 sizeof...(args): 2 ====================== sizeof...(Args): 1 sizeof...(args): 1 ====================== \u603b\u7ed3 \u00b6 \u53d8\u53c2\u6a21\u677f\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u5176\u5b9e\u72ec\u7acb\u4f7f\u7528\u53d8\u53c2\u6a21\u677f\u7684\u573a\u666f\u5f88\u5c11\u3002\u4f46\u662f\u7ed3\u5408\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u5b8c\u7f8e\u8f6c\u53d1\uff0c\u5b83\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u201c\u521b\u9020\u7c7b\u201d\u7684\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u3002\u8fd9\u4e2a\u5728 OneFlow \u7684\u4ee3\u7801\u4ed3\u5e93\u4e2d\uff0c\u53ef\u4ee5\u627e\u5230\uff0c\u6bd4\u5982 \u5355\u4f8b\u8bbe\u8ba1\u6a21\u5f0f \u3001 \u5de5\u5382\u8bbe\u8ba1\u6a21\u5f0f \u3002 \u6269\u5c55\u9605\u8bfb \u00b6 parameter pack","title":"\u53ef\u53d8\u53c2\u6a21\u677f"},{"location":"learn_cpp/03_varadic_template.html#_1","text":"","title":"\u53ef\u53d8\u53c2\u6a21\u677f"},{"location":"learn_cpp/03_varadic_template.html#_2","text":"\u5728\u4ecb\u7ecd\u53d8\u53c2\u6a21\u677f\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u8bb2\u4e0b\uff08\u53ef\uff09\u53d8\u53c2\u51fd\u6570\uff0c\u4ed6\u4eec\u4e24\u8005\u867d\u7136\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\uff0c \u4f46\u662f\u6709\u7c7b\u4f3c\u7684\u76f4\u89c2\u8ba4\u8bc6\u3002 \u4ec0\u4e48\u662f\u53d8\u53c2\u51fd\u6570\u5462\uff0c\u5b66\u8fc7 C \u8bed\u8a00\u7684\u4eba\uff0c\u4e0d\u4e00\u5b9a\u542c\u8bf4\u8fc7\u8fd9\u4e2a\u540d\u5b57\uff0c\u4f46\u4e00\u5b9a\u5df2\u7ecf\u7528\u8fc7\u53d8\u53c2\u51fd\u6570\u3002\u56e0\u4e3a printf \u5c31\u662f\u53d8\u53c2\u51fd\u6570\u3002 \u6240\u8c13\u53d8\u53c2\u51fd\u6570\uff0c\u5c31\u662f\u8c03\u7528\u65f6\u4f20\u9012\u7684\u53c2\u6570\u4e2a\u6570\u662f\u53ef\u4ee5\u53d8\u5316\u7684\u3002\u6bd4\u5982 printf \uff1a printf ( \"%d, %d\" , 10 , 20 ); printf ( \"%d, %d, %d\" , 10 , 20 , 30 ); \u800c\u6211\u4eec\u5b9a\u4e49\u7684\u666e\u901a\u51fd\u6570\u5374\u4e0d\u80fd\u8fd9\u6837\uff0c\u53c2\u6570\u4e2a\u6570\u662f\u786e\u5b9a\u7684\uff1a int foo ( int , int ); // \u53ea\u80fd2\u4e2a\u53c2\u6570 int foo ( int , int , int ); // \u53ea\u80fd\u4e09\u4e2a\u53c2\u6570 \u81f3\u4e8e\u600e\u4e48\u5b9e\u73b0\u53d8\u53c2\u51fd\u6570\uff0c\u4e0d\u662f\u672c\u6587\u91cd\u70b9\uff0c\u6211\u4eec\u5c31\u8df3\u8fc7\u4e86\u3002\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u901a\u8fc7\u641c\u7d22\u53d8\u53c2\u51fd\u6570 + va_start \u5173\u952e\u5b57\u5f97\u5230\u7b54\u6848\u3002","title":"\u4ec0\u4e48\u662f\u53ef\u53d8\u53c2"},{"location":"learn_cpp/03_varadic_template.html#_3","text":"\u6240\u8c13\u7684\u53d8\u53c2\u6a21\u677f\uff0c\u5b9e\u73b0\u539f\u7406\u548c\u53d8\u53c2\u51fd\u6570\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u53d8\u53c2\u51fd\u6570\u662f\u8fd0\u884c\u65f6\u89e3\u6790\u6808\u6765\u8fbe\u5230\u53ef\u53d8\u53c2\u7684\u76ee\u7684\u3002 \u800c\u53ef\u53d8\u53c2\u6a21\u677f\u662f\u7f16\u8bd1\u65f6\u901a\u8fc7\u6a21\u677f\u5c55\u5f00\u8fbe\u5230\u76ee\u7684\u7684\uff0c\u6ca1\u6709\u8fd0\u884c\u65f6\u7684\u989d\u5916\u6027\u80fd\u635f\u5931\u3002 \u4f46\u4e24\u8005\u7684\u76f4\u89c2\u6548\u679c\u662f\u7c7b\u4f3c\u7684\uff0c\u90fd\u53ef\u4ee5\u5b9a\u4e49\u51fd\u6570\u6216\u8005\u7c7b\u65b9\u6cd5\uff0c\u63a5\u6536\u4efb\u610f\u4e2a\u6570\u7684\u53c2\u6570\u3002","title":"\u53d8\u53c2\u6a21\u677f\u57fa\u672c\u8bed\u6cd5"},{"location":"learn_cpp/03_varadic_template.html#_4","text":"\u8ba9\u6211\u4eec\u5148\u4ece\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u770b\u770b\u53d8\u53c2\u6a21\u677f\u7684\u8bed\u6cd5\u3002 template < typename ... Args > void fun ( Args ... args ){ } int main ( int argc , char * argv []) { fun ( 1 , 3.5 , \"hello\" ); fun ( 1 , 2 ); fun ( 1 ); return 0 ; } \u4ee5\u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u53c2\u6a21\u677f\u3002\u6211\u4eec\u6765\u8c03\u7528\u5b83\u4f1a\u53d1\u73b0\uff0c\u65e0\u8bba\u662f\u4f20\u90123\u4e2a\u53c2\u6570\u30012\u4e2a\u53c2\u6570\u8fd8\u662f1\u4e2a\u53c2\u6570\uff0c\u90fd\u662f\u53ef\u4ee5\u7684\u3002\u751a\u81f3\u53c2\u6570\u7c7b\u578b\u4e0d\u4e00\u81f4\u4e5f\u662f\u53ef\u4ee5\u7684\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u7b80\u5355\u4f8b\u5b50\uff0c\u6211\u4eec\u603b\u7ed3\u4e0b\u53d8\u53c2\u6a21\u677f\u7684\u57fa\u672c\u8bed\u6cd5\uff0c\u4f1a\u53d1\u73b0\u5173\u952e\u70b9\u662f\u4e24\u4e2a\uff1a \u4f7f\u7528 typename... \u4fee\u9970\u6a21\u677f\u53c2\u6570\uff0c\u5927\u5bb6\u5176\u5b9e\u53ef\u4ee5\u628a\u5b83\u7b80\u5355\u7406\u89e3\u6210 typename \u4e4b\u5916\u7684\u65b0\u5173\u952e\u5b57\uff0c\u4e13\u95e8\u7528\u4e8e\u4fee\u9970\u53d8\u53c2\u6a21\u677f\u7684\u6a21\u677f\u53c2\u6570 Args... args \uff0c\u8fd9\u5176\u5b9e\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u8fd9\u4e2a\u51fd\u6570\uff0c\u53c2\u6570\u4e2a\u6570\u662f\u53ef\u53d8\u7684 \u53ef\u53d8\u53c2\u6a21\u677f\u7684\u8bed\u6cd5\u8fd8\u662f\u5f88\u7b80\u5355\u7684\u3002\u4e0d\u8fc7\uff0c\u867d\u7136\u6211\u4eec\u7528\u53d8\u53c2\u6a21\u677f\u5b9e\u73b0\u4e86\u51fd\u6570\uff0c\u8c03\u7528\u65f6\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\u5374\u5e76\u6ca1\u6709\u4f7f\u7528\u53c2\u6570\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b9a\u4e49\u7684\u51fd\u6570\u4e00\u70b9\u7528\u90fd\u6ca1\u6709\u3002 \u6211\u4eec\u63a5\u7740\u8981\u770b\u53ef\u53d8\u53c2\u6a21\u677f\u51fd\u6570\u5185\u90e8\uff0c\u5982\u4f55\u4f7f\u7528\u53c2\u6570\u3002","title":"\u53d8\u53c2\u6a21\u677f\u7684\u5b9e\u4f8b"},{"location":"learn_cpp/03_varadic_template.html#_5","text":"\u6211\u4eec\u5148\u770b\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\u3002\u5982\u4f55\u4f7f\u7528\u53d8\u53c2\u6a21\u677f\u201c\u9012\u5f52\u201d\u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u6253\u5370\u4efb\u610f\u591a\u4e2a\u53c2\u6570\u7684 myprint \u3002 #include <iostream> void myprint (){ } template < typename T , typename ... Args > void myprint ( T firstArg , Args ... args ){ std :: cout << firstArg << std :: endl ; // \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 myprint ( args ...); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } int main ( int argc , char * argv []){ myprint ( 1 , 3.14 , \"hello\" ); return 0 ; } \u6211\u4eec\u6682\u65f6\u4e0d\u7528\u7ea0\u7ed3\u7ec6\u8282\uff0c\u53ea\u8981\u77e5\u9053\u5176\u4e2d\u7684\u5173\u952e\u70b9\u662f\uff1a Args... \u548c args... \u3002\u5b83\u4eec\u662f\u5f88\u91cd\u8981\u7684\u64cd\u4f5c\uff0c\u79f0\u4e3a \u89e3\u5305 \uff08pack expansion\uff09\u3002\u4e5f\u5c31\u662f\u6839\u636e\u8c03\u7528\u65f6\u7684\u60c5\u51b5\uff0c\u628a\u6253\u5305\u597d\u7684\u53c2\u6570\u5c55\u5f00\u3002 \u76f4\u63a5\u89e3\u91ca myprint \u7684\u5de5\u4f5c\u539f\u7406\u6bd4\u8f83\u590d\u6742\uff0c\u6211\u4eec\u5148\u901a\u8fc7 myprint \u7684\u6a21\u677f\u5c55\u5f00\u8fc7\u7a0b\u4e86\u89e3\u89e3\u5305\u64cd\u4f5c\u3002","title":"\u6253\u5370\u4efb\u610f\u4e2a\u53c2\u6570"},{"location":"learn_cpp/03_varadic_template.html#myprint","text":"\u5f53 myprint \u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\uff08\u5373 myprint(1, 3.14, \"hello\"); \uff09\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570 1 \uff0c\u4f1a\u88ab\u63a8\u5bfc\u6210 int \u7c7b\u578b\uff0c 3.14 \u88ab\u63a8\u5bfc\u6210 double \u7c7b\u578b\uff0c \"Hello\" \u88ab\u63a8\u5bfc\u6210 const char* \u7c7b\u578b\uff0c myprint \u6a21\u677f\u88ab\u66ff\u6362\u6210\u4e86\u8fd9\u4e2a\u51fd\u6570\uff1a //\u7b2c\u4e00\u6b21\u8c03\u7528\uff1a myprint(1, 3.14, \"hello\"); void myprint ( int firstArg , double E1 , const char * E2 /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=1 \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...); //E1=3.14 E2=\"hello\" myprint ( E1 , E2 ); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u7c7b\u4f3c\u7684\uff0c\u4ee5\u4e0a myprint(E1,E2); \u4f1a\u88ab\u81ea\u52a8\u63a8\u5bfc\u7c7b\u578b\uff0c\u5e76\u5c55\u5f00\u4e3a\u5982\u4e0b\u51fd\u6570\uff1a //\u7b2c\u4e8c\u6b21\u8c03\u7528\uff1a myprint(3.14, \"hello\"); void myprint ( double firstArg , const char * E1 /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=3.14 \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...);E1=\"hello\" myprint ( E1 ); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u7ee7\u7eed\uff0c myprint(E1); \u4f1a\u88ab\u5c55\u5f00\u4e3a\uff1a //\u7b2c\u4e09\u6b21\u8c03\u7528\uff1a myprint(\"hello\"); void myprint ( const char * firstArg /*T firstArg, Args... args*/ ){ std :: cout << firstArg << std :: endl ; // firstArg=\"hello\" \u6253\u5370\u7b2c\u4e00\u4e2a\u53c2\u6570 //myprint(args...);E1=\u65e0\u53c2\u6570 myprint (); // \u6253\u5370\u5269\u4e0b\u7684\u53c2\u6570 } \u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e00\u6b21\u5c55\u5f00\uff0c\u5185\u90e8\u7684 myprint() \u5df2\u7ecf\u6ca1\u6709\u5b9e\u53c2\u4e86\uff0c\u8fd9\u4e5f\u662f\u5728\u6700\u521d\u7684\u5b9e\u73b0 myprit \u65f6\uff0c\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u6ca1\u6709\u53c2\u6570\u7684 myprint \u7684\u539f\u56e0\uff1a void myprint (){ }","title":"myprint \u7684\u5c55\u5f00\u8fc7\u7a0b"},{"location":"learn_cpp/03_varadic_template.html#sizeof","text":"\u53d8\u53c2\u6a21\u677f\u7684\u91cd\u70b9\u548c\u539f\u7406\uff0c\u57fa\u672c\u4ecb\u7ecd\u5b8c\u4e86\u3002\u8fd8\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u8fd0\u7b97\u7b26\u9700\u8981\u4e86\u89e3\uff1a sizeof... \u3002 \u5b83\u89e3\u51b3\u7684\u9700\u6c42\u662f\uff1a\u5e2e\u52a9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u77e5\u6653\uff0c\u51fd\u6570\u8c03\u7528\u65f6\u5177\u4f53\u6709\u51e0\u4e2a\u53c2\u6570\u3002 template < typename ... Args > void fun ( Args ... args ){ std :: cout << \"sizeof...(Args): \" << sizeof ...( Args ) << std :: endl ; std :: cout << \"sizeof...(args): \" << sizeof ...( args ) << std :: endl ; std :: cout << \"======================\" << std :: endl ; } int main ( int argc , char * argv []) { fun ( 1 , 3.5 , \"hello\" ); fun ( 1 , 2 ); fun ( 1 ); return 0 ; } \u8f93\u51fa\u7ed3\u679c\uff1a sizeof...(Args): 3 sizeof...(args): 3 ====================== sizeof...(Args): 2 sizeof...(args): 2 ====================== sizeof...(Args): 1 sizeof...(args): 1 ======================","title":"sizeof... \u8fd0\u7b97\u7b26"},{"location":"learn_cpp/03_varadic_template.html#_6","text":"\u53d8\u53c2\u6a21\u677f\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u5176\u5b9e\u72ec\u7acb\u4f7f\u7528\u53d8\u53c2\u6a21\u677f\u7684\u573a\u666f\u5f88\u5c11\u3002\u4f46\u662f\u7ed3\u5408\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u5b8c\u7f8e\u8f6c\u53d1\uff0c\u5b83\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u201c\u521b\u9020\u7c7b\u201d\u7684\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u3002\u8fd9\u4e2a\u5728 OneFlow \u7684\u4ee3\u7801\u4ed3\u5e93\u4e2d\uff0c\u53ef\u4ee5\u627e\u5230\uff0c\u6bd4\u5982 \u5355\u4f8b\u8bbe\u8ba1\u6a21\u5f0f \u3001 \u5de5\u5382\u8bbe\u8ba1\u6a21\u5f0f \u3002","title":"\u603b\u7ed3"},{"location":"learn_cpp/03_varadic_template.html#_7","text":"parameter pack","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"learn_cpp/04_singleton.html","text":"\u5355\u4f8b\u6a21\u5f0f\uff1a\u4ece naive \u5230\u5de5\u4e1a\u7ea7 \u00b6 \u4eca\u5929\u53ef\u4ee5\u6765\u8c08\u8c08\u5355\u4f8b\u6a21\u5f0f\u3002\u5927\u5bb6\u53ef\u80fd\u6216\u591a\u6216\u5c11\u90fd\u542c\u8bf4\u8fc7\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5c0f\u7cd6\u8bfb\u4e66\u7684\u65f6\u5019\uff0c\u5c31\u542c\u8bf4\u8981\u5148\u5b66\u7f16\u7a0b\u8bed\u8a00\u3001\u518d\u5b66\u6570\u636e\u7ed3\u6784\u3001\u7136\u540e\u518d\u5b66\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u6700\u7ec8\u8d70\u5411\u67b6\u6784\u5e08\u3002\u8bbe\u8ba1\u6a21\u5f0f\u5bb9\u6613\u8ba9\u4eba\u611f\u89c9\u975e\u5e38\u7684\u9ad8\u7ea7\u548c\u795e\u79d8\u3002 \u5176\u5b9e\u5c0f\u5510\u4e00\u76f4\u628a\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5f53\u4f5c\u5199\u4ee3\u7801\u7684\u201c\u5957\u8def\u201d\u3002\u7528\u597d\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u4ee5\u907f\u514d\u6389\u5f88\u591a\u9879\u76ee\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u7684\u5751\u3002\u4f46\u662f\u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6ca1\u6709\u8e29\u8fc7\u5751\uff0c\u53c8\u5f88\u96be\u7406\u89e3\u8bbe\u8ba1\u6a21\u5f0f\u7684\u7cbe\u5999\u3002\u53cd\u800c\u5bb9\u6613\u88ab\u5404\u7c7b\u8bbe\u8ba1\u6a21\u5f0f\u7684\u591a\u5c42\u62bd\u8c61\u7ed9\u5f04\u6655\u3002\u6240\u4ee5\u6700\u597d\u7684\u65b9\u5f0f\uff0c\u5c31\u662f\u6839\u636e\u771f\u5b9e\u7684\u9879\u76ee\u5b66\u8bbe\u8ba1\u6a21\u5f0f\u3002\u4eca\u5929\u6211\u4eec\u5c31\u4ece\u5927\u578bC++\u5de5\u7a0b\u3001\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u4e2d\uff0c\u5b66\u4e60\u5355\u4f8b\u6a21\u5f0f\u3002 \u4ec0\u4e48\u662f\u5355\u4f8b\u6a21\u5f0f \u00b6 \u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u7ecf\u5e38\u6709 \u201c\u67d0\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u201d \u7684\u9700\u6c42\u3002\u5982\u5168\u5c4f\u6e38\u620f\u8fd0\u884c\u65f6\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u7a97\u53e3\u3001\u7cfb\u7edf\u65e5\u5fd7\u7531\u4e00\u4e2a\u65e5\u5fd7\u7ba1\u7406\u5668\u7edf\u4e00\u8bb0\u5f55\uff0c\u518d\u6bd4\u5982\uff0c\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u4e2d\u7684\u5168\u5c40\u73af\u5883\u4fe1\u606f\u3001\u7ebf\u7a0b\u6c60\u7b49\u90fd\u8bbe\u8ba1\u4e3a\u5355\u4f8b\u3002 \u300a\u8bbe\u8ba1\u6a21\u5f0f\u300b\u4e00\u4e66\u4e2d\uff0c\u7ed9\u51fa\u4e86\u5355\u4f8b\u6a21\u5f0f\u7684\u7b80\u5355\u5b9e\u73b0\uff1a // singleton.h class CSingleton { public : static CSingleton * Instance (){ if ( _instance == nullptr ){ _instance = new CSingleton ; } return _instance ; } //\u8be5\u7c7b\u7684\u5176\u5b83\u63a5\u53e3 ... protected : CSingleton (){} private : static CSingleton * _instance ; }; // singleton.cpp CSingleton * CSingleton :: _instance ; \u5b83\u7684\u5b9e\u73b0\u8981\u70b9\u662f\uff1a \u5c06\u6784\u9020\u51fd\u6570\u8bbe\u7f6e\u4e3a\u975e public \u7684\u6743\u9650 \u4f7f\u7528\u4e00\u4e2a\u7c7b\u9759\u6001\u6210\u5458\u4fdd\u5b58\u552f\u4e00\u7684\u5b9e\u4f8b \u5b9e\u73b0\u4e00\u4e2a public \u7684\u9759\u6001\u65b9\u6cd5\uff0c\u7528\u4e8e\u83b7\u53d6\u552f\u4e00\u7684\u5bf9\u8c61\u5b9e\u4f8b \u4f46\u662f\uff0c\u8fd9\u79cd\u793a\u4f8b\u4ee3\u7801\uff0c\u4ecd\u7136\u6709\u4e00\u4e9b\u7f3a\u9677\u3002\u6bd4\u5982\u62f7\u8d1d\u6784\u9020\u3001\u79fb\u52a8\u6784\u9020\u8fd8\u672adelete\uff0c\u6240\u4ee5\u7528\u6237\u53ef\u80fd\u6709\u5176\u5b83\u65b9\u5f0f\u6784\u9020\u5bf9\u8c61\u5b9e\u4f8b\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u81ea\u5df1\u6ce8\u610f\u548c\u4fee\u6539\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u8fd8\u5176\u5b83\u7f3a\u9677\uff0c\u6ee1\u8db3\u4e0d\u4e86\u5de5\u4e1a\u7ea7\u7684\u9700\u6c42\uff1a \u4e0d\u540c\u7684\u7c7b\u60f3\u8981\u53d8\u6210\u5355\u4f8b\uff0c\u90fd\u9700\u8981\u91cd\u590d\u6dfb\u52a0 Instance \u65b9\u6cd5\u53ca\u9759\u6001\u6210\u5458\uff0c\u6bd4\u8f83\u5197\u4f59\u3002 \u4e0d\u80fd\u5904\u7406\u4e00\u4e2a\u7c7b\u7684\u6784\u9020\u5b58\u5728\u91cd\u8f7d\u7684\u60c5\u51b5\u3002\u66f4\u6ca1\u6709\u529e\u6cd5\u7edf\u4e00\u4f18\u96c5\u5730\u89e3\u51b3\u4e0d\u540c\u7c7b\u7684\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u4e2a\u6570\u3001\u53c2\u6570\u7c7b\u578b\u53ef\u80fd\u4e0d\u540c\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u7248\u672c\u76f4\u63a5\u56de\u907f\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e3e\u4f8b\u7528\u7684\u662f\u65e0\u53c2\u6784\u9020\u3002 \u65e0\u6cd5\u7cbe\u786e\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u987a\u5e8f\u4f9d\u8d56\u5173\u7cfb\u3002\u6bd4\u5982\u5efa\u5efa\u5b66\u6821\uff0c\u8981\u5148\u6709\u6821\u957f\u3002\u8fd9\u5c31\u5fc5\u9700\u4fdd\u8bc1\u6821\u957f\u5728\u5b66\u6821\u6784\u9020\u524d\u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u3002 \u4f46\u662f\u8fd9\u4e2a\u6734\u7d20\u7248\u672c\uff0c\u628a\u521b\u5efa\u5bf9\u8c61\u548c\u83b7\u53d6\u5bf9\u8c61\u7684\u903b\u8f91\u653e\u5728\u4e86\u4e00\u8d77\uff0c\u65e0\u6cd5\u7cbe\u786e\u63a7\u5236\u5355\u4f8b\u7684\u751f\u547d\u5468\u671f\u3002 \u6211\u4eec\u770b\u770b OneFlow \u4e2d\u662f\u600e\u4e48\u514b\u670d\u4ee5\u4e0a\u7f3a\u9677\u7684\u3002 OneFlow \u4e2d\u7684\u5de5\u4e1a\u7ea7\u5355\u4f8b\u6a21\u5f0f \u00b6 OneFlow \u7684\u5355\u4f8b\u6a21\u5f0f\u4ee3\u7801\u5728 global.h \u4e2d\u3002\u5b83\u7684\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff08\u6211\u7b80\u5316\u4e86\u548c\u5f02\u5e38\u5904\u7406\u3001\u9519\u8bef\u68c0\u67e5\u7b49\u4ee3\u7801\uff09\uff1a template < typename T > class Global final { public : static T * Get () { return * GetPPtr (); } template < typename ... Args > static void New ( Args && ... args ) { CHECK ( Get () == nullptr ); //\u4e0d\u4e3a nullptr \u5c06\u629b\u5f02\u5e38 * GetPPtr () = new T ( std :: forward < Args > ( args )...); } static void Delete () { if ( Get () != nullptr ) { delete Get (); * GetPPtr () = nullptr ; } } private : static T ** GetPPtr () { static T * ptr = nullptr ; return & ptr ; } }; \u6211\u4eec\u770b\u5230\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e09\u4e2a\u91cd\u8981\u7684\u516c\u5f00\u65b9\u6cd5\uff1a New \u3001 Get \u3001 Delete \u3002\u5176\u4e2d New \u662f\u7528\u6765\u5b9e\u4f8b\u5316\u5355\u4f8b\u3001 Delete \u7528\u6765\u9500\u6bc1\u5355\u4f8b\u3001 Get \u7528\u6765\u83b7\u53d6\u5168\u5c40\u552f\u4e00\u7684\u5355\u4f8b\u5bf9\u8c61\u3002 \u6211\u4eec\u770b\u5230\uff0c\u4e0e\u4e4b\u524d\u6734\u7d20\u7248\u672c\u7684\u5355\u4f8b\u6a21\u5f0f\u76f8\u6bd4\uff0c Global \u4e13\u95e8\u8bbe\u8ba1\u4e86 New \u63a5\u53e3\u548c Delete \u63a5\u53e3\u3002\u5b83\u7684\u597d\u5904\u5728\u4e8e\uff0c\u4e0d\u518d\u628a\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u4ea4\u7ed9\u8fd0\u884c\u65f6\u548c\u7f16\u8bd1\u5668\u3002\u800c\u662f\u53ef\u4ee5\u975e\u5e38\u7cbe\u786e\u5730\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u3002 \u6bd4\u5982\u8fd9\u91cc\u7684\u4ee3\u7801\uff0c\u8fd9\u4e2a\u7ebf\u7a0b\u6c60\u5355\u4f8b\uff0c\u5c31\u4f9d\u8d56\u4e86 ResourceDesc \u5355\u4f8b\u3002\u56e0\u4e3a\u53ef\u4ee5\u7cbe\u786e\u63a7\u5236\u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u6c60\u5b9e\u4f8b\u5316\u65f6\uff0c ResourceDesc \u5df2\u7ecf\u5b58\u5728\u4e86\u3002 Global < ThreadPool >:: New ( Global < ResourceDesc , ForSession >:: Get () -> ComputeThreadPoolSize ()); New \u63a5\u53e3\u5b9e\u73b0 \u00b6 \u6211\u4eec\u770b\u770b New \u63a5\u53e3\u7684\u5b9e\u73b0\u3002\u5df2\u7ecf\u638c\u63e1\u4e86\u5b8c\u7f8e\u8f6c\u53d1\u548c\u53d8\u53c2\u6a21\u677f\u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u770b\u61c2\uff0c\u8fd9\u91cc\u5c31\u662f\u505a\u4e86\u4e00\u4e2a\u5b8c\u7f8e\u8f6c\u53d1\uff0c \u5e76\u4e14\u652f\u6301\u4efb\u610f\u4e2a\u6570\u3001\u4efb\u610f\u7c7b\u578b\u53c2\u6570\u7684\u8f6c\u53d1\u3002\u8fd9\u4f7f\u5f97 OneFlow \u7684\u5355\u4f8b\u975e\u5e38\u7075\u6d3b\uff0c\u53ef\u4ee5\u7528 New \u63a5\u53e3\u7edf\u4e00\u5730\u521b\u5efa\u5404\u79cd\u5404\u6837\u7684\u7c7b\u3002 template < typename ... Args > static void New ( Args && ... args ) { CHECK ( Get () == nullptr ); //\u4e0d\u4e3a nullptr \u5c06\u629b\u5f02\u5e38 * GetPPtr () = new T ( std :: forward < Args > ( args )...); } \u4e0d\u8fc7\u521b\u5efa\u597d\u7684\u5bf9\u8c61\u653e\u54ea\u53bb\u4e86\u5462\uff1f\u8fd9\u548c\u65b9\u6cd5 GetPPtr \u6709\u5173\u7cfb\u3002\u8bfb\u61c2 GetPPtr \u7684\u5b9e\u73b0\uff0c\u7275\u6d89\u5230\u4e8c\u7ea7\u6307\u9488\u7684\u4f7f\u7528\u6280\u5de7\u3002 static T ** GetPPtr () { static T * ptr = nullptr ; return & ptr ; } \u719f\u6089\u547d\u540d\u89c4\u8303\u7684\u540c\u5b66\u77e5\u9053\uff0c\u5176\u5b9e GetPPtr \u7684\u540d\u5b57\u5c31\u6697\u793a\u4e86\u5b83\u548c\u4e8c\u7ea7\u6307\u9488\u6709\u5173\u3002\u6211\u4eec\u770b GetPPtr \u4e2d\uff0c\u51c6\u5907\u4e86\u4e00\u4e2a\u9759\u6001\u53d8\u91cf\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u9488\u3002\u4f46\u662f\u8fd9\u4e2a\u51fd\u6570\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u800c\u662f\u8fd4\u56de\u8fd9\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002\u56e0\u6b64\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662f \u4e8c\u7ea7\u6307\u9488 \u3002 \u800c\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u8fc7\u7a0b\uff0c\u5c31\u9700\u8981\u5148\u5b9a\u4f4d\u5230\u8fd9\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u7136\u540e\u628a\u521b\u5efa\u7684\u5bf9\u8c61\u5730\u5740\u7ed9\u653e\u8fdb\u53bb\u3002 * GetPPtr () = new T ( std :: forward < Args > ( args )...); \u83b7\u53d6\u5355\u4f8b\u65f6\u4e5f\u7c7b\u4f3c\uff0c\u662f\u5148\u901a\u8fc7 GetPPtr \u5b9a\u4f4d\u5230\u4e86\u90a3\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u7136\u540e\u901a\u8fc7\u89e3\u5f15\u7528\uff0c\u5f97\u5230\u9759\u6001\u53d8\u91cf\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u5355\u4f8b\u5bf9\u8c61\u7684\u5730\u5740\u3002 static T * Get () { return * GetPPtr (); } \u5355\u4f8b\u7684\u540c\u6b65\u95ee\u9898 \u00b6 \u5728\u4e0d\u5c11\u5355\u4f8b\u6a21\u5f0f\u7684\u793a\u8303\u4e2d\uff0c\u90fd\u559c\u6b22\u5728\u5355\u4f8b\u8bbe\u8ba1\u4e2d\uff0c \u7edf\u4e00\u5904\u7406\u591a\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898 \u3002\u5176\u5b9e\u8fd9\u5f88\u5bb9\u6613\u5e26\u6765\u6027\u80fd\u7684\u635f\u5931\u3002\u5b9e\u9645\u4e0a\uff0c\u540c\u6b65\u95ee\u9898\u548c\u5355\u4f8b\u6a21\u5f0f\u662f2\u4e2a\u72ec\u7acb\u7684\u95ee\u9898\uff0c\u5c0f\u7cd6\u8ba4\u4e3a\u6700\u597d\u4e0d\u8981\u5c06\u4ed6\u4eec\u6df7\u4e3a\u4e00\u8c08\u3002\u540c\u6b65\u95ee\u9898\u5e94\u8be5\u662f\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5bf9\u5f85\u7684\u3002 \u4ee5 OneFlow \u4e3a\u4f8b\uff0c\u6240\u6709 Global \u5355\u4f8b\u5bf9\u8c61\u7684\u521b\u5efa\u548c\u9500\u6bc1\u90fd\u5728\u4e3b\u7ebf\u7a0b\u91cc\uff0c\u5e76\u4e0d\u5b58\u5728\u5e76\u53d1\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u7279\u522b\u7684\u540c\u6b65\u64cd\u4f5c\u3002\u5728 OneFlow \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c Global \u5355\u4f8b\u7c7b\u4e2d\u7684\u67d0\u4e00\u4e2a\u6210\u5458\u5b58\u5728\u5e76\u53d1\u95ee\u9898\uff0c\u90a3\u5c31\u5355\u72ec\u5bf9\u90a3\u4e2a\u6210\u5458\u52a0\u9501\u89e3\u51b3\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u901a\u5e38\u7684\u7f16\u7a0b\u5b9e\u8df5\u4e2d\uff0c\u9501\u7684\u7c92\u5ea6\u8981\u5c3d\u53ef\u80fd\u5c0f\u3002 \u603b\u7ed3 \u00b6 \u603b\u7ed3\u8d77\u6765\uff0c OneFlow \u8fd9\u79cd\u5de5\u4e1a\u7ea7\u4ee3\u7801\u91cc\u7684\u5355\u4f8b\u6a21\u5f0f\u6709\u4ee5\u4e0b\u4f18\u52bf\uff1a \u4efb\u610f\u4e00\u4e2a\u7c7b\u90fd\u53ef\u4ee5\u901a\u8fc7 Global \u6a21\u677f\u6210\u4e3a\u5355\u4f8b \u53ef\u4ee5\u7528\u7edf\u4e00\u7684 New \u63a5\u53e3\u521b\u5efa\u5404\u79cd\u7c7b\u5355\u4f8b\u3001\u5e76\u652f\u6301\u6784\u9020\u91cd\u8f7d \u53ef\u4ee5\u7cbe\u786e\u5730\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u4f9d\u8d56\u5173\u7cfb \u628a\u7ec6\u7c92\u5ea6\u5730\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u7684\u6743\u529b\u4ea4\u7ed9\u4e86\u5f00\u53d1\u8005","title":"\u5355\u4f8b\u6a21\u5f0f"},{"location":"learn_cpp/04_singleton.html#naive","text":"\u4eca\u5929\u53ef\u4ee5\u6765\u8c08\u8c08\u5355\u4f8b\u6a21\u5f0f\u3002\u5927\u5bb6\u53ef\u80fd\u6216\u591a\u6216\u5c11\u90fd\u542c\u8bf4\u8fc7\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5c0f\u7cd6\u8bfb\u4e66\u7684\u65f6\u5019\uff0c\u5c31\u542c\u8bf4\u8981\u5148\u5b66\u7f16\u7a0b\u8bed\u8a00\u3001\u518d\u5b66\u6570\u636e\u7ed3\u6784\u3001\u7136\u540e\u518d\u5b66\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u6700\u7ec8\u8d70\u5411\u67b6\u6784\u5e08\u3002\u8bbe\u8ba1\u6a21\u5f0f\u5bb9\u6613\u8ba9\u4eba\u611f\u89c9\u975e\u5e38\u7684\u9ad8\u7ea7\u548c\u795e\u79d8\u3002 \u5176\u5b9e\u5c0f\u5510\u4e00\u76f4\u628a\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5f53\u4f5c\u5199\u4ee3\u7801\u7684\u201c\u5957\u8def\u201d\u3002\u7528\u597d\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u4ee5\u907f\u514d\u6389\u5f88\u591a\u9879\u76ee\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u7684\u5751\u3002\u4f46\u662f\u53e6\u5916\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6ca1\u6709\u8e29\u8fc7\u5751\uff0c\u53c8\u5f88\u96be\u7406\u89e3\u8bbe\u8ba1\u6a21\u5f0f\u7684\u7cbe\u5999\u3002\u53cd\u800c\u5bb9\u6613\u88ab\u5404\u7c7b\u8bbe\u8ba1\u6a21\u5f0f\u7684\u591a\u5c42\u62bd\u8c61\u7ed9\u5f04\u6655\u3002\u6240\u4ee5\u6700\u597d\u7684\u65b9\u5f0f\uff0c\u5c31\u662f\u6839\u636e\u771f\u5b9e\u7684\u9879\u76ee\u5b66\u8bbe\u8ba1\u6a21\u5f0f\u3002\u4eca\u5929\u6211\u4eec\u5c31\u4ece\u5927\u578bC++\u5de5\u7a0b\u3001\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u4e2d\uff0c\u5b66\u4e60\u5355\u4f8b\u6a21\u5f0f\u3002","title":"\u5355\u4f8b\u6a21\u5f0f\uff1a\u4ece naive \u5230\u5de5\u4e1a\u7ea7"},{"location":"learn_cpp/04_singleton.html#_1","text":"\u5728\u5b9e\u9645\u573a\u666f\u4e2d\uff0c\u7ecf\u5e38\u6709 \u201c\u67d0\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u5b9e\u4f8b\u5316\u5bf9\u8c61\u201d \u7684\u9700\u6c42\u3002\u5982\u5168\u5c4f\u6e38\u620f\u8fd0\u884c\u65f6\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u7a97\u53e3\u3001\u7cfb\u7edf\u65e5\u5fd7\u7531\u4e00\u4e2a\u65e5\u5fd7\u7ba1\u7406\u5668\u7edf\u4e00\u8bb0\u5f55\uff0c\u518d\u6bd4\u5982\uff0c\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u4e2d\u7684\u5168\u5c40\u73af\u5883\u4fe1\u606f\u3001\u7ebf\u7a0b\u6c60\u7b49\u90fd\u8bbe\u8ba1\u4e3a\u5355\u4f8b\u3002 \u300a\u8bbe\u8ba1\u6a21\u5f0f\u300b\u4e00\u4e66\u4e2d\uff0c\u7ed9\u51fa\u4e86\u5355\u4f8b\u6a21\u5f0f\u7684\u7b80\u5355\u5b9e\u73b0\uff1a // singleton.h class CSingleton { public : static CSingleton * Instance (){ if ( _instance == nullptr ){ _instance = new CSingleton ; } return _instance ; } //\u8be5\u7c7b\u7684\u5176\u5b83\u63a5\u53e3 ... protected : CSingleton (){} private : static CSingleton * _instance ; }; // singleton.cpp CSingleton * CSingleton :: _instance ; \u5b83\u7684\u5b9e\u73b0\u8981\u70b9\u662f\uff1a \u5c06\u6784\u9020\u51fd\u6570\u8bbe\u7f6e\u4e3a\u975e public \u7684\u6743\u9650 \u4f7f\u7528\u4e00\u4e2a\u7c7b\u9759\u6001\u6210\u5458\u4fdd\u5b58\u552f\u4e00\u7684\u5b9e\u4f8b \u5b9e\u73b0\u4e00\u4e2a public \u7684\u9759\u6001\u65b9\u6cd5\uff0c\u7528\u4e8e\u83b7\u53d6\u552f\u4e00\u7684\u5bf9\u8c61\u5b9e\u4f8b \u4f46\u662f\uff0c\u8fd9\u79cd\u793a\u4f8b\u4ee3\u7801\uff0c\u4ecd\u7136\u6709\u4e00\u4e9b\u7f3a\u9677\u3002\u6bd4\u5982\u62f7\u8d1d\u6784\u9020\u3001\u79fb\u52a8\u6784\u9020\u8fd8\u672adelete\uff0c\u6240\u4ee5\u7528\u6237\u53ef\u80fd\u6709\u5176\u5b83\u65b9\u5f0f\u6784\u9020\u5bf9\u8c61\u5b9e\u4f8b\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e2a\u76f8\u4fe1\u5927\u5bb6\u90fd\u4f1a\u81ea\u5df1\u6ce8\u610f\u548c\u4fee\u6539\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u8fd8\u5176\u5b83\u7f3a\u9677\uff0c\u6ee1\u8db3\u4e0d\u4e86\u5de5\u4e1a\u7ea7\u7684\u9700\u6c42\uff1a \u4e0d\u540c\u7684\u7c7b\u60f3\u8981\u53d8\u6210\u5355\u4f8b\uff0c\u90fd\u9700\u8981\u91cd\u590d\u6dfb\u52a0 Instance \u65b9\u6cd5\u53ca\u9759\u6001\u6210\u5458\uff0c\u6bd4\u8f83\u5197\u4f59\u3002 \u4e0d\u80fd\u5904\u7406\u4e00\u4e2a\u7c7b\u7684\u6784\u9020\u5b58\u5728\u91cd\u8f7d\u7684\u60c5\u51b5\u3002\u66f4\u6ca1\u6709\u529e\u6cd5\u7edf\u4e00\u4f18\u96c5\u5730\u89e3\u51b3\u4e0d\u540c\u7c7b\u7684\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u4e2a\u6570\u3001\u53c2\u6570\u7c7b\u578b\u53ef\u80fd\u4e0d\u540c\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u7248\u672c\u76f4\u63a5\u56de\u907f\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e3e\u4f8b\u7528\u7684\u662f\u65e0\u53c2\u6784\u9020\u3002 \u65e0\u6cd5\u7cbe\u786e\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u987a\u5e8f\u4f9d\u8d56\u5173\u7cfb\u3002\u6bd4\u5982\u5efa\u5efa\u5b66\u6821\uff0c\u8981\u5148\u6709\u6821\u957f\u3002\u8fd9\u5c31\u5fc5\u9700\u4fdd\u8bc1\u6821\u957f\u5728\u5b66\u6821\u6784\u9020\u524d\u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u3002 \u4f46\u662f\u8fd9\u4e2a\u6734\u7d20\u7248\u672c\uff0c\u628a\u521b\u5efa\u5bf9\u8c61\u548c\u83b7\u53d6\u5bf9\u8c61\u7684\u903b\u8f91\u653e\u5728\u4e86\u4e00\u8d77\uff0c\u65e0\u6cd5\u7cbe\u786e\u63a7\u5236\u5355\u4f8b\u7684\u751f\u547d\u5468\u671f\u3002 \u6211\u4eec\u770b\u770b OneFlow \u4e2d\u662f\u600e\u4e48\u514b\u670d\u4ee5\u4e0a\u7f3a\u9677\u7684\u3002","title":"\u4ec0\u4e48\u662f\u5355\u4f8b\u6a21\u5f0f"},{"location":"learn_cpp/04_singleton.html#oneflow","text":"OneFlow \u7684\u5355\u4f8b\u6a21\u5f0f\u4ee3\u7801\u5728 global.h \u4e2d\u3002\u5b83\u7684\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff08\u6211\u7b80\u5316\u4e86\u548c\u5f02\u5e38\u5904\u7406\u3001\u9519\u8bef\u68c0\u67e5\u7b49\u4ee3\u7801\uff09\uff1a template < typename T > class Global final { public : static T * Get () { return * GetPPtr (); } template < typename ... Args > static void New ( Args && ... args ) { CHECK ( Get () == nullptr ); //\u4e0d\u4e3a nullptr \u5c06\u629b\u5f02\u5e38 * GetPPtr () = new T ( std :: forward < Args > ( args )...); } static void Delete () { if ( Get () != nullptr ) { delete Get (); * GetPPtr () = nullptr ; } } private : static T ** GetPPtr () { static T * ptr = nullptr ; return & ptr ; } }; \u6211\u4eec\u770b\u5230\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e09\u4e2a\u91cd\u8981\u7684\u516c\u5f00\u65b9\u6cd5\uff1a New \u3001 Get \u3001 Delete \u3002\u5176\u4e2d New \u662f\u7528\u6765\u5b9e\u4f8b\u5316\u5355\u4f8b\u3001 Delete \u7528\u6765\u9500\u6bc1\u5355\u4f8b\u3001 Get \u7528\u6765\u83b7\u53d6\u5168\u5c40\u552f\u4e00\u7684\u5355\u4f8b\u5bf9\u8c61\u3002 \u6211\u4eec\u770b\u5230\uff0c\u4e0e\u4e4b\u524d\u6734\u7d20\u7248\u672c\u7684\u5355\u4f8b\u6a21\u5f0f\u76f8\u6bd4\uff0c Global \u4e13\u95e8\u8bbe\u8ba1\u4e86 New \u63a5\u53e3\u548c Delete \u63a5\u53e3\u3002\u5b83\u7684\u597d\u5904\u5728\u4e8e\uff0c\u4e0d\u518d\u628a\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u7ba1\u7406\u4ea4\u7ed9\u8fd0\u884c\u65f6\u548c\u7f16\u8bd1\u5668\u3002\u800c\u662f\u53ef\u4ee5\u975e\u5e38\u7cbe\u786e\u5730\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u3002 \u6bd4\u5982\u8fd9\u91cc\u7684\u4ee3\u7801\uff0c\u8fd9\u4e2a\u7ebf\u7a0b\u6c60\u5355\u4f8b\uff0c\u5c31\u4f9d\u8d56\u4e86 ResourceDesc \u5355\u4f8b\u3002\u56e0\u4e3a\u53ef\u4ee5\u7cbe\u786e\u63a7\u5236\u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u4fdd\u7ebf\u7a0b\u6c60\u5b9e\u4f8b\u5316\u65f6\uff0c ResourceDesc \u5df2\u7ecf\u5b58\u5728\u4e86\u3002 Global < ThreadPool >:: New ( Global < ResourceDesc , ForSession >:: Get () -> ComputeThreadPoolSize ());","title":"OneFlow \u4e2d\u7684\u5de5\u4e1a\u7ea7\u5355\u4f8b\u6a21\u5f0f"},{"location":"learn_cpp/04_singleton.html#new","text":"\u6211\u4eec\u770b\u770b New \u63a5\u53e3\u7684\u5b9e\u73b0\u3002\u5df2\u7ecf\u638c\u63e1\u4e86\u5b8c\u7f8e\u8f6c\u53d1\u548c\u53d8\u53c2\u6a21\u677f\u7684\u540c\u5b66\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u770b\u61c2\uff0c\u8fd9\u91cc\u5c31\u662f\u505a\u4e86\u4e00\u4e2a\u5b8c\u7f8e\u8f6c\u53d1\uff0c \u5e76\u4e14\u652f\u6301\u4efb\u610f\u4e2a\u6570\u3001\u4efb\u610f\u7c7b\u578b\u53c2\u6570\u7684\u8f6c\u53d1\u3002\u8fd9\u4f7f\u5f97 OneFlow \u7684\u5355\u4f8b\u975e\u5e38\u7075\u6d3b\uff0c\u53ef\u4ee5\u7528 New \u63a5\u53e3\u7edf\u4e00\u5730\u521b\u5efa\u5404\u79cd\u5404\u6837\u7684\u7c7b\u3002 template < typename ... Args > static void New ( Args && ... args ) { CHECK ( Get () == nullptr ); //\u4e0d\u4e3a nullptr \u5c06\u629b\u5f02\u5e38 * GetPPtr () = new T ( std :: forward < Args > ( args )...); } \u4e0d\u8fc7\u521b\u5efa\u597d\u7684\u5bf9\u8c61\u653e\u54ea\u53bb\u4e86\u5462\uff1f\u8fd9\u548c\u65b9\u6cd5 GetPPtr \u6709\u5173\u7cfb\u3002\u8bfb\u61c2 GetPPtr \u7684\u5b9e\u73b0\uff0c\u7275\u6d89\u5230\u4e8c\u7ea7\u6307\u9488\u7684\u4f7f\u7528\u6280\u5de7\u3002 static T ** GetPPtr () { static T * ptr = nullptr ; return & ptr ; } \u719f\u6089\u547d\u540d\u89c4\u8303\u7684\u540c\u5b66\u77e5\u9053\uff0c\u5176\u5b9e GetPPtr \u7684\u540d\u5b57\u5c31\u6697\u793a\u4e86\u5b83\u548c\u4e8c\u7ea7\u6307\u9488\u6709\u5173\u3002\u6211\u4eec\u770b GetPPtr \u4e2d\uff0c\u51c6\u5907\u4e86\u4e00\u4e2a\u9759\u6001\u53d8\u91cf\uff0c\u5b83\u662f\u4e00\u4e2a\u6307\u9488\u3002\u4f46\u662f\u8fd9\u4e2a\u51fd\u6570\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u800c\u662f\u8fd4\u56de\u8fd9\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u3002\u56e0\u6b64\u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u662f \u4e8c\u7ea7\u6307\u9488 \u3002 \u800c\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u8fc7\u7a0b\uff0c\u5c31\u9700\u8981\u5148\u5b9a\u4f4d\u5230\u8fd9\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u7136\u540e\u628a\u521b\u5efa\u7684\u5bf9\u8c61\u5730\u5740\u7ed9\u653e\u8fdb\u53bb\u3002 * GetPPtr () = new T ( std :: forward < Args > ( args )...); \u83b7\u53d6\u5355\u4f8b\u65f6\u4e5f\u7c7b\u4f3c\uff0c\u662f\u5148\u901a\u8fc7 GetPPtr \u5b9a\u4f4d\u5230\u4e86\u90a3\u4e2a\u9759\u6001\u53d8\u91cf\u3002\u7136\u540e\u901a\u8fc7\u89e3\u5f15\u7528\uff0c\u5f97\u5230\u9759\u6001\u53d8\u91cf\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u5355\u4f8b\u5bf9\u8c61\u7684\u5730\u5740\u3002 static T * Get () { return * GetPPtr (); }","title":"New \u63a5\u53e3\u5b9e\u73b0"},{"location":"learn_cpp/04_singleton.html#_2","text":"\u5728\u4e0d\u5c11\u5355\u4f8b\u6a21\u5f0f\u7684\u793a\u8303\u4e2d\uff0c\u90fd\u559c\u6b22\u5728\u5355\u4f8b\u8bbe\u8ba1\u4e2d\uff0c \u7edf\u4e00\u5904\u7406\u591a\u7ebf\u7a0b\u540c\u6b65\u95ee\u9898 \u3002\u5176\u5b9e\u8fd9\u5f88\u5bb9\u6613\u5e26\u6765\u6027\u80fd\u7684\u635f\u5931\u3002\u5b9e\u9645\u4e0a\uff0c\u540c\u6b65\u95ee\u9898\u548c\u5355\u4f8b\u6a21\u5f0f\u662f2\u4e2a\u72ec\u7acb\u7684\u95ee\u9898\uff0c\u5c0f\u7cd6\u8ba4\u4e3a\u6700\u597d\u4e0d\u8981\u5c06\u4ed6\u4eec\u6df7\u4e3a\u4e00\u8c08\u3002\u540c\u6b65\u95ee\u9898\u5e94\u8be5\u662f\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5bf9\u5f85\u7684\u3002 \u4ee5 OneFlow \u4e3a\u4f8b\uff0c\u6240\u6709 Global \u5355\u4f8b\u5bf9\u8c61\u7684\u521b\u5efa\u548c\u9500\u6bc1\u90fd\u5728\u4e3b\u7ebf\u7a0b\u91cc\uff0c\u5e76\u4e0d\u5b58\u5728\u5e76\u53d1\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u7279\u522b\u7684\u540c\u6b65\u64cd\u4f5c\u3002\u5728 OneFlow \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c Global \u5355\u4f8b\u7c7b\u4e2d\u7684\u67d0\u4e00\u4e2a\u6210\u5458\u5b58\u5728\u5e76\u53d1\u95ee\u9898\uff0c\u90a3\u5c31\u5355\u72ec\u5bf9\u90a3\u4e2a\u6210\u5458\u52a0\u9501\u89e3\u51b3\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u901a\u5e38\u7684\u7f16\u7a0b\u5b9e\u8df5\u4e2d\uff0c\u9501\u7684\u7c92\u5ea6\u8981\u5c3d\u53ef\u80fd\u5c0f\u3002","title":"\u5355\u4f8b\u7684\u540c\u6b65\u95ee\u9898"},{"location":"learn_cpp/04_singleton.html#_3","text":"\u603b\u7ed3\u8d77\u6765\uff0c OneFlow \u8fd9\u79cd\u5de5\u4e1a\u7ea7\u4ee3\u7801\u91cc\u7684\u5355\u4f8b\u6a21\u5f0f\u6709\u4ee5\u4e0b\u4f18\u52bf\uff1a \u4efb\u610f\u4e00\u4e2a\u7c7b\u90fd\u53ef\u4ee5\u901a\u8fc7 Global \u6a21\u677f\u6210\u4e3a\u5355\u4f8b \u53ef\u4ee5\u7528\u7edf\u4e00\u7684 New \u63a5\u53e3\u521b\u5efa\u5404\u79cd\u7c7b\u5355\u4f8b\u3001\u5e76\u652f\u6301\u6784\u9020\u91cd\u8f7d \u53ef\u4ee5\u7cbe\u786e\u5730\u63a7\u5236\u5355\u4f8b\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u4f9d\u8d56\u5173\u7cfb \u628a\u7ec6\u7c92\u5ea6\u5730\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u7684\u6743\u529b\u4ea4\u7ed9\u4e86\u5f00\u53d1\u8005","title":"\u603b\u7ed3"},{"location":"learn_cpp/05_using_against_typedef.html","text":"\u7c7b\u578b\u522b\u540d\uff1a\u4ece typedef \u5230 using \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u7c7b\u578b\u522b\u540d\uff1a\u4ece typedef \u5230 using C++ \u4e2d\u7684 using \u5173\u952e\u5b57\u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u4f7f\u7528\u540d\u79f0\u7a7a\u95f4\uff0c\u8fd8\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49\u7c7b\u578b\u522b\u540d\uff08type alias\uff09\u548c\u522b\u540d\u6a21\u677f\uff08alias template\uff09\u3002 \u672c\u6587\u8ba9\u8bfb\u8005\u6709\u66f4\u6df1\u5165\u4e14\u7b26\u5408\u76f4\u89c9\u7684\u7406\u89e3\uff0c\u5c06\u5148\u4ecb\u7ecd\u51fd\u6570\u6307\u9488\uff0c\u63a5\u7740\u5f15\u51fa typedef \u5173\u952e\u5b57\uff0c\u6700\u540e\u8c08\u5230 using \u7528\u4e8e\u5b9a\u4e49\u7c7b\u578b\u522b\u540d\u3002 \u672c\u6587\u7684\u7ed3\u6784\u5982\u4e0b\uff1a \u51fd\u6570\u6307\u9488\u7684\u5b9a\u4e49\u548c\u4f7f\u7528 \u51fd\u6570\u6307\u9488\u5e26\u6765\u7684\u9605\u8bfb\u56f0\u96be \u4f7f\u7528 typedef \u7ed9\u51fd\u6570\u6307\u9488\u8d77\u522b\u540d \u4f7f\u7528 using \u8d77\u522b\u540d \u51fd\u6570\u6307\u9488\u7684\u5b9a\u4e49\u548c\u4f7f\u7528 \u00b6 \u56de\u5fc6\u4e00\u4e0b\uff0c\u5728\u5b66\u4e60\u7f16\u7a0b\u7684\u521d\u671f\uff0c\u6211\u4eec\u7684\u5e38\u89c4\u64cd\u4f5c\u662f\u5148\u5b9a\u4e49\u51fd\u6570\uff0c\u7136\u540e\u5728\u5408\u9002\u7684\u5730\u65b9\u8fdb\u884c\u8c03\u7528\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5148\u5b9a\u4e49 myfun \uff0c\u7136\u540e\u518d\u8c03\u7528 myfun \uff1a #include <iostream> void myfun () { std :: cout << \"This function is called. \\n \" << std :: endl ; } int main ( int argc , char * argv []) { myfun (); // \u5e38\u89c4\u7684\u51fd\u6570\u8c03\u7528 return 0 ; } \u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u5c31\u591f\u4e86\u3002\u4e0d\u8fc7\uff0c\u51fd\u6570\u8fd8\u6709\u4e00\u4e2a\u53ef\u80fd\u5927\u5bb6\u4e0d\u90a3\u4e48\u719f\u6089\u7684\u7279\u6027\uff1a\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u503c\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0c\u5982\uff1a #include <iostream> void myfun () { std :: cout << \"This function is called. \\n \" << std :: endl ; } int main ( int argc , char * argv []) { auto ptr_myfun = myfun ; // \u5c06\u51fd\u6570\u4f5c\u4e3a\u503c\u4f20\u9012 ptr_myfun (); // \u8fd0\u884c\u6548\u679c\u4e0emyfun()\u4e00\u81f4 return 0 ; } \u6211\u4eec\u4f1a\u597d\u5947\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5b58\u50a8\u51fd\u6570\u7684\u53d8\u91cf\u7a76\u7adf\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u5462\uff1f\u6bd5\u7adf\uff0c\u51fd\u6570\u770b\u8d77\u6765\u4e0d\u50cf\u662f\u6570\u5b57\u3001\u5b57\u7b26\u3001\u6570\u7ec4\u8fd9\u6837\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u503c\u88ab\u4f20\u9012\u3002 \u53ef\u4ee5\u4f7f\u7528 typeid( ptr_myfun ).name() \u67e5\u770b\u8fd9\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\uff1a #include <iostream> void myfun () { std :: cout << \"This function is called. \\n \" << std :: endl ; } int main ( int argc , char * argv []) { auto ptr_myfun = myfun ; // \u5c06\u51fd\u6570\u4f5c\u4e3a\u503c\u4f20\u9012 std :: cout << typeid ( ptr_myfun ). name () << std :: endl ; return 0 ; } \u5f97\u5230\u8f93\u51fa\u4e3a\uff1a void (__cdecl*)(void) \u8fd9\u5176\u5b9e\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u7c7b\u578b\u3002 \u5982\u679c\u4e0d\u9002\u7528 auto \uff0c\u81ea\u5df1\u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a int main ( int argc , char * argv []) { void ( * ptr_myfun )() = myfun ; // \u663e\u5f0f\u5730\u5b9a\u4e49\u4e86\u51fd\u6570\u6307\u9488 ptr_myfun (); std :: cout << typeid ( ptr_myfun ). name () << std :: endl ; return 0 ; } \u91cd\u65b0\u601d\u8003\u4e00\u4e0b\uff0c\u51fd\u6570\u53ef\u4ee5\u5b58\u50a8\u5230\u51fd\u6570\u6307\u9488\u53d8\u91cf\u4e2d\uff0c\u8fd9\u5176\u5b9e\u4e5f\u662f\u6709\u9053\u7406\u7684\u3002\u4ece\u8ba1\u7b97\u673a\u7cfb\u7edf\u5e95\u5c42\u7684\u89c6\u89d2\u6765\u770b\uff0c\u51fd\u6570\u5c31\u662f\u4e00\u7cfb\u5217\u673a\u5668\u6307\u4ee4\uff0c\u90a3\u4e48\u51fd\u6570\u8c03\u7528\u5176\u5b9e\u5c31\u662f\u628a\u5f53\u524d CPU \u7684\u63a7\u5236\u6743\u79fb\u4ea4\u7ed9\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u673a\u5668\u6307\u4ee4\u3002\u81ea\u7136\u800c\u7136\uff0c\u51fd\u6570\u6307\u9488\u5b58\u50a8\u7684\u5c31\u662f\u8fd9\u4e00\u7cfb\u5217\u6307\u4ee4\u7684\u5165\u53e3\u5730\u5740\u3002 \u51fd\u6570\u6307\u9488\u5e26\u6765\u7684\u9605\u8bfb\u56f0\u96be \u00b6 \u53ef\u4ee5\u5206\u6790\u51fa\uff1a\u51fd\u6570\u6307\u9488\u53ef\u4ee5\u88ab\u5f53\u6210\u53c2\u6570\u6765\u4f20\u9012\uff0c\u4f7f\u5f97\u7f16\u7a0b\u66f4\u52a0\u7684\u7075\u6d3b\uff0c\u8fd9\u5728 STL \u548c\u5404\u79cd\u6846\u67b6\u4e2d\uff08\u5982 OneFlow \uff09\u90fd\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u8fd8\u50ac\u751f\u51fa\u4e86 C++ \u5f3a\u5927\u7684 lambda \u8bed\u6cd5\u3002 \u4f46\u662f\u8bed\u6cd5\u7684\u5947\u7279\u5e26\u6765\u4e86\u95ee\u9898\uff0c\u6bd4\u5982 Linux \u4e2d\u6709\u4e2a\u53e4\u8001\u7684\u7cfb\u7edf\u8c03\u7528 signal \uff0c\u5b83\u7684\u51fd\u6570\u539f\u578b\u662f\u8fd9\u6837\uff1a void ( * signal ( int signum , void ( * handler )( int )) ) ( int ); \u5b83\u7684\u53ef\u8bfb\u6027\u663e\u7136\u4e0d\u9ad8\uff0c\u9ad8\u5bc6\u5ea6\u7684\u6b64\u7c7b\u4ee3\u7801\u65e0\u7591\u589e\u6dfb\u4e86\u7a0b\u5e8f\u5458\u9605\u8bfb\u4ee3\u7801\u65f6\u7684\u5fc3\u667a\u8d1f\u62c5\u3002\u4e0d\u8fc7\uff0c\u800c\u540e\u8bbe\u8ba1\u51fa\u7684 typedef \u53ef\u4ee5\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\u3002 \u4f7f\u7528 typedef \u7ed9\u51fd\u6570\u6307\u9488\u8d77\u522b\u540d \u00b6 \u57fa\u672c\u8bed\u6cd5\u4e3a\uff1a typedef \u539f\u7c7b\u578b \u65b0\u522b\u540d \u5b83\u53ef\u4ee5\u7ed9\u51fd\u6570\u6307\u9488\u7b49\u6570\u636e\u7c7b\u578b\u8d77\u522b\u540d\uff0c\u8ba9\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u66f4\u597d\u3002\u901a\u8fc7 man 2 signal \u6765\u67e5\u770b\u4f7f\u7528 typedef \u540e\u7684 signal \u51fd\u6570\u539f\u578b\uff1a NAME signal - ANSI C signal handling SYNOPSIS #include <signal.h> typedef void (*sighandler_t)(int); // \u5b9a\u4e49\u4e86\u53c2\u6570\u4e3a\u4e00\u4e2aint\uff0c\u8fd4\u56de\u503c\u4e3a\u7a7a\u7684\u51fd\u6570\u6307\u9488\u7c7b\u578b sighandler_t signal(int signum, sighandler_t handler); // after\uff0c\u53ef\u8bfb\u6027\u66f4\u9ad8 \u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528 typedef \u540e\uff0c signal \u7684\u539f\u578b\u770b\u8d77\u6765\u597d\u591a\u4e86\u3002 \u4e0d\u8fc7\uff0c\u5373\u4f7f\u8fd9\u6837\uff0c\u5f53 typedef \u5e94\u7528\u5728\u51fd\u6570\u6307\u9488\u4e0a\u65f6\uff0c\u8fd9\u4e2a\u8bed\u6cd5\u8fd8\u662f\u7a0d\u663e\u602a\u5f02\uff0c\u56e0\u4e3a\u901a\u5e38\u60c5\u51b5\u4e0b\u65b0\u522b\u540d\u51fa\u73b0\u5728\u8bed\u53e5\u7684\u6700\u540e\uff0c\u800c\u5e94\u7528\u5728\u51fd\u6570\u6307\u9488\u65f6\u5b83\u5374\u51fa\u73b0\u5728\u4e86\u4e2d\u95f4\u3002\u4e3a\u4e86\u6d88\u9664\u8fd9\u79cd\u201c\u4e0d\u4f18\u96c5\u201d\uff0cC++11 \u63a8\u51fa\u4e86 using \u5b9a\u4e49\u7c7b\u578b\u522b\u540d\u3002 \u4f7f\u7528 using \u8d77\u522b\u540d \u00b6 using \u5b9a\u4e49\u7c7b\u578b\u522b\u540d\u7684\u8bed\u6cd5\u4e3a\uff1a using \u65b0\u522b\u540d=\u539f\u7c7b\u578b typedef \u548c using \u4e24\u8005\u5e94\u7528\u5728\u51fd\u6570\u6307\u9488\u4e0a\u7684\u4e0d\u540c\u5982\u4e0b\uff1a // eg1 typedef void ( * sighandler_t )( int ); // before using sighandler_t = void ( * )( int ); // after // eg2 typedef std :: string ( Foo ::* fooMemFnPtr ) ( const std :: string & ); // before using fooMemFnPtr = std :: string ( Foo ::* ) ( const std :: string & ); // after \u5f88\u663e\u7136\uff0c using \u5f3a\u5236\u628a\u65b0\u522b\u540d\u653e\u5728\u8bed\u53e5\u7684\u53f3\u8fb9\uff0c\u53ef\u8bfb\u6027\u66f4\u597d\u3002 \u7136\u800c\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u540c\u5b66\u6765\u8bf4\uff0c\u8fd9\u4e0d\u8db3\u4ee5\u529d\u8bf4\u4ed6\u4eec\u4f7f\u7528 using \u6765\u53d6\u4ee3 typedef \u3002 \u9664\u4e86\u53ef\u8bfb\u6027\u5916\uff0c using \u8fd8\u80fd\u505a\u5230 typedef \u505a\u4e0d\u5230\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u6a21\u677f\u522b\u540d\uff08alias template\uff09\uff1a template < typename T > typedef std :: vector < T > myvec ; // \u9519\u8bef\uff0c\u7f16\u8bd1\u5f97\u5230\u201ctypedef \u6a21\u677f \u975e\u6cd5\u201d\u7684\u9519\u8bef\u63d0\u793a template < typename T > using myvec = std :: vector < T > ; // \u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1 \u6a21\u677f\u522b\u540d\u529f\u80fd\u5f3a\u5927\u3001\u5e94\u7528\u5e7f\u6cdb\u3002\u5728 OneFlow \u4e2d\u6709\u4e0d\u5c11\u5730\u65b9 \u90fd\u5e94\u7528\u5230\u4e86\uff1a template < typename T > using CfgRf = :: oneflow :: cfg :: _RepeatedField_ < T > ; template < typename T > using CfgRpf = :: oneflow :: cfg :: _RepeatedField_ < T > ; template < typename T1 , typename T2 > using CfgMapPair = std :: pair < T1 , T2 > ; template < typename K , typename V > using CfgMap = :: oneflow :: cfg :: _MapField_ < K , V > ; \u603b\u7ed3 \u00b6 \u4f7f\u7528\u51fd\u6570\u6307\u9488\u628a\u51fd\u6570\u4f5c\u4e3a\u503c\u4f20\u9012\uff0c\u589e\u52a0\u4e86\u7f16\u7a0b\u7684\u7075\u6d3b\u6027 \u7075\u6d3b\u7684\u51fd\u6570\u6307\u9488\u589e\u5927\u4e86\u7406\u89e3\u4ee3\u7801\u7684\u96be\u5ea6\uff0c typedef \u901a\u8fc7\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u522b\u540d\u5bf9\u5176\u52a0\u4ee5\u7f13\u89e3 using \u8d4b\u4e88\u4e86\u6b64\u7c7b\u95ee\u9898\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848","title":"\u7c7b\u578b\u522b\u540d\uff1a\u4ece typedef \u5230 using"},{"location":"learn_cpp/05_using_against_typedef.html#typedef-using","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u7c7b\u578b\u522b\u540d\uff1a\u4ece typedef \u5230 using C++ \u4e2d\u7684 using \u5173\u952e\u5b57\u4e0d\u4ec5\u53ef\u4ee5\u7528\u4e8e\u4f7f\u7528\u540d\u79f0\u7a7a\u95f4\uff0c\u8fd8\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49\u7c7b\u578b\u522b\u540d\uff08type alias\uff09\u548c\u522b\u540d\u6a21\u677f\uff08alias template\uff09\u3002 \u672c\u6587\u8ba9\u8bfb\u8005\u6709\u66f4\u6df1\u5165\u4e14\u7b26\u5408\u76f4\u89c9\u7684\u7406\u89e3\uff0c\u5c06\u5148\u4ecb\u7ecd\u51fd\u6570\u6307\u9488\uff0c\u63a5\u7740\u5f15\u51fa typedef \u5173\u952e\u5b57\uff0c\u6700\u540e\u8c08\u5230 using \u7528\u4e8e\u5b9a\u4e49\u7c7b\u578b\u522b\u540d\u3002 \u672c\u6587\u7684\u7ed3\u6784\u5982\u4e0b\uff1a \u51fd\u6570\u6307\u9488\u7684\u5b9a\u4e49\u548c\u4f7f\u7528 \u51fd\u6570\u6307\u9488\u5e26\u6765\u7684\u9605\u8bfb\u56f0\u96be \u4f7f\u7528 typedef \u7ed9\u51fd\u6570\u6307\u9488\u8d77\u522b\u540d \u4f7f\u7528 using \u8d77\u522b\u540d","title":"\u7c7b\u578b\u522b\u540d\uff1a\u4ece typedef \u5230 using"},{"location":"learn_cpp/05_using_against_typedef.html#_1","text":"\u56de\u5fc6\u4e00\u4e0b\uff0c\u5728\u5b66\u4e60\u7f16\u7a0b\u7684\u521d\u671f\uff0c\u6211\u4eec\u7684\u5e38\u89c4\u64cd\u4f5c\u662f\u5148\u5b9a\u4e49\u51fd\u6570\uff0c\u7136\u540e\u5728\u5408\u9002\u7684\u5730\u65b9\u8fdb\u884c\u8c03\u7528\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5148\u5b9a\u4e49 myfun \uff0c\u7136\u540e\u518d\u8c03\u7528 myfun \uff1a #include <iostream> void myfun () { std :: cout << \"This function is called. \\n \" << std :: endl ; } int main ( int argc , char * argv []) { myfun (); // \u5e38\u89c4\u7684\u51fd\u6570\u8c03\u7528 return 0 ; } \u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u5c31\u591f\u4e86\u3002\u4e0d\u8fc7\uff0c\u51fd\u6570\u8fd8\u6709\u4e00\u4e2a\u53ef\u80fd\u5927\u5bb6\u4e0d\u90a3\u4e48\u719f\u6089\u7684\u7279\u6027\uff1a\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u503c\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0c\u5982\uff1a #include <iostream> void myfun () { std :: cout << \"This function is called. \\n \" << std :: endl ; } int main ( int argc , char * argv []) { auto ptr_myfun = myfun ; // \u5c06\u51fd\u6570\u4f5c\u4e3a\u503c\u4f20\u9012 ptr_myfun (); // \u8fd0\u884c\u6548\u679c\u4e0emyfun()\u4e00\u81f4 return 0 ; } \u6211\u4eec\u4f1a\u597d\u5947\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5b58\u50a8\u51fd\u6570\u7684\u53d8\u91cf\u7a76\u7adf\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u5462\uff1f\u6bd5\u7adf\uff0c\u51fd\u6570\u770b\u8d77\u6765\u4e0d\u50cf\u662f\u6570\u5b57\u3001\u5b57\u7b26\u3001\u6570\u7ec4\u8fd9\u6837\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u503c\u88ab\u4f20\u9012\u3002 \u53ef\u4ee5\u4f7f\u7528 typeid( ptr_myfun ).name() \u67e5\u770b\u8fd9\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\uff1a #include <iostream> void myfun () { std :: cout << \"This function is called. \\n \" << std :: endl ; } int main ( int argc , char * argv []) { auto ptr_myfun = myfun ; // \u5c06\u51fd\u6570\u4f5c\u4e3a\u503c\u4f20\u9012 std :: cout << typeid ( ptr_myfun ). name () << std :: endl ; return 0 ; } \u5f97\u5230\u8f93\u51fa\u4e3a\uff1a void (__cdecl*)(void) \u8fd9\u5176\u5b9e\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u7c7b\u578b\u3002 \u5982\u679c\u4e0d\u9002\u7528 auto \uff0c\u81ea\u5df1\u663e\u5f0f\u6307\u5b9a\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a int main ( int argc , char * argv []) { void ( * ptr_myfun )() = myfun ; // \u663e\u5f0f\u5730\u5b9a\u4e49\u4e86\u51fd\u6570\u6307\u9488 ptr_myfun (); std :: cout << typeid ( ptr_myfun ). name () << std :: endl ; return 0 ; } \u91cd\u65b0\u601d\u8003\u4e00\u4e0b\uff0c\u51fd\u6570\u53ef\u4ee5\u5b58\u50a8\u5230\u51fd\u6570\u6307\u9488\u53d8\u91cf\u4e2d\uff0c\u8fd9\u5176\u5b9e\u4e5f\u662f\u6709\u9053\u7406\u7684\u3002\u4ece\u8ba1\u7b97\u673a\u7cfb\u7edf\u5e95\u5c42\u7684\u89c6\u89d2\u6765\u770b\uff0c\u51fd\u6570\u5c31\u662f\u4e00\u7cfb\u5217\u673a\u5668\u6307\u4ee4\uff0c\u90a3\u4e48\u51fd\u6570\u8c03\u7528\u5176\u5b9e\u5c31\u662f\u628a\u5f53\u524d CPU \u7684\u63a7\u5236\u6743\u79fb\u4ea4\u7ed9\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u673a\u5668\u6307\u4ee4\u3002\u81ea\u7136\u800c\u7136\uff0c\u51fd\u6570\u6307\u9488\u5b58\u50a8\u7684\u5c31\u662f\u8fd9\u4e00\u7cfb\u5217\u6307\u4ee4\u7684\u5165\u53e3\u5730\u5740\u3002","title":"\u51fd\u6570\u6307\u9488\u7684\u5b9a\u4e49\u548c\u4f7f\u7528"},{"location":"learn_cpp/05_using_against_typedef.html#_2","text":"\u53ef\u4ee5\u5206\u6790\u51fa\uff1a\u51fd\u6570\u6307\u9488\u53ef\u4ee5\u88ab\u5f53\u6210\u53c2\u6570\u6765\u4f20\u9012\uff0c\u4f7f\u5f97\u7f16\u7a0b\u66f4\u52a0\u7684\u7075\u6d3b\uff0c\u8fd9\u5728 STL \u548c\u5404\u79cd\u6846\u67b6\u4e2d\uff08\u5982 OneFlow \uff09\u90fd\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\uff0c\u8fd8\u50ac\u751f\u51fa\u4e86 C++ \u5f3a\u5927\u7684 lambda \u8bed\u6cd5\u3002 \u4f46\u662f\u8bed\u6cd5\u7684\u5947\u7279\u5e26\u6765\u4e86\u95ee\u9898\uff0c\u6bd4\u5982 Linux \u4e2d\u6709\u4e2a\u53e4\u8001\u7684\u7cfb\u7edf\u8c03\u7528 signal \uff0c\u5b83\u7684\u51fd\u6570\u539f\u578b\u662f\u8fd9\u6837\uff1a void ( * signal ( int signum , void ( * handler )( int )) ) ( int ); \u5b83\u7684\u53ef\u8bfb\u6027\u663e\u7136\u4e0d\u9ad8\uff0c\u9ad8\u5bc6\u5ea6\u7684\u6b64\u7c7b\u4ee3\u7801\u65e0\u7591\u589e\u6dfb\u4e86\u7a0b\u5e8f\u5458\u9605\u8bfb\u4ee3\u7801\u65f6\u7684\u5fc3\u667a\u8d1f\u62c5\u3002\u4e0d\u8fc7\uff0c\u800c\u540e\u8bbe\u8ba1\u51fa\u7684 typedef \u53ef\u4ee5\u7f13\u89e3\u8fd9\u4e2a\u95ee\u9898\u3002","title":"\u51fd\u6570\u6307\u9488\u5e26\u6765\u7684\u9605\u8bfb\u56f0\u96be"},{"location":"learn_cpp/05_using_against_typedef.html#typedef","text":"\u57fa\u672c\u8bed\u6cd5\u4e3a\uff1a typedef \u539f\u7c7b\u578b \u65b0\u522b\u540d \u5b83\u53ef\u4ee5\u7ed9\u51fd\u6570\u6307\u9488\u7b49\u6570\u636e\u7c7b\u578b\u8d77\u522b\u540d\uff0c\u8ba9\u7a0b\u5e8f\u7684\u53ef\u8bfb\u6027\u66f4\u597d\u3002\u901a\u8fc7 man 2 signal \u6765\u67e5\u770b\u4f7f\u7528 typedef \u540e\u7684 signal \u51fd\u6570\u539f\u578b\uff1a NAME signal - ANSI C signal handling SYNOPSIS #include <signal.h> typedef void (*sighandler_t)(int); // \u5b9a\u4e49\u4e86\u53c2\u6570\u4e3a\u4e00\u4e2aint\uff0c\u8fd4\u56de\u503c\u4e3a\u7a7a\u7684\u51fd\u6570\u6307\u9488\u7c7b\u578b sighandler_t signal(int signum, sighandler_t handler); // after\uff0c\u53ef\u8bfb\u6027\u66f4\u9ad8 \u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528 typedef \u540e\uff0c signal \u7684\u539f\u578b\u770b\u8d77\u6765\u597d\u591a\u4e86\u3002 \u4e0d\u8fc7\uff0c\u5373\u4f7f\u8fd9\u6837\uff0c\u5f53 typedef \u5e94\u7528\u5728\u51fd\u6570\u6307\u9488\u4e0a\u65f6\uff0c\u8fd9\u4e2a\u8bed\u6cd5\u8fd8\u662f\u7a0d\u663e\u602a\u5f02\uff0c\u56e0\u4e3a\u901a\u5e38\u60c5\u51b5\u4e0b\u65b0\u522b\u540d\u51fa\u73b0\u5728\u8bed\u53e5\u7684\u6700\u540e\uff0c\u800c\u5e94\u7528\u5728\u51fd\u6570\u6307\u9488\u65f6\u5b83\u5374\u51fa\u73b0\u5728\u4e86\u4e2d\u95f4\u3002\u4e3a\u4e86\u6d88\u9664\u8fd9\u79cd\u201c\u4e0d\u4f18\u96c5\u201d\uff0cC++11 \u63a8\u51fa\u4e86 using \u5b9a\u4e49\u7c7b\u578b\u522b\u540d\u3002","title":"\u4f7f\u7528 typedef \u7ed9\u51fd\u6570\u6307\u9488\u8d77\u522b\u540d"},{"location":"learn_cpp/05_using_against_typedef.html#using","text":"using \u5b9a\u4e49\u7c7b\u578b\u522b\u540d\u7684\u8bed\u6cd5\u4e3a\uff1a using \u65b0\u522b\u540d=\u539f\u7c7b\u578b typedef \u548c using \u4e24\u8005\u5e94\u7528\u5728\u51fd\u6570\u6307\u9488\u4e0a\u7684\u4e0d\u540c\u5982\u4e0b\uff1a // eg1 typedef void ( * sighandler_t )( int ); // before using sighandler_t = void ( * )( int ); // after // eg2 typedef std :: string ( Foo ::* fooMemFnPtr ) ( const std :: string & ); // before using fooMemFnPtr = std :: string ( Foo ::* ) ( const std :: string & ); // after \u5f88\u663e\u7136\uff0c using \u5f3a\u5236\u628a\u65b0\u522b\u540d\u653e\u5728\u8bed\u53e5\u7684\u53f3\u8fb9\uff0c\u53ef\u8bfb\u6027\u66f4\u597d\u3002 \u7136\u800c\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u540c\u5b66\u6765\u8bf4\uff0c\u8fd9\u4e0d\u8db3\u4ee5\u529d\u8bf4\u4ed6\u4eec\u4f7f\u7528 using \u6765\u53d6\u4ee3 typedef \u3002 \u9664\u4e86\u53ef\u8bfb\u6027\u5916\uff0c using \u8fd8\u80fd\u505a\u5230 typedef \u505a\u4e0d\u5230\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u6a21\u677f\u522b\u540d\uff08alias template\uff09\uff1a template < typename T > typedef std :: vector < T > myvec ; // \u9519\u8bef\uff0c\u7f16\u8bd1\u5f97\u5230\u201ctypedef \u6a21\u677f \u975e\u6cd5\u201d\u7684\u9519\u8bef\u63d0\u793a template < typename T > using myvec = std :: vector < T > ; // \u53ef\u4ee5\u901a\u8fc7\u7f16\u8bd1 \u6a21\u677f\u522b\u540d\u529f\u80fd\u5f3a\u5927\u3001\u5e94\u7528\u5e7f\u6cdb\u3002\u5728 OneFlow \u4e2d\u6709\u4e0d\u5c11\u5730\u65b9 \u90fd\u5e94\u7528\u5230\u4e86\uff1a template < typename T > using CfgRf = :: oneflow :: cfg :: _RepeatedField_ < T > ; template < typename T > using CfgRpf = :: oneflow :: cfg :: _RepeatedField_ < T > ; template < typename T1 , typename T2 > using CfgMapPair = std :: pair < T1 , T2 > ; template < typename K , typename V > using CfgMap = :: oneflow :: cfg :: _MapField_ < K , V > ;","title":"\u4f7f\u7528 using \u8d77\u522b\u540d"},{"location":"learn_cpp/05_using_against_typedef.html#_3","text":"\u4f7f\u7528\u51fd\u6570\u6307\u9488\u628a\u51fd\u6570\u4f5c\u4e3a\u503c\u4f20\u9012\uff0c\u589e\u52a0\u4e86\u7f16\u7a0b\u7684\u7075\u6d3b\u6027 \u7075\u6d3b\u7684\u51fd\u6570\u6307\u9488\u589e\u5927\u4e86\u7406\u89e3\u4ee3\u7801\u7684\u96be\u5ea6\uff0c typedef \u901a\u8fc7\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u522b\u540d\u5bf9\u5176\u52a0\u4ee5\u7f13\u89e3 using \u8d4b\u4e88\u4e86\u6b64\u7c7b\u95ee\u9898\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848","title":"\u603b\u7ed3"},{"location":"learn_cpp/06_functor.html","text":"\u4eff\u51fd\u6570 \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6006_\u767e\u53d8\u51fd\u6570 \u672c\u671f\u89c6\u9891\u548c\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\u4eff\u51fd\u6570\u8fd9\u4e2a\u77e5\u8bc6\u70b9\u3002\u672c\u89c6\u9891\u5305\u62ec\u4e09\u4e2a\u4e3b\u8981\u5185\u5bb9\uff1a \u4eff\u51fd\u6570\u7684\u5b9a\u4e49 \u4eff\u51fd\u6570\u7684\u4e24\u5927\u4f18\u70b9 lambda \u51fd\u6570\u4e5f\u662f\u4e00\u79cd\u4eff\u51fd\u6570 \u4eff\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u793a\u4f8b \u00b6 \u897f\u65b9\u6709\u53e5\u8c1a\u8bed\uff1a\u5982\u679c\u4e00\u4e2a\u4e1c\u897f\u770b\u8d77\u6765\u50cf\u9e2d\u5b50\uff0c\u8d70\u8d77\u6765\u50cf\u9e2d\u5b50\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u53ea\u9e2d\u5b50\u3002\u800c\u5982\u679c\u4e00\u6837\u4e1c\u897f\uff0c\u4e0d\u662f\u51fd\u6570\uff0c\u4f46\u662f\u5177\u6709\u51fd\u6570\u7684\u6027\u8d28\uff0c\u4f8b\u5982\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u3001\u4f20\u53c2\u3001\u8fd4\u56de\u503c\uff0c\u90a3\u5b83\u662f\u4ec0\u4e48\u5462\uff1fC++ \u4e2d\u5c06\u5176\u79f0\u4e3a \u4eff\u51fd\u6570 \u3002 \u4e2d\u89c4\u4e2d\u77e9\u7684\u5b9a\u4e49\u548c\u8c03\u7528\u51fd\u6570\u65b9\u5f0f\uff1a #include <iostream> void show_value ( int x ) { std :: cout << x << std :: endl ; } int main ( int argc , char * argv []) { show_value ( 10 ); return 0 ; } \u4eff\u51fd\u6570\u4e0d\u662f\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u3001\u4f20\u53c2\u3001\u8fd4\u56de\u503c\u3002\u90a3\u4e48\u5982\u4f55\u5b9a\u4e49\u4eff\u51fd\u6570\uff1f\u7b54\u6848\u662f\u91cd\u8f7d \u62ec\u53f7\u8fd0\u7b97\u7b26 \u3002\u5982\u4e0b\u4ee3\u7801\u662f\u4e00\u4e2a\u4eff\u51fd\u6570\u793a\u4f8b\u3002 #include <iostream> struct CMyFunctor { void operator ()( int x ) { std :: cout << x << std :: endl ; } }; int main ( int argc , char * argv []) { // auto p = CMyFunctor(); // \u5b9e\u4f8b\u5316\u7ed3\u6784\u4f53 // p(10); // \u8c03\u7528\u5b9e\u4f8b\u5316\u5bf9\u8c61 CMyFunctor ()( 10 ); // \u5c06\u521b\u5efa\u5b9e\u4f8b\u548c\u8c03\u7528\u5199\u5728\u4e00\u8d77\u5373\u4eff\u51fd\u6570 return 0 ; } \u73b0\u4ee3 C++ \u4ee3\u7801\u4e2d\u4f1a\u5927\u91cf\u4f7f\u7528\u4eff\u51fd\u6570\uff0c\u5982 OneFlow \u7684\u7b97\u5b50\u5c42 \uff1a class ReduceSumFunctor { public : ReduceSumFunctor () { op_ = CHECK_JUST ( one :: OpBuilder ( \"reduce_sum\" ). Input ( \"input_tensor\" ). Output ( \"output_tensor\" ). Build ()); } Maybe < Tensor > operator ()( const std :: shared_ptr < one :: Tensor >& x , const std :: vector < int32_t >& axis , const bool & keepdims ) const { // const DataType dtype = x->dtype()->data_type(); MutableAttrMap attrs ; if ( axis . empty ()) { std :: vector < int32_t > reduce_axis ( x -> shape () -> NumAxes ()); std :: iota ( reduce_axis . begin (), reduce_axis . end (), 0 ); JUST ( attrs . SetAttr < std :: vector < int32_t >> ( \"axis\" , reduce_axis )); } else { JUST ( attrs . SetAttr < std :: vector < int32_t >> ( \"axis\" , axis )); } JUST ( attrs . SetAttr < bool > ( \"keepdims\" , keepdims )); TensorProcessor tensor_processor ; JUST ( tensor_processor . AddInputs ({ x }, /*lowest_dtype=*/ DType :: Int64 ()). Apply ()); TensorTuple input_tuple = JUST ( tensor_processor . GetInputs ()); return OpInterpUtil :: Dispatch < Tensor > ( * op_ , input_tuple , attrs ); } private : std :: shared_ptr < OpExpr > op_ ; }; \u518d\u5982 OneFlow \u7c7b\u5de5\u5382 \uff1a template < typename FunctorT > struct SimpleFactory { explicit SimpleFactory ( FunctorT functor ) : tpl ( functor ) {} __device__ FunctorT operator ()() const { return tpl ; } private : FunctorT tpl ; }; \u4eff\u51fd\u6570\u7684\u4f18\u70b9 \u00b6 \u53ef\u4ee5\u4fdd\u5b58\u72b6\u6001 \u4f5c\u4e3a\u6a21\u677f\u53c2\u6570 \u53ef\u4ee5\u4fdd\u5b58\u72b6\u6001 \u00b6 \u4ee5\u8ba1\u7b97\u7a0e\u573a\u666f\u4e3a\u4f8b\uff1a #include <iostream> #include <vector> #include <algorithm> double calc_tax ( double salary ) { // \u8ba1\u7b97\u7a0e\u7684\u51fd\u6570\uff0c\u7a0e\u7387\u4e3a0.2 return salary * 0.2 ; } void show_value ( double value ) { std :: cout << value << \",\" ; } int main ( int argc , char * argv []) std :: vector < double > salary = { 3000 , 5000 , 4800 , 2800 }; // \u6536\u5165 std :: vector < double > tax ( 4 ); // \u7a0e\u7ed3\u679c std :: transform ( salary . begin (), salary . end (), tax . begin (), calc_tax ); // \u904d\u5386\u548c\u8ba1\u7b97\u7a0e\u7387 std :: for_each ( salary . begin (), salary . end (), show_value ); std :: cout << std :: endl ; std :: for_each ( tax . begin (), tax . end (), show_value ); return 0 ; } \u5f53\u5b58\u5728 \u591a\u79cd\u7a0e\u7387 \u7684\u65f6\u5019\uff0c\u9700\u8981\u91cd\u5199 calc_tax \u51fd\u6570\u3002\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u5c06\u7a0e\u7387\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\uff0c\u5373\uff1a double calc_tax_two_args ( double salary , double rate ) { return salary * rate ; } \u4f46\u662f STL \u7684 transform \u51fd\u6570\u63a5\u53d7\u7684\u51fd\u6570\u7c7b\u578b\u53ea\u5141\u8bb8\u6709\u4e00\u4e2a\u53c2\u6570\uff0c calc_tax_two_args \u4f1a\u51fa\u73b0\u7f16\u8bd1\u4e0d\u901a\u8fc7\u95ee\u9898\u3002\u4ee5\u4e0a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4eff\u51fd\u6570\u5f97\u5230\u89e3\u51b3\u3002\u5982\u4e0b\u5217\u4ee3\u7801\u6240\u793a\uff0c\u4f7f\u7528 _rate \u4fdd\u5b58\u7a0e\u7387\uff0c\u5728\u65b0\u5efa\u5b9e\u4f8b\u7684\u65f6\u5019\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7a0e\u7387\uff0c\u540c\u65f6\u4fdd\u6301 operator \u51fd\u6570\u4ecd\u7136\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\u3002 #include <iostream> #include <vector> #include <algorithm> struct CMyCalcTax { CMyCalcTax ( double rate ) : _rate ( rate ) { } double operator ()( double salary ) { // \u4ecd\u7136\u53ea\u6709\u4e00\u4e2a\u53c2\u6570 return salary * _rate ; } private : double _rate ; // \u7528\u4e8e\u4fdd\u5b58\u7a0e\u7387 } void show__value ( double value ) { std :: cout << value << \",\" ; } int main ( int argc , char * argv []) { std :: vector < double > salaryl = { 3000 , 5000 , 4800 , 2800 }; std :: vector < double > salary2 = { 3000 , 5000 , 4800 , 2800 }; std :: vector < double > tax1 ( 4 ); std :: vector < double > tax2 ( 4 ); std :: transform ( salary1 . begin (), salary1 . end (), tax1 . begin (), CMyCalcTax ( 0.2 )); std :: for_each ( salary1 . begin (), salary1 . end (), show_value ) ; std :: cout << std :: endl ; std :: for_each ( tax1 . begin (), tax1 . end (), show_value ); std :: cout << std :: endl << \"===========\" << std :: endl ; std :: transform ( salary2 . begin (), salary2 . end (), tax2 . begin (), CMyCalcTax ( 0.1 )); std :: for_each ( salary2 . begin (), salary2 . end (), show_value ); std :: cout << std :: endl ; std :: for_each ( tax2 . begin (), tax2 . end (), show_value ); std :: cout << std :: endl ; return 0 ; } \u4ece\u4e0a\u8ff0\u5b9e\u4f8b\u4e2d\u4e5f\u53ef\u4ee5\u770b\u51fa\u4eff\u51fd\u6570\u53ef\u4ee5\u6709\u72b6\u6001\uff0c\u800c\u8fd9\u4e00\u7279\u6027\u4f7f\u5f97\u4eff\u51fd\u6570\u6bd4\u666e\u901a\u51fd\u6570\u66f4\u52a0\u7075\u6d3b\u3002 \u4f5c\u4e3a\u6a21\u677f\u53c2\u6570 \u00b6 \u8fd9\u4e00\u4f18\u70b9\u4f53\u73b0\u5728\u6a21\u677f\u7f16\u7a0b\u4e2d\u3002\u56e0\u4e3a\u4eff\u51fd\u6570\u7684\u672c\u8d28\u662f \u7c7b\u6216\u8005\u7ed3\u6784\u4f53\u7684\u5bf9\u8c61 \uff0c\u8fd9\u5c31\u4f7f\u5f97\u53ef\u4ee5\u628a\u4eff\u51fd\u6570\u7684\u7c7b\u578b\u5f53\u4f5c\u6a21\u677f\u53c2\u6570\u8fdb\u884c\u4f20\u9012\u3002\u4e8e\u662f\u67d0\u4e9b\u65f6\u5019\u5c31\u53ef\u4ee5\u628a\u8fd0\u884c\u65f6\u7684\u5f00\u9500\u5728\u7f16\u8bd1\u65f6\u89e3\u51b3\u6389\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u8ba9\u8f6f\u4ef6\u7684\u6548\u7387\u53d8\u5f97\u66f4\u9ad8\u3002 \u4ec0\u4e48\u662f\u7f16\u8bd1\u65f6\u7684\u5f00\u9500\uff1f\u4ee5 STL \u7684 for_each \u51fd\u6570\u4e3a\u4f8b\uff0c\u90e8\u5206\u6e90\u7801\u5982\u4e0b\uff1a template < typename _InputIterator , typename _Function > _Function for_each ( _InputIterator __first , _InputIterator __last , _Function __f ) { // concept requirements __glibcxx_function_requires ( _InputIteratorConcept < _InputIterator > ) __glibcxx_requires_valid_range ( __first , __last ); for (; __first != __last ; ++ __first ) __f ( * __first ); return __f ; // N.B. [alg.foreach] says std::move(f) but it's redundant. } for_each \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u5c31\u662f\u51fd\u6570\u6307\u9488 __f \uff0c\u5728\u51fd\u6570\u5185\u90e8\u4f1a\u904d\u5386\u6bcf\u4e00\u4e2a\u6307\u9488\uff0c\u5e76\u4e14\u628a\u51fd\u6570\u6307\u9488\u7684\u6548\u679c\u5e94\u7528\u5230\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0a\u3002\u4f46\u662f\u51fd\u6570\u65e2\u7136\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\u4e86\u5c31\u6d89\u53ca\u5230 \u6808\u8d44\u6e90\u7684\u5206\u914d\u548c\u56de\u6536 \uff0c\u90a3\u5c31\u4f1a\u4ea7\u751f\u8fd0\u884c\u65f6\u7684\u5f00\u9500\u3002 \u5177\u4f53\u89e3\u91ca\u8282\u7701\u8fd0\u884c\u65f6\u5f00\u9500\uff1a\u5728\u5e95\u5c42\u7684\u673a\u5668\u7801\u4e2d\uff0c\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u53c2\u6570\u662f\u9700\u8981\u901a\u8fc7\u5165\u6808\u51fa\u6808\u64cd\u4f5c\u6307\u4ee4\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u7684\uff0c\u53c2\u6570\u4e2a\u6570\u8d8a\u591a\uff0c\u5219\u5bf9\u5e94\u7684\u4f20\u8f93\u6307\u4ee4\u8d8a\u591a\uff0c\u9700\u8981\u8d8a\u591a\u989d\u5916\u8fd0\u884c\u65f6\u95f4\uff0c\u8fd9\u5c31\u662f\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u3002\u4eff\u51fd\u6570\u53ef\u4ee5\u4f7f\u67d0\u4e9b\u4e0d\u7ecf\u5e38\u53d8\u7684\u53c2\u6570\uff08\u5982\u793a\u4f8b\u4ee3\u7801\u4e2d\u7684\u7a0e\u7387\uff09\u4e0d\u518d\u901a\u8fc7\u53c2\u6570\u4f20\u9012\u3001\u800c\u662f\u76f8\u5f53\u4e8e\u4ee5\u67d0\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u5f62\u5f0f\u4f20\u9012\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u53c2\u6570\u4e2a\u6570\u3002 \u5982\u679c\u6b64\u65f6\u4f7f\u7528\u7684\u662f\u4eff\u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u7701\u53bb\u8fd9\u90e8\u5206\u5f00\u9500\u3002\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff0c\u81ea\u5b9a\u4e49\u4e00\u4e2a my_for_each \u3002\u56e0\u4e3a\u662f\u6a21\u677f\u7f16\u7a0b\uff0c\u6240\u4ee5\u5728\u7f16\u8bd1\u65f6\u5c31\u53ef\u4ee5\u5b8c\u5168\u786e\u5b9a\uff0c\u6240\u4ee5\u5728\u8fd0\u884c\u65f6\u5c31\u4e0d\u4f1a\u6709\u989d\u5916\u7684\u5f00\u9500\u4e86\u3002 #include <iostream> #include <vector> struct CMyFunctor { void operator ()( double value ) { std :: cout << value << \",\" ; } }; template < class InputIt , class UnaryFunction > // \u4f7f\u7528\u6a21\u677f\u53c2\u6570\u6765\u5904\u7406\u6bcf\u4e00\u4e2a\u5143\u7d20 UnaryFunction my_for_each ( InputIt first , InputIt last ) { for (; first != last ; ++ first ) { UnaryFunction ()( * first ); } return UnaryFunction (); } void show_value ( double value ){ std :: cout << value << \",\" ; } int main ( int argc , char * argv []) { std :: vector < double > salary = { 3000 , 5000 , 4800 , 2800 }; my_for_each < decltype ( salary . begin ()), CMyFunctor > ( salary . begin (), salary . end ()); return 0 ; } C++ \u4e2d\u7684 lambda \u4e5f\u662f\u4e00\u79cd\u4eff\u51fd\u6570 \u00b6 lambda \u51fd\u6570\u7684\u672c\u8d28\u4e0e\u524d\u9762\u8bb2\u7684\u901a\u8fc7\u91cd\u8f7d operator() \u662f\u4e00\u6a21\u4e00\u6837\u7684\u3002\u5982\u4e0b\u6240\u793a\u4ece\u6c47\u7f16\u8bed\u8a00\u89d2\u5ea6\u770b lambda \u51fd\u6570\uff0c\u5b9a\u4e49 fun \u65f6\uff0c n \u653e\u5165 eax \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u88ab push \u8fdb\u6808\uff1b fun \u653e\u5165 ecx \u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\u51fd\u6570\u5b58\u653e\u5730\u5740\u3002 auto fun = [ = ]( int x ) -> int { return X + n ; } 007F5F OF lea eax , [ n ] 007F5F 12 push eax 007F5F 13 lea ecx , [ fun ] 007F5F 16 call < 1 ambda_681e4b0e14b637a31b672c8686ddc480 >::< lambda_681e4b0e4b637a31b672c8686ddc480 > ( 07F 33 A0h ) \u5982\u4e0b\u8c03\u7528\u793a\u4f8b\uff0c\u53ef\u4ee5\u770b\u5230\u662f\u901a\u8fc7 operator() \u8c03\u7528 fun \uff0c\u5373\u7f16\u8bd1\u5668\u81ea\u52a8\u8f6c\u6362 lambda \u8868\u8fbe\u5f0f\u4e3a\u51fd\u6570\u5bf9\u8c61\u6267\u884c\u3002 fun ( 5 ); 007F5F 1 B push 5 007F5F 1 D lea ecx , [ fun ] 007F5F 20 call < lambda_681e4b0e14b637a31b672c8686ddc480 >:: operator () ( 07F 4080 h ) \u5305\u62ec lambda \u51fd\u6570\u7684 \u95ed\u5305\u7279\u6027 \u4e0e\u7528\u6210\u5458\u4fdd\u5b58\u72b6\u6001\u539f\u7406\u662f\u57fa\u672c\u4e00\u81f4\u7684\u3002","title":"\u4eff\u51fd\u6570"},{"location":"learn_cpp/06_functor.html#_1","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6006_\u767e\u53d8\u51fd\u6570 \u672c\u671f\u89c6\u9891\u548c\u5927\u5bb6\u5206\u4eab\u4e00\u4e0b\u4eff\u51fd\u6570\u8fd9\u4e2a\u77e5\u8bc6\u70b9\u3002\u672c\u89c6\u9891\u5305\u62ec\u4e09\u4e2a\u4e3b\u8981\u5185\u5bb9\uff1a \u4eff\u51fd\u6570\u7684\u5b9a\u4e49 \u4eff\u51fd\u6570\u7684\u4e24\u5927\u4f18\u70b9 lambda \u51fd\u6570\u4e5f\u662f\u4e00\u79cd\u4eff\u51fd\u6570","title":"\u4eff\u51fd\u6570"},{"location":"learn_cpp/06_functor.html#_2","text":"\u897f\u65b9\u6709\u53e5\u8c1a\u8bed\uff1a\u5982\u679c\u4e00\u4e2a\u4e1c\u897f\u770b\u8d77\u6765\u50cf\u9e2d\u5b50\uff0c\u8d70\u8d77\u6765\u50cf\u9e2d\u5b50\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e00\u53ea\u9e2d\u5b50\u3002\u800c\u5982\u679c\u4e00\u6837\u4e1c\u897f\uff0c\u4e0d\u662f\u51fd\u6570\uff0c\u4f46\u662f\u5177\u6709\u51fd\u6570\u7684\u6027\u8d28\uff0c\u4f8b\u5982\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u3001\u4f20\u53c2\u3001\u8fd4\u56de\u503c\uff0c\u90a3\u5b83\u662f\u4ec0\u4e48\u5462\uff1fC++ \u4e2d\u5c06\u5176\u79f0\u4e3a \u4eff\u51fd\u6570 \u3002 \u4e2d\u89c4\u4e2d\u77e9\u7684\u5b9a\u4e49\u548c\u8c03\u7528\u51fd\u6570\u65b9\u5f0f\uff1a #include <iostream> void show_value ( int x ) { std :: cout << x << std :: endl ; } int main ( int argc , char * argv []) { show_value ( 10 ); return 0 ; } \u4eff\u51fd\u6570\u4e0d\u662f\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u3001\u4f20\u53c2\u3001\u8fd4\u56de\u503c\u3002\u90a3\u4e48\u5982\u4f55\u5b9a\u4e49\u4eff\u51fd\u6570\uff1f\u7b54\u6848\u662f\u91cd\u8f7d \u62ec\u53f7\u8fd0\u7b97\u7b26 \u3002\u5982\u4e0b\u4ee3\u7801\u662f\u4e00\u4e2a\u4eff\u51fd\u6570\u793a\u4f8b\u3002 #include <iostream> struct CMyFunctor { void operator ()( int x ) { std :: cout << x << std :: endl ; } }; int main ( int argc , char * argv []) { // auto p = CMyFunctor(); // \u5b9e\u4f8b\u5316\u7ed3\u6784\u4f53 // p(10); // \u8c03\u7528\u5b9e\u4f8b\u5316\u5bf9\u8c61 CMyFunctor ()( 10 ); // \u5c06\u521b\u5efa\u5b9e\u4f8b\u548c\u8c03\u7528\u5199\u5728\u4e00\u8d77\u5373\u4eff\u51fd\u6570 return 0 ; } \u73b0\u4ee3 C++ \u4ee3\u7801\u4e2d\u4f1a\u5927\u91cf\u4f7f\u7528\u4eff\u51fd\u6570\uff0c\u5982 OneFlow \u7684\u7b97\u5b50\u5c42 \uff1a class ReduceSumFunctor { public : ReduceSumFunctor () { op_ = CHECK_JUST ( one :: OpBuilder ( \"reduce_sum\" ). Input ( \"input_tensor\" ). Output ( \"output_tensor\" ). Build ()); } Maybe < Tensor > operator ()( const std :: shared_ptr < one :: Tensor >& x , const std :: vector < int32_t >& axis , const bool & keepdims ) const { // const DataType dtype = x->dtype()->data_type(); MutableAttrMap attrs ; if ( axis . empty ()) { std :: vector < int32_t > reduce_axis ( x -> shape () -> NumAxes ()); std :: iota ( reduce_axis . begin (), reduce_axis . end (), 0 ); JUST ( attrs . SetAttr < std :: vector < int32_t >> ( \"axis\" , reduce_axis )); } else { JUST ( attrs . SetAttr < std :: vector < int32_t >> ( \"axis\" , axis )); } JUST ( attrs . SetAttr < bool > ( \"keepdims\" , keepdims )); TensorProcessor tensor_processor ; JUST ( tensor_processor . AddInputs ({ x }, /*lowest_dtype=*/ DType :: Int64 ()). Apply ()); TensorTuple input_tuple = JUST ( tensor_processor . GetInputs ()); return OpInterpUtil :: Dispatch < Tensor > ( * op_ , input_tuple , attrs ); } private : std :: shared_ptr < OpExpr > op_ ; }; \u518d\u5982 OneFlow \u7c7b\u5de5\u5382 \uff1a template < typename FunctorT > struct SimpleFactory { explicit SimpleFactory ( FunctorT functor ) : tpl ( functor ) {} __device__ FunctorT operator ()() const { return tpl ; } private : FunctorT tpl ; };","title":"\u4eff\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u793a\u4f8b"},{"location":"learn_cpp/06_functor.html#_3","text":"\u53ef\u4ee5\u4fdd\u5b58\u72b6\u6001 \u4f5c\u4e3a\u6a21\u677f\u53c2\u6570","title":"\u4eff\u51fd\u6570\u7684\u4f18\u70b9"},{"location":"learn_cpp/06_functor.html#_4","text":"\u4ee5\u8ba1\u7b97\u7a0e\u573a\u666f\u4e3a\u4f8b\uff1a #include <iostream> #include <vector> #include <algorithm> double calc_tax ( double salary ) { // \u8ba1\u7b97\u7a0e\u7684\u51fd\u6570\uff0c\u7a0e\u7387\u4e3a0.2 return salary * 0.2 ; } void show_value ( double value ) { std :: cout << value << \",\" ; } int main ( int argc , char * argv []) std :: vector < double > salary = { 3000 , 5000 , 4800 , 2800 }; // \u6536\u5165 std :: vector < double > tax ( 4 ); // \u7a0e\u7ed3\u679c std :: transform ( salary . begin (), salary . end (), tax . begin (), calc_tax ); // \u904d\u5386\u548c\u8ba1\u7b97\u7a0e\u7387 std :: for_each ( salary . begin (), salary . end (), show_value ); std :: cout << std :: endl ; std :: for_each ( tax . begin (), tax . end (), show_value ); return 0 ; } \u5f53\u5b58\u5728 \u591a\u79cd\u7a0e\u7387 \u7684\u65f6\u5019\uff0c\u9700\u8981\u91cd\u5199 calc_tax \u51fd\u6570\u3002\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u5c06\u7a0e\u7387\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\uff0c\u5373\uff1a double calc_tax_two_args ( double salary , double rate ) { return salary * rate ; } \u4f46\u662f STL \u7684 transform \u51fd\u6570\u63a5\u53d7\u7684\u51fd\u6570\u7c7b\u578b\u53ea\u5141\u8bb8\u6709\u4e00\u4e2a\u53c2\u6570\uff0c calc_tax_two_args \u4f1a\u51fa\u73b0\u7f16\u8bd1\u4e0d\u901a\u8fc7\u95ee\u9898\u3002\u4ee5\u4e0a\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4eff\u51fd\u6570\u5f97\u5230\u89e3\u51b3\u3002\u5982\u4e0b\u5217\u4ee3\u7801\u6240\u793a\uff0c\u4f7f\u7528 _rate \u4fdd\u5b58\u7a0e\u7387\uff0c\u5728\u65b0\u5efa\u5b9e\u4f8b\u7684\u65f6\u5019\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7a0e\u7387\uff0c\u540c\u65f6\u4fdd\u6301 operator \u51fd\u6570\u4ecd\u7136\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\u3002 #include <iostream> #include <vector> #include <algorithm> struct CMyCalcTax { CMyCalcTax ( double rate ) : _rate ( rate ) { } double operator ()( double salary ) { // \u4ecd\u7136\u53ea\u6709\u4e00\u4e2a\u53c2\u6570 return salary * _rate ; } private : double _rate ; // \u7528\u4e8e\u4fdd\u5b58\u7a0e\u7387 } void show__value ( double value ) { std :: cout << value << \",\" ; } int main ( int argc , char * argv []) { std :: vector < double > salaryl = { 3000 , 5000 , 4800 , 2800 }; std :: vector < double > salary2 = { 3000 , 5000 , 4800 , 2800 }; std :: vector < double > tax1 ( 4 ); std :: vector < double > tax2 ( 4 ); std :: transform ( salary1 . begin (), salary1 . end (), tax1 . begin (), CMyCalcTax ( 0.2 )); std :: for_each ( salary1 . begin (), salary1 . end (), show_value ) ; std :: cout << std :: endl ; std :: for_each ( tax1 . begin (), tax1 . end (), show_value ); std :: cout << std :: endl << \"===========\" << std :: endl ; std :: transform ( salary2 . begin (), salary2 . end (), tax2 . begin (), CMyCalcTax ( 0.1 )); std :: for_each ( salary2 . begin (), salary2 . end (), show_value ); std :: cout << std :: endl ; std :: for_each ( tax2 . begin (), tax2 . end (), show_value ); std :: cout << std :: endl ; return 0 ; } \u4ece\u4e0a\u8ff0\u5b9e\u4f8b\u4e2d\u4e5f\u53ef\u4ee5\u770b\u51fa\u4eff\u51fd\u6570\u53ef\u4ee5\u6709\u72b6\u6001\uff0c\u800c\u8fd9\u4e00\u7279\u6027\u4f7f\u5f97\u4eff\u51fd\u6570\u6bd4\u666e\u901a\u51fd\u6570\u66f4\u52a0\u7075\u6d3b\u3002","title":"\u53ef\u4ee5\u4fdd\u5b58\u72b6\u6001"},{"location":"learn_cpp/06_functor.html#_5","text":"\u8fd9\u4e00\u4f18\u70b9\u4f53\u73b0\u5728\u6a21\u677f\u7f16\u7a0b\u4e2d\u3002\u56e0\u4e3a\u4eff\u51fd\u6570\u7684\u672c\u8d28\u662f \u7c7b\u6216\u8005\u7ed3\u6784\u4f53\u7684\u5bf9\u8c61 \uff0c\u8fd9\u5c31\u4f7f\u5f97\u53ef\u4ee5\u628a\u4eff\u51fd\u6570\u7684\u7c7b\u578b\u5f53\u4f5c\u6a21\u677f\u53c2\u6570\u8fdb\u884c\u4f20\u9012\u3002\u4e8e\u662f\u67d0\u4e9b\u65f6\u5019\u5c31\u53ef\u4ee5\u628a\u8fd0\u884c\u65f6\u7684\u5f00\u9500\u5728\u7f16\u8bd1\u65f6\u89e3\u51b3\u6389\uff0c\u8fd9\u4e5f\u53ef\u4ee5\u8ba9\u8f6f\u4ef6\u7684\u6548\u7387\u53d8\u5f97\u66f4\u9ad8\u3002 \u4ec0\u4e48\u662f\u7f16\u8bd1\u65f6\u7684\u5f00\u9500\uff1f\u4ee5 STL \u7684 for_each \u51fd\u6570\u4e3a\u4f8b\uff0c\u90e8\u5206\u6e90\u7801\u5982\u4e0b\uff1a template < typename _InputIterator , typename _Function > _Function for_each ( _InputIterator __first , _InputIterator __last , _Function __f ) { // concept requirements __glibcxx_function_requires ( _InputIteratorConcept < _InputIterator > ) __glibcxx_requires_valid_range ( __first , __last ); for (; __first != __last ; ++ __first ) __f ( * __first ); return __f ; // N.B. [alg.foreach] says std::move(f) but it's redundant. } for_each \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u5c31\u662f\u51fd\u6570\u6307\u9488 __f \uff0c\u5728\u51fd\u6570\u5185\u90e8\u4f1a\u904d\u5386\u6bcf\u4e00\u4e2a\u6307\u9488\uff0c\u5e76\u4e14\u628a\u51fd\u6570\u6307\u9488\u7684\u6548\u679c\u5e94\u7528\u5230\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e0a\u3002\u4f46\u662f\u51fd\u6570\u65e2\u7136\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\u4e86\u5c31\u6d89\u53ca\u5230 \u6808\u8d44\u6e90\u7684\u5206\u914d\u548c\u56de\u6536 \uff0c\u90a3\u5c31\u4f1a\u4ea7\u751f\u8fd0\u884c\u65f6\u7684\u5f00\u9500\u3002 \u5177\u4f53\u89e3\u91ca\u8282\u7701\u8fd0\u884c\u65f6\u5f00\u9500\uff1a\u5728\u5e95\u5c42\u7684\u673a\u5668\u7801\u4e2d\uff0c\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u53c2\u6570\u662f\u9700\u8981\u901a\u8fc7\u5165\u6808\u51fa\u6808\u64cd\u4f5c\u6307\u4ee4\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u7684\uff0c\u53c2\u6570\u4e2a\u6570\u8d8a\u591a\uff0c\u5219\u5bf9\u5e94\u7684\u4f20\u8f93\u6307\u4ee4\u8d8a\u591a\uff0c\u9700\u8981\u8d8a\u591a\u989d\u5916\u8fd0\u884c\u65f6\u95f4\uff0c\u8fd9\u5c31\u662f\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u3002\u4eff\u51fd\u6570\u53ef\u4ee5\u4f7f\u67d0\u4e9b\u4e0d\u7ecf\u5e38\u53d8\u7684\u53c2\u6570\uff08\u5982\u793a\u4f8b\u4ee3\u7801\u4e2d\u7684\u7a0e\u7387\uff09\u4e0d\u518d\u901a\u8fc7\u53c2\u6570\u4f20\u9012\u3001\u800c\u662f\u76f8\u5f53\u4e8e\u4ee5\u67d0\u4e2a\u5168\u5c40\u53d8\u91cf\u7684\u5f62\u5f0f\u4f20\u9012\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u53c2\u6570\u4e2a\u6570\u3002 \u5982\u679c\u6b64\u65f6\u4f7f\u7528\u7684\u662f\u4eff\u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u7701\u53bb\u8fd9\u90e8\u5206\u5f00\u9500\u3002\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff0c\u81ea\u5b9a\u4e49\u4e00\u4e2a my_for_each \u3002\u56e0\u4e3a\u662f\u6a21\u677f\u7f16\u7a0b\uff0c\u6240\u4ee5\u5728\u7f16\u8bd1\u65f6\u5c31\u53ef\u4ee5\u5b8c\u5168\u786e\u5b9a\uff0c\u6240\u4ee5\u5728\u8fd0\u884c\u65f6\u5c31\u4e0d\u4f1a\u6709\u989d\u5916\u7684\u5f00\u9500\u4e86\u3002 #include <iostream> #include <vector> struct CMyFunctor { void operator ()( double value ) { std :: cout << value << \",\" ; } }; template < class InputIt , class UnaryFunction > // \u4f7f\u7528\u6a21\u677f\u53c2\u6570\u6765\u5904\u7406\u6bcf\u4e00\u4e2a\u5143\u7d20 UnaryFunction my_for_each ( InputIt first , InputIt last ) { for (; first != last ; ++ first ) { UnaryFunction ()( * first ); } return UnaryFunction (); } void show_value ( double value ){ std :: cout << value << \",\" ; } int main ( int argc , char * argv []) { std :: vector < double > salary = { 3000 , 5000 , 4800 , 2800 }; my_for_each < decltype ( salary . begin ()), CMyFunctor > ( salary . begin (), salary . end ()); return 0 ; }","title":"\u4f5c\u4e3a\u6a21\u677f\u53c2\u6570"},{"location":"learn_cpp/06_functor.html#c-lambda","text":"lambda \u51fd\u6570\u7684\u672c\u8d28\u4e0e\u524d\u9762\u8bb2\u7684\u901a\u8fc7\u91cd\u8f7d operator() \u662f\u4e00\u6a21\u4e00\u6837\u7684\u3002\u5982\u4e0b\u6240\u793a\u4ece\u6c47\u7f16\u8bed\u8a00\u89d2\u5ea6\u770b lambda \u51fd\u6570\uff0c\u5b9a\u4e49 fun \u65f6\uff0c n \u653e\u5165 eax \u5bc4\u5b58\u5668\u4e2d\uff0c\u5e76\u88ab push \u8fdb\u6808\uff1b fun \u653e\u5165 ecx \u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\u51fd\u6570\u5b58\u653e\u5730\u5740\u3002 auto fun = [ = ]( int x ) -> int { return X + n ; } 007F5F OF lea eax , [ n ] 007F5F 12 push eax 007F5F 13 lea ecx , [ fun ] 007F5F 16 call < 1 ambda_681e4b0e14b637a31b672c8686ddc480 >::< lambda_681e4b0e4b637a31b672c8686ddc480 > ( 07F 33 A0h ) \u5982\u4e0b\u8c03\u7528\u793a\u4f8b\uff0c\u53ef\u4ee5\u770b\u5230\u662f\u901a\u8fc7 operator() \u8c03\u7528 fun \uff0c\u5373\u7f16\u8bd1\u5668\u81ea\u52a8\u8f6c\u6362 lambda \u8868\u8fbe\u5f0f\u4e3a\u51fd\u6570\u5bf9\u8c61\u6267\u884c\u3002 fun ( 5 ); 007F5F 1 B push 5 007F5F 1 D lea ecx , [ fun ] 007F5F 20 call < lambda_681e4b0e14b637a31b672c8686ddc480 >:: operator () ( 07F 4080 h ) \u5305\u62ec lambda \u51fd\u6570\u7684 \u95ed\u5305\u7279\u6027 \u4e0e\u7528\u6210\u5458\u4fdd\u5b58\u72b6\u6001\u539f\u7406\u662f\u57fa\u672c\u4e00\u81f4\u7684\u3002","title":"C++ \u4e2d\u7684 lambda \u4e5f\u662f\u4e00\u79cd\u4eff\u51fd\u6570"},{"location":"learn_cpp/07_complie_link_macro.html","text":"\u7f16\u8bd1\u94fe\u63a5\u548c\u5b8f\u672c\u8d28 \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6007_\u7a0b\u5e8f\u5458\u7684\u81ea\u6211\u4fee\u517b\uff1a\u7f16\u8bd1\u94fe\u63a5\u548c\u5b8f\u672c\u8d28 \u672c\u671f\u6211\u4eec\u8981\u56de\u987e\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u5185\u5bb9 C/C++ \u7a0b\u5e8f\u7684\u7f16\u8bd1\u3001\u94fe\u63a5\u3001\u8fd0\u884c \uff0c\u8fd9\u6709\u52a9\u4e8e\u7406\u89e3\u4e4b\u540e\u8981\u8bb2\u7684 \u6a21\u677f \u7684\u9ad8\u7ea7\u7279\u6027\u76f8\u5173\u5185\u5bb9\u3002\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u867d\u7136\u7ecf\u5178\uff0c\u4f46\u662f\u8003\u8651\u5230\u6709\u90e8\u5206\u8bfb\u8005\u6ca1\u6709\u4e86\u89e3\u8fc7\uff0c\u8fd8\u662f\u6709\u5fc5\u8981\u4e13\u95e8\u8bb2\u89e3\u7684\u3002\u5982\u679c\u60f3\u8981\u66f4\u6df1\u5165\u7406\u89e3\uff0c\u53ef\u4ee5\u53bb 2021 \u5e74\u7684 cpp conference\uff0c\u6709\u5173\u4e8e\u7f16\u8bd1\u548c\u94fe\u63a5\u7684 \u4e13\u9898\u89c6\u9891 \u3002 \u672c\u671f\u6587\u7ae0\u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a C \u7a0b\u5e8f\u7684\u7f16\u8bd1\u3001\u94fe\u63a5\u548c\u8fd0\u884c \u5b8f\u7684\u672c\u8d28\u548c\u4f18\u7f3a\u70b9 C \u7a0b\u5e8f\u7684\u7f16\u8bd1\u3001\u94fe\u63a5\u548c\u8fd0\u884c \u00b6 \u5148\u4ece C++ \u7a0b\u5e8f\u7684\u4e60\u60ef\u8c08\u8d77\uff0c\u76f8\u4fe1\u5927\u5bb6\u5728\u7f16\u5199 C/C++ \u7a0b\u5e8f\u65f6\u90fd\u4f1a\u88ab\u544a\u77e5\u8fd9\u6837\u7684\u201c\u7ea6\u5b9a\u201d\u3002 \u6bd4\u5982\uff1a \u58f0\u660e\u8981\u5199\u5728\u5934\u6587\u4ef6\u4e2d \u5b9e\u73b0\u8981\u653e\u5728\u6e90\u6587\u4ef6 cpp \u6587\u4ef6\u4e2d \u5168\u5c40\u53d8\u91cf\u7684\u58f0\u660e\u8981\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u8981\u52a0\u4e0a extern \u5173\u952e\u5b57\uff0c\u8fd8\u4e0d\u80fd\u8d4b\u503c \u4f46\u662f\uff0c\u5728 C++ \u6807\u51c6\u4e2d\uff0c\u5e76\u6ca1\u6709\u5bf9\u54ea\u4e9b\u58f0\u660e\u5e94\u8be5\u653e\u5728\u5934\u6587\u4ef6\uff0c\u54ea\u4e9b\u58f0\u660e\u5e94\u8be5\u653e\u5728\u6e90\u6587\u4ef6\u4e2d\u6709\u6807\u51c6\u89c4\u5b9a\uff0c\u8fd9\u79cd\u201c\u7ea6\u5b9a\u201d\u53ea\u662f\u5de5\u7a0b\u7684\u6700\u4f73\u5b9e\u8df5\u3002 \u5b9e\u9645\u4e0a\uff0c \u7f16\u8bd1\u65f6\u7684\u57fa\u672c\u5355\u4f4d\u662f\u6e90\u6587\u4ef6 \u3002\u90a3\u4e48\u5934\u6587\u4ef6\u5230\u5e95\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\u6211\u4eec\u7528 helloworld \u8fd9\u4e2a\u7a0b\u5e8f\u6765\u89e3\u6790\u89e3\u6790\u8fd9\u80cc\u540e\u7684\u539f\u7406\u3002\u56e0\u4e3a IDE \u548c cmake \u8fd9\u7c7b\u6784\u5efa\u5de5\u5177\u4f1a\u5c4f\u853d\u539f\u7406\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ee5\u7eaf\u624b\u5de5 gcc \u7684\u65b9\u5f0f\u6765\u7f16\u8bd1\u3001\u94fe\u63a5\u4e00\u4e2a\u7a0b\u5e8f\u3002 \u5728 main.cpp \u6587\u4ef6\u4e2d\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\uff1a #include <stdio.h> int main ( int argc , char * argv []) { printf ( \"Hello World \\n \" ); return 0 ; } \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 gcc \u6765\u5c06\u8fd9\u4e2a cpp \u6587\u4ef6\u7f16\u8bd1\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff1a gcc main.cpp -o ttlarva.exe \u5373\u53ef\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210 ttlarva.exe \u6587\u4ef6\uff0c\u5e76\u4e14\u8fd0\u884c\u8be5\u6587\u4ef6\u5c31\u53ef\u4ee5\u5f97\u5230 Hello World \u7684\u6253\u5370\u7ed3\u679c\u3002 \u4e0d\u8fc7\u8fd9\u6837\u4f9d\u7136\u5c4f\u853d\u4e86\u7a0b\u5e8f\u8bde\u751f\u7684\u7ec6\u8282\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e00\u884c\u547d\u4ee4 gcc \u5e2e\u6211\u4eec\u5b8c\u6210\u4e86\u4e09\u4ef6\u4e8b\u60c5\uff1a\u9884\u7f16\u8bd1\u3001\u7f16\u8bd1\u3001\u94fe\u63a5\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u901a\u8fc7\u5bf9 gcc \u8bbe\u7f6e\u7f16\u8bd1\u9009\u9879\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u51e0\u4e2a\u8fc7\u7a0b\u7684\u7ec6\u8282\u3002 \u9884\u7f16\u8bd1 \u00b6 gcc \u4e2d\u7684 -E \u9009\u9879\u53ef\u4ee5\u663e\u793a\u9884\u7f16\u8bd1\u7684\u7ed3\u679c\uff0c\u6240\u8c13\u9884\u7f16\u8bd1\u5c31\u662f\u628a\u9884\u7f16\u8bd1\u6307\u4ee4\u7ed9\u8f6c\u5316\u4e3a\u7eaf C \u4ee3\u7801\u3002\u901a\u8fc7\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\u8fdb\u884c \u9884\u7f16\u8bd1 \uff1a gcc -E main.cpp > main.i \u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u83b7\u5f97\u4e86\u4e00\u4e2a main.i \u6587\u4ef6\u3002\u6253\u5f00\u8be5\u6587\u4ef6\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u539f\u672c\u7b80\u5355\u51e0\u884c\u7684 helloworld \u4ee3\u7801\u53d8\u6210\u4e86\u8fd1\u5343\u884c\u3002\u4e14\u5728\u4ee3\u7801\u7684\u6700\u672b\u5c3e\u90e8\u5206\uff0c\u5c31\u662f\u6211\u4eec\u5728 main.cpp \u4e2d\u5199\u7684 main \u51fd\u6570\u3002 883 # 3 \"main.cpp\" 884 int main ( int argc , char * argv []) 885 { 886 printf ( \"Hello World \\n \" ); 887 return 0 ; 888 } \u90a3\u4e0a\u9762\u591a\u51fa\u7684\u51e0\u767e\u884c\u4ee3\u7801\u662f\u600e\u4e48\u6765\u7684\u5462\uff1f\u5176\u5b9e\u5bf9\u6bd4\u53ef\u4ee5\u53d1\u73b0\uff0c\u539f\u672c #include <stdio.h> \u5728\u7684\u4f4d\u7f6e\u53d8\u6210\u4e86\u90a3\u4e9b\u65b0\u7684\u4ee3\u7801\u3002\u8fd9\u4e9b\u4ee3\u7801\u5c31\u662f #include <stdio.h> \u8fd9\u4e00\u6761\u9884\u7f16\u8bd1\u6307\u4ee4\u5f97\u6765\u7684\u3002 include \u7684\u4f5c\u7528\u5927\u5bb6\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\uff1a\u627e\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\uff0c\u7136\u540e\u628a\u6587\u4ef6\u7684\u5185\u5bb9\u590d\u5236\u7c98\u8d34\u5230\u5f53\u524d\u7684\u6e90\u6587\u4ef6\u4e2d\u3002\u5927\u5bb6\u53ef\u4ee5\u9a8c\u8bc1 main.i \u4e0a\u65b9\u7684\u4ee3\u7801\u5c31\u662f stdio.h \u4e2d\u7684\u5185\u5bb9\u3002 \u901a\u8fc7\u4ee5\u4e0a\u5185\u5bb9\uff0c\u76f8\u4fe1\u5927\u5bb6\u5e94\u8be5\u5bf9 include \u7684\u672c\u8d28\u6709\u4e86\u5927\u81f4\u7684\u4e86\u89e3\u4e86\u3002\u90a3\u4e48\u7406\u89e3\u4e86\u4ee5\u4e0a\u539f\u7406\u4e4b\u540e\u5462\uff0c\u76f8\u4fe1\u5927\u5bb6\u4e5f\u5e94\u8be5\u80fd\u7406\u89e3\u6211\u4eec\u5f00\u7bc7\u6240\u8bf4\u7684\u90a3\u4e00\u4e9b\u7f16\u7a0b\u4e60\u60ef\u4e86\u3002 Q 1\uff1a\u4e3a\u4ec0\u4e48\u53ea\u6709\u6e90\u6587\u4ef6\u662f\u7f16\u8bd1\u57fa\u672c\u5355\u4f4d\uff1f A 1\uff1a\u56e0\u4e3a\u5934\u6587\u4ef6\u5176\u5b9e\u662f\u4ee5\u590d\u5236\u7c98\u8d34\u7684\u65b9\u5f0f\uff0c\u88ab\u7c98\u8d34\u5230\u4e86\u6e90\u6587\u4ef6\u4e2d\u518d\u7f16\u8bd1\u3002 Q 2\uff1a\u4e3a\u4ec0\u4e48\u51fd\u6570\u7684\u5b9a\u4e49\u4e00\u822c\u4e0d\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff1f A 2\uff1a\u56e0\u4e3a\u5982\u679c\u628a\u51fd\u6570\u7684\u5b9a\u4e49\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u90a3\u4e48\u5934\u6587\u4ef6\u88ab\u591a\u4e2a\u6e90\u6587\u4ef6 include \u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u51fd\u6570\u88ab\u591a\u6b21\u91cd\u590d\u5b9a\u4e49\uff0c\u9020\u6210\u51b2\u7a81\u3002 \u7f16\u8bd1 \u00b6 \u9884\u7f16\u8bd1\u5f97\u5230\u7684\u7eaf C \u4ee3\u7801\u6587\u4ef6\u7ecf\u8fc7\u7f16\u8bd1\u5c31\u53ef\u4ee5\u5f97\u5230\u4e86 object \u6587\u4ef6\u3002object \u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u5bf9\u5e94\u7684\u673a\u5668\u7801\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u5c06 main.cpp \u7f16\u8bd1 \u6210 main.o \u6587\u4ef6\u3002 gcc - c main.cpp main.o \u6587\u4ef6\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5305\u542b\u4e86\u7a0b\u5e8f\u529f\u80fd\u7684\u673a\u5668\u7801\u3002\u4e0d\u8fc7\u5b83\u5e76\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\uff0c\u9700\u8981\u94fe\u63a5\u624d\u53ef\u4ee5\u3002 \u94fe\u63a5 \u00b6 \u4e3a\u4ec0\u4e48\u6211\u4eec\u7f16\u8bd1\u5f97\u5230\u7684\u673a\u5668\u7801\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\uff0c\u800c\u662f\u8981\u7ecf\u8fc7\u94fe\u63a5\u624d\u80fd\u6210\u4e3a\u7a0b\u5e8f\u5462\uff1f \u8fd9\u5176\u5b9e\u662f\u56e0\u4e3a\u5f53\u524d\u7f16\u8bd1\u5355\u5143\uff08\u5373\u5f53\u524d\u6e90\u6587\u4ef6\uff09\u6240\u8c03\u7528\u5230\u7684\u51fd\u6570\uff0c\u5b83\u7684\u5b9e\u73b0\u4e0d\u4e00\u5b9a\u5728\u5f53\u524d\u7684\u7f16\u8bd1\u5355\u5143\u4e2d\uff0c\u53ef\u80fd\u5728\u5176\u4ed6 cpp \u4e2d\u5b9e\u73b0\u3002\u5c31\u50cf\u6211\u4eec\u524d\u9762\u8c03\u7528\u7684 printf \u51fd\u6570\uff0c\u5b83\u7684\u5b9e\u73b0\u4e5f\u5e76\u4e0d\u662f\u6211\u4eec\u5b9e\u73b0\u7684\uff0c\u800c\u662f\u5e93\u51fd\u6570\u5b9e\u73b0\u7684\u3002 \u94fe\u63a5\u7684\u8d23\u4efb\u5c31\u662f\u628a\u5404\u4e2a\u7f16\u8bd1\u5355\u5143\u7ed9\u201c\u62fc\u63a5\u201d\u5230\u4e00\u8d77\uff0c\u201c\u6253\u901a\u201d\u5404\u4e2a object \u6587\u4ef6\u4e4b\u95f4\u7684\u8c03\u7528\u5173\u7cfb\u3002 \u6211\u4eec\u901a\u8fc7\u4e0b\u9762\u7684\u4f8b\u5b50\u83b7\u5f97\u66f4\u6e05\u695a\u7684\u7406\u89e3\u3002 \u9996\u5148\u6211\u4eec\u521b\u5efa\u4e00\u4e2a my_math.cpp \u6587\u4ef6\u3002 int my_add ( int a , int b ) { retrun a + b ; } \u518d\u5728 main.cpp \u6587\u4ef6\u4e2d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002 #include <stdio.h> int my_add ( int a , int b ) int main ( int argc , char * argv []) { printf ( \"5+9=%d \\n \" , my_add ( 5 , 9 )); return 0 ; } \u7136\u540e\u5206\u522b\u7f16\u8bd1\u8fd9\u4e24\u4e2a\u6587\u4ef6\u3002 gcc - c main.cpp gcc - c my_math.cpp \u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86 main.o \u548c my_math.o \u4e24\u4e2a object \u6587\u4ef6\u3002 \u63a5\u7740\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u5c06\u4e24\u4e2a\u6587\u4ef6 \u94fe\u63a5 \u5230\u4e00\u8d77\u3002 gcc main.o my_math.o -o ttlarva.exe \u6211\u4eec\u5c31\u83b7\u5f97\u4e86\u7c7b\u4f3c\u4e4b\u524d\u7684\u53ef\u6267\u884c\u7a0b\u5e8f ttlarva.exe \uff0c\u8fd0\u884c\u8be5\u7a0b\u5e8f\u5c31\u5f97\u5230\u4e86 5+9=14 \u7684\u8ba1\u7b97\u6253\u5370\u7ed3\u679c\u3002 \u5bf9\u8fd9\u79cd\u591a\u4e2a\u6e90\u6587\u4ef6\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u4f7f\u7528 gcc main.cpp \u76f4\u63a5\u83b7\u5f97\u7ed3\u679c\uff0c\u4f1a\u62a5\u9519\u627e\u4e0d\u5230 my_add(int, int) \u51fd\u6570\u7684\u5f15\u7528\u3002\u8fd9\u4e5f\u662f\u56e0\u4e3a\u94fe\u63a5\u8fc7\u7a0b\u4e2d\u627e\u4e0d\u5230 my_add \u7684\u5b9e\u73b0\u3002 \u5b8f\u7684\u672c\u8d28\u548c\u4f18\u7f3a\u70b9 \u00b6 \u5b8f\u548c C++ \u4e2d\u7684\u6a21\u677f\u606f\u606f\u76f8\u5173\uff0c\u53ef\u4ee5\u8fd9\u6837\u8bf4\uff0c\u8bf4\u660e\u6a21\u677f\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u96c6\u6210\u5b8f\u7684\u4f18\u70b9\uff0c\u89e3\u51b3\u5b8f\u7684\u7f3a\u70b9\u3002 \u5b8f\u7684\u672c\u8d28 \u00b6 \u5b8f\u7684\u672c\u8d28\u5c31\u662f \u67e5\u627e\u66ff\u6362 \uff0c\u6240\u4ee5\u5927\u5bb6\u5e94\u8be5\u6709\u770b\u5230\u4f7f\u7528\u5b8f\u6765\u4ee3\u66ff\u51fd\u6570\u7684\u573a\u666f\u3002 #define MYMAX(x,y)((x)<(y)?(y):(x)) \u5b8f\u7684\u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9: - \u4f7f\u7528\u5b8f\u6765\u4ee3\u66ff\u51fd\u6570\u80fd\u63d0\u9ad8\u6548\u7387\u3002\u56e0\u4e3a\u4f7f\u7528\u5b8f\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7701\u53bb\u51fd\u6570\u8c03\u7528\u548c\u8fd4\u56de\u65f6\u7684\u5f00\u9500\u4e86\u3002 \u7f3a\u70b9\uff1a - \u5b8f\u662f\u6ca1\u6709\u7c7b\u578b\u68c0\u67e5\u7684 \u6211\u4eec\u901a\u8fc7\u4e0b\u9762\u7684\u4f8b\u5b50\u83b7\u5f97\u66f4\u6e05\u695a\u7684\u7406\u89e3\u3002 #include <stdio.h> #define MYMAX(x,y)((x)<(y)?(y):(x)) int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX ( 3.14 , 2.73 )); printf ( \"%s \\n \" , MYMAX ( \"short string\" , \"very very long string\" )); return 0 ; } \u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e00\u4e2a MYMAX \u7684\u5b8f\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u53d6 x \u548c y \u4e2d\u7684\u8f83\u5927\u8005\u3002 \u8fd0\u884c\u540e\u53d1\u73b0\u5982\u4e0b\u8f93\u51fa\uff1a 10 3.140000 very very long string \u8fd0\u884c\u6ca1\u6709\u62a5\u9519\uff0c\u548b\u4e00\u770b\u8f93\u51fa\u7ed3\u679c\u597d\u50cf\u4e5f\u5e76\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u5176\u5b9e\u6211\u4eec\u6700\u540e\u4e00\u6b21\u8c03\u7528\u662f\u6709\u95ee\u9898\u7684\u3002 \u6211\u4eec\u8f93\u51fa very very long string \u5e76\u4e0d\u662f\u56e0\u4e3a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6bd4\u8f83\u957f\uff0c\u53ea\u662f\u6211\u4eec\u8fd0\u6c14\u597d\u3002 \u5f53\u6211\u4eec\u8c03\u6362\u6700\u540e\u4e00\u6b21\u8c03\u7528\u4e24\u4e2a\u53c2\u6570\u7684\u4f4d\u7f6e\u65f6\uff1a #include <stdio.h> #define MYMAX(x,y)((x)<(y)?(y):(x)) int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX ( 3.14 , 2.73 )); //printf(\"%s\\n\", MYMAX(\"short string\",\"very very long string\")); printf ( \"%s \\n \" , MYMAX ( \"very very long string\" , \"short string\" )); return 0 ; } \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a 10 3.140000 short string \u7b2c\u4e09\u6b21\u8c03\u7528\u7684\u7ed3\u679c\u4e0d\u518d\u662f very very long string \u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u6211\u4eec\u6839\u636e MYMAX \u5b8f\u7684\u5b9a\u4e49\u53ef\u4ee5\u77e5\u9053\uff0c\u5728\u4f20\u9012\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u5b9e\u9645\u4e0a\u662f\u5176\u5185\u5b58\u4e2d\u5730\u5740\u7684\u6bd4\u8f83\uff0c\u800c\u4e24\u8005\u5730\u5740\u7684\u6bd4\u8f83\u5728\u8bed\u8a00\u6807\u51c6\u4e2d\u662f\u6ca1\u6709\u53bb\u505a\u8fc7\u660e\u786e\u89c4\u5b9a\u7684\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u7f16\u5199\u4e86\u4e00\u6bb5\u610f\u4e49\u4e0d\u5927\u7684\u4ee3\u7801\uff0c\u5b83\u7684\u8fd0\u884c\u7ed3\u679c\u548c\u4e1a\u52a1\u903b\u8f91\u5b8c\u5168\u4e0d\u76f8\u5173\u3002\u66f4\u6050\u6016\u7684\u662f\uff0c\u8fd9\u7c7b\u4ee3\u7801\u5728\u7f16\u8bd1\u65f6\uff0c\u8fde\u4e2a\u62a5\u9519\u6216\u8005\u662f\u8b66\u544a\u90fd\u6ca1\u6709\u3002\u8fd9\u76f4\u63a5\u62d4\u9ad8\u4e86\u6211\u4eec\u4ee5\u540e\u67e5\u627e bug \u7684\u96be\u5ea6\u3002 \u90a3\u4e48\u6709\u6ca1\u6709\u4e00\u79cd\u65e2\u7ee7\u627f\u4e86\u5b8f\u4f18\u70b9\uff0c\u53c8\u5f25\u8865\u4e86\u5b8f\u6ca1\u6709\u7c7b\u578b\u68c0\u67e5\u7f3a\u9677\u7684\u65b9\u6cd5\u5462\uff1f\u5f53\u7136\u6709\uff01\u5b83\u5c31\u662f\u6211\u4eec\u4e0b\u4e00\u671f\u8981\u8bb2\u7684 \u6a21\u677f \u3002","title":"\u7f16\u8bd1\u94fe\u63a5\u548c\u5b8f\u672c\u8d28"},{"location":"learn_cpp/07_complie_link_macro.html#_1","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6007_\u7a0b\u5e8f\u5458\u7684\u81ea\u6211\u4fee\u517b\uff1a\u7f16\u8bd1\u94fe\u63a5\u548c\u5b8f\u672c\u8d28 \u672c\u671f\u6211\u4eec\u8981\u56de\u987e\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u5185\u5bb9 C/C++ \u7a0b\u5e8f\u7684\u7f16\u8bd1\u3001\u94fe\u63a5\u3001\u8fd0\u884c \uff0c\u8fd9\u6709\u52a9\u4e8e\u7406\u89e3\u4e4b\u540e\u8981\u8bb2\u7684 \u6a21\u677f \u7684\u9ad8\u7ea7\u7279\u6027\u76f8\u5173\u5185\u5bb9\u3002\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u867d\u7136\u7ecf\u5178\uff0c\u4f46\u662f\u8003\u8651\u5230\u6709\u90e8\u5206\u8bfb\u8005\u6ca1\u6709\u4e86\u89e3\u8fc7\uff0c\u8fd8\u662f\u6709\u5fc5\u8981\u4e13\u95e8\u8bb2\u89e3\u7684\u3002\u5982\u679c\u60f3\u8981\u66f4\u6df1\u5165\u7406\u89e3\uff0c\u53ef\u4ee5\u53bb 2021 \u5e74\u7684 cpp conference\uff0c\u6709\u5173\u4e8e\u7f16\u8bd1\u548c\u94fe\u63a5\u7684 \u4e13\u9898\u89c6\u9891 \u3002 \u672c\u671f\u6587\u7ae0\u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a C \u7a0b\u5e8f\u7684\u7f16\u8bd1\u3001\u94fe\u63a5\u548c\u8fd0\u884c \u5b8f\u7684\u672c\u8d28\u548c\u4f18\u7f3a\u70b9","title":"\u7f16\u8bd1\u94fe\u63a5\u548c\u5b8f\u672c\u8d28"},{"location":"learn_cpp/07_complie_link_macro.html#c","text":"\u5148\u4ece C++ \u7a0b\u5e8f\u7684\u4e60\u60ef\u8c08\u8d77\uff0c\u76f8\u4fe1\u5927\u5bb6\u5728\u7f16\u5199 C/C++ \u7a0b\u5e8f\u65f6\u90fd\u4f1a\u88ab\u544a\u77e5\u8fd9\u6837\u7684\u201c\u7ea6\u5b9a\u201d\u3002 \u6bd4\u5982\uff1a \u58f0\u660e\u8981\u5199\u5728\u5934\u6587\u4ef6\u4e2d \u5b9e\u73b0\u8981\u653e\u5728\u6e90\u6587\u4ef6 cpp \u6587\u4ef6\u4e2d \u5168\u5c40\u53d8\u91cf\u7684\u58f0\u660e\u8981\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u8981\u52a0\u4e0a extern \u5173\u952e\u5b57\uff0c\u8fd8\u4e0d\u80fd\u8d4b\u503c \u4f46\u662f\uff0c\u5728 C++ \u6807\u51c6\u4e2d\uff0c\u5e76\u6ca1\u6709\u5bf9\u54ea\u4e9b\u58f0\u660e\u5e94\u8be5\u653e\u5728\u5934\u6587\u4ef6\uff0c\u54ea\u4e9b\u58f0\u660e\u5e94\u8be5\u653e\u5728\u6e90\u6587\u4ef6\u4e2d\u6709\u6807\u51c6\u89c4\u5b9a\uff0c\u8fd9\u79cd\u201c\u7ea6\u5b9a\u201d\u53ea\u662f\u5de5\u7a0b\u7684\u6700\u4f73\u5b9e\u8df5\u3002 \u5b9e\u9645\u4e0a\uff0c \u7f16\u8bd1\u65f6\u7684\u57fa\u672c\u5355\u4f4d\u662f\u6e90\u6587\u4ef6 \u3002\u90a3\u4e48\u5934\u6587\u4ef6\u5230\u5e95\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\u6211\u4eec\u7528 helloworld \u8fd9\u4e2a\u7a0b\u5e8f\u6765\u89e3\u6790\u89e3\u6790\u8fd9\u80cc\u540e\u7684\u539f\u7406\u3002\u56e0\u4e3a IDE \u548c cmake \u8fd9\u7c7b\u6784\u5efa\u5de5\u5177\u4f1a\u5c4f\u853d\u539f\u7406\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ee5\u7eaf\u624b\u5de5 gcc \u7684\u65b9\u5f0f\u6765\u7f16\u8bd1\u3001\u94fe\u63a5\u4e00\u4e2a\u7a0b\u5e8f\u3002 \u5728 main.cpp \u6587\u4ef6\u4e2d\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\uff1a #include <stdio.h> int main ( int argc , char * argv []) { printf ( \"Hello World \\n \" ); return 0 ; } \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 gcc \u6765\u5c06\u8fd9\u4e2a cpp \u6587\u4ef6\u7f16\u8bd1\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\uff1a gcc main.cpp -o ttlarva.exe \u5373\u53ef\u5728\u5f53\u524d\u76ee\u5f55\u751f\u6210 ttlarva.exe \u6587\u4ef6\uff0c\u5e76\u4e14\u8fd0\u884c\u8be5\u6587\u4ef6\u5c31\u53ef\u4ee5\u5f97\u5230 Hello World \u7684\u6253\u5370\u7ed3\u679c\u3002 \u4e0d\u8fc7\u8fd9\u6837\u4f9d\u7136\u5c4f\u853d\u4e86\u7a0b\u5e8f\u8bde\u751f\u7684\u7ec6\u8282\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e00\u884c\u547d\u4ee4 gcc \u5e2e\u6211\u4eec\u5b8c\u6210\u4e86\u4e09\u4ef6\u4e8b\u60c5\uff1a\u9884\u7f16\u8bd1\u3001\u7f16\u8bd1\u3001\u94fe\u63a5\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u901a\u8fc7\u5bf9 gcc \u8bbe\u7f6e\u7f16\u8bd1\u9009\u9879\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u8fd9\u51e0\u4e2a\u8fc7\u7a0b\u7684\u7ec6\u8282\u3002","title":"C \u7a0b\u5e8f\u7684\u7f16\u8bd1\u3001\u94fe\u63a5\u548c\u8fd0\u884c"},{"location":"learn_cpp/07_complie_link_macro.html#_2","text":"gcc \u4e2d\u7684 -E \u9009\u9879\u53ef\u4ee5\u663e\u793a\u9884\u7f16\u8bd1\u7684\u7ed3\u679c\uff0c\u6240\u8c13\u9884\u7f16\u8bd1\u5c31\u662f\u628a\u9884\u7f16\u8bd1\u6307\u4ee4\u7ed9\u8f6c\u5316\u4e3a\u7eaf C \u4ee3\u7801\u3002\u901a\u8fc7\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\u8fdb\u884c \u9884\u7f16\u8bd1 \uff1a gcc -E main.cpp > main.i \u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u83b7\u5f97\u4e86\u4e00\u4e2a main.i \u6587\u4ef6\u3002\u6253\u5f00\u8be5\u6587\u4ef6\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u539f\u672c\u7b80\u5355\u51e0\u884c\u7684 helloworld \u4ee3\u7801\u53d8\u6210\u4e86\u8fd1\u5343\u884c\u3002\u4e14\u5728\u4ee3\u7801\u7684\u6700\u672b\u5c3e\u90e8\u5206\uff0c\u5c31\u662f\u6211\u4eec\u5728 main.cpp \u4e2d\u5199\u7684 main \u51fd\u6570\u3002 883 # 3 \"main.cpp\" 884 int main ( int argc , char * argv []) 885 { 886 printf ( \"Hello World \\n \" ); 887 return 0 ; 888 } \u90a3\u4e0a\u9762\u591a\u51fa\u7684\u51e0\u767e\u884c\u4ee3\u7801\u662f\u600e\u4e48\u6765\u7684\u5462\uff1f\u5176\u5b9e\u5bf9\u6bd4\u53ef\u4ee5\u53d1\u73b0\uff0c\u539f\u672c #include <stdio.h> \u5728\u7684\u4f4d\u7f6e\u53d8\u6210\u4e86\u90a3\u4e9b\u65b0\u7684\u4ee3\u7801\u3002\u8fd9\u4e9b\u4ee3\u7801\u5c31\u662f #include <stdio.h> \u8fd9\u4e00\u6761\u9884\u7f16\u8bd1\u6307\u4ee4\u5f97\u6765\u7684\u3002 include \u7684\u4f5c\u7528\u5927\u5bb6\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\uff1a\u627e\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\uff0c\u7136\u540e\u628a\u6587\u4ef6\u7684\u5185\u5bb9\u590d\u5236\u7c98\u8d34\u5230\u5f53\u524d\u7684\u6e90\u6587\u4ef6\u4e2d\u3002\u5927\u5bb6\u53ef\u4ee5\u9a8c\u8bc1 main.i \u4e0a\u65b9\u7684\u4ee3\u7801\u5c31\u662f stdio.h \u4e2d\u7684\u5185\u5bb9\u3002 \u901a\u8fc7\u4ee5\u4e0a\u5185\u5bb9\uff0c\u76f8\u4fe1\u5927\u5bb6\u5e94\u8be5\u5bf9 include \u7684\u672c\u8d28\u6709\u4e86\u5927\u81f4\u7684\u4e86\u89e3\u4e86\u3002\u90a3\u4e48\u7406\u89e3\u4e86\u4ee5\u4e0a\u539f\u7406\u4e4b\u540e\u5462\uff0c\u76f8\u4fe1\u5927\u5bb6\u4e5f\u5e94\u8be5\u80fd\u7406\u89e3\u6211\u4eec\u5f00\u7bc7\u6240\u8bf4\u7684\u90a3\u4e00\u4e9b\u7f16\u7a0b\u4e60\u60ef\u4e86\u3002 Q 1\uff1a\u4e3a\u4ec0\u4e48\u53ea\u6709\u6e90\u6587\u4ef6\u662f\u7f16\u8bd1\u57fa\u672c\u5355\u4f4d\uff1f A 1\uff1a\u56e0\u4e3a\u5934\u6587\u4ef6\u5176\u5b9e\u662f\u4ee5\u590d\u5236\u7c98\u8d34\u7684\u65b9\u5f0f\uff0c\u88ab\u7c98\u8d34\u5230\u4e86\u6e90\u6587\u4ef6\u4e2d\u518d\u7f16\u8bd1\u3002 Q 2\uff1a\u4e3a\u4ec0\u4e48\u51fd\u6570\u7684\u5b9a\u4e49\u4e00\u822c\u4e0d\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff1f A 2\uff1a\u56e0\u4e3a\u5982\u679c\u628a\u51fd\u6570\u7684\u5b9a\u4e49\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u90a3\u4e48\u5934\u6587\u4ef6\u88ab\u591a\u4e2a\u6e90\u6587\u4ef6 include \u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u51fd\u6570\u88ab\u591a\u6b21\u91cd\u590d\u5b9a\u4e49\uff0c\u9020\u6210\u51b2\u7a81\u3002","title":"\u9884\u7f16\u8bd1"},{"location":"learn_cpp/07_complie_link_macro.html#_3","text":"\u9884\u7f16\u8bd1\u5f97\u5230\u7684\u7eaf C \u4ee3\u7801\u6587\u4ef6\u7ecf\u8fc7\u7f16\u8bd1\u5c31\u53ef\u4ee5\u5f97\u5230\u4e86 object \u6587\u4ef6\u3002object \u6587\u4ef6\u4e2d\u5305\u542b\u4e86\u5bf9\u5e94\u7684\u673a\u5668\u7801\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u5c06 main.cpp \u7f16\u8bd1 \u6210 main.o \u6587\u4ef6\u3002 gcc - c main.cpp main.o \u6587\u4ef6\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5305\u542b\u4e86\u7a0b\u5e8f\u529f\u80fd\u7684\u673a\u5668\u7801\u3002\u4e0d\u8fc7\u5b83\u5e76\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\uff0c\u9700\u8981\u94fe\u63a5\u624d\u53ef\u4ee5\u3002","title":"\u7f16\u8bd1"},{"location":"learn_cpp/07_complie_link_macro.html#_4","text":"\u4e3a\u4ec0\u4e48\u6211\u4eec\u7f16\u8bd1\u5f97\u5230\u7684\u673a\u5668\u7801\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\uff0c\u800c\u662f\u8981\u7ecf\u8fc7\u94fe\u63a5\u624d\u80fd\u6210\u4e3a\u7a0b\u5e8f\u5462\uff1f \u8fd9\u5176\u5b9e\u662f\u56e0\u4e3a\u5f53\u524d\u7f16\u8bd1\u5355\u5143\uff08\u5373\u5f53\u524d\u6e90\u6587\u4ef6\uff09\u6240\u8c03\u7528\u5230\u7684\u51fd\u6570\uff0c\u5b83\u7684\u5b9e\u73b0\u4e0d\u4e00\u5b9a\u5728\u5f53\u524d\u7684\u7f16\u8bd1\u5355\u5143\u4e2d\uff0c\u53ef\u80fd\u5728\u5176\u4ed6 cpp \u4e2d\u5b9e\u73b0\u3002\u5c31\u50cf\u6211\u4eec\u524d\u9762\u8c03\u7528\u7684 printf \u51fd\u6570\uff0c\u5b83\u7684\u5b9e\u73b0\u4e5f\u5e76\u4e0d\u662f\u6211\u4eec\u5b9e\u73b0\u7684\uff0c\u800c\u662f\u5e93\u51fd\u6570\u5b9e\u73b0\u7684\u3002 \u94fe\u63a5\u7684\u8d23\u4efb\u5c31\u662f\u628a\u5404\u4e2a\u7f16\u8bd1\u5355\u5143\u7ed9\u201c\u62fc\u63a5\u201d\u5230\u4e00\u8d77\uff0c\u201c\u6253\u901a\u201d\u5404\u4e2a object \u6587\u4ef6\u4e4b\u95f4\u7684\u8c03\u7528\u5173\u7cfb\u3002 \u6211\u4eec\u901a\u8fc7\u4e0b\u9762\u7684\u4f8b\u5b50\u83b7\u5f97\u66f4\u6e05\u695a\u7684\u7406\u89e3\u3002 \u9996\u5148\u6211\u4eec\u521b\u5efa\u4e00\u4e2a my_math.cpp \u6587\u4ef6\u3002 int my_add ( int a , int b ) { retrun a + b ; } \u518d\u5728 main.cpp \u6587\u4ef6\u4e2d\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002 #include <stdio.h> int my_add ( int a , int b ) int main ( int argc , char * argv []) { printf ( \"5+9=%d \\n \" , my_add ( 5 , 9 )); return 0 ; } \u7136\u540e\u5206\u522b\u7f16\u8bd1\u8fd9\u4e24\u4e2a\u6587\u4ef6\u3002 gcc - c main.cpp gcc - c my_math.cpp \u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u5c31\u5f97\u5230\u4e86 main.o \u548c my_math.o \u4e24\u4e2a object \u6587\u4ef6\u3002 \u63a5\u7740\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u5c06\u4e24\u4e2a\u6587\u4ef6 \u94fe\u63a5 \u5230\u4e00\u8d77\u3002 gcc main.o my_math.o -o ttlarva.exe \u6211\u4eec\u5c31\u83b7\u5f97\u4e86\u7c7b\u4f3c\u4e4b\u524d\u7684\u53ef\u6267\u884c\u7a0b\u5e8f ttlarva.exe \uff0c\u8fd0\u884c\u8be5\u7a0b\u5e8f\u5c31\u5f97\u5230\u4e86 5+9=14 \u7684\u8ba1\u7b97\u6253\u5370\u7ed3\u679c\u3002 \u5bf9\u8fd9\u79cd\u591a\u4e2a\u6e90\u6587\u4ef6\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u4f7f\u7528 gcc main.cpp \u76f4\u63a5\u83b7\u5f97\u7ed3\u679c\uff0c\u4f1a\u62a5\u9519\u627e\u4e0d\u5230 my_add(int, int) \u51fd\u6570\u7684\u5f15\u7528\u3002\u8fd9\u4e5f\u662f\u56e0\u4e3a\u94fe\u63a5\u8fc7\u7a0b\u4e2d\u627e\u4e0d\u5230 my_add \u7684\u5b9e\u73b0\u3002","title":"\u94fe\u63a5"},{"location":"learn_cpp/07_complie_link_macro.html#_5","text":"\u5b8f\u548c C++ \u4e2d\u7684\u6a21\u677f\u606f\u606f\u76f8\u5173\uff0c\u53ef\u4ee5\u8fd9\u6837\u8bf4\uff0c\u8bf4\u660e\u6a21\u677f\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u96c6\u6210\u5b8f\u7684\u4f18\u70b9\uff0c\u89e3\u51b3\u5b8f\u7684\u7f3a\u70b9\u3002","title":"\u5b8f\u7684\u672c\u8d28\u548c\u4f18\u7f3a\u70b9"},{"location":"learn_cpp/07_complie_link_macro.html#_6","text":"\u5b8f\u7684\u672c\u8d28\u5c31\u662f \u67e5\u627e\u66ff\u6362 \uff0c\u6240\u4ee5\u5927\u5bb6\u5e94\u8be5\u6709\u770b\u5230\u4f7f\u7528\u5b8f\u6765\u4ee3\u66ff\u51fd\u6570\u7684\u573a\u666f\u3002 #define MYMAX(x,y)((x)<(y)?(y):(x))","title":"\u5b8f\u7684\u672c\u8d28"},{"location":"learn_cpp/07_complie_link_macro.html#_7","text":"\u4f18\u70b9: - \u4f7f\u7528\u5b8f\u6765\u4ee3\u66ff\u51fd\u6570\u80fd\u63d0\u9ad8\u6548\u7387\u3002\u56e0\u4e3a\u4f7f\u7528\u5b8f\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7701\u53bb\u51fd\u6570\u8c03\u7528\u548c\u8fd4\u56de\u65f6\u7684\u5f00\u9500\u4e86\u3002 \u7f3a\u70b9\uff1a - \u5b8f\u662f\u6ca1\u6709\u7c7b\u578b\u68c0\u67e5\u7684 \u6211\u4eec\u901a\u8fc7\u4e0b\u9762\u7684\u4f8b\u5b50\u83b7\u5f97\u66f4\u6e05\u695a\u7684\u7406\u89e3\u3002 #include <stdio.h> #define MYMAX(x,y)((x)<(y)?(y):(x)) int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX ( 3.14 , 2.73 )); printf ( \"%s \\n \" , MYMAX ( \"short string\" , \"very very long string\" )); return 0 ; } \u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e00\u4e2a MYMAX \u7684\u5b8f\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u53d6 x \u548c y \u4e2d\u7684\u8f83\u5927\u8005\u3002 \u8fd0\u884c\u540e\u53d1\u73b0\u5982\u4e0b\u8f93\u51fa\uff1a 10 3.140000 very very long string \u8fd0\u884c\u6ca1\u6709\u62a5\u9519\uff0c\u548b\u4e00\u770b\u8f93\u51fa\u7ed3\u679c\u597d\u50cf\u4e5f\u5e76\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u5176\u5b9e\u6211\u4eec\u6700\u540e\u4e00\u6b21\u8c03\u7528\u662f\u6709\u95ee\u9898\u7684\u3002 \u6211\u4eec\u8f93\u51fa very very long string \u5e76\u4e0d\u662f\u56e0\u4e3a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6bd4\u8f83\u957f\uff0c\u53ea\u662f\u6211\u4eec\u8fd0\u6c14\u597d\u3002 \u5f53\u6211\u4eec\u8c03\u6362\u6700\u540e\u4e00\u6b21\u8c03\u7528\u4e24\u4e2a\u53c2\u6570\u7684\u4f4d\u7f6e\u65f6\uff1a #include <stdio.h> #define MYMAX(x,y)((x)<(y)?(y):(x)) int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX ( 3.14 , 2.73 )); //printf(\"%s\\n\", MYMAX(\"short string\",\"very very long string\")); printf ( \"%s \\n \" , MYMAX ( \"very very long string\" , \"short string\" )); return 0 ; } \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\uff1a 10 3.140000 short string \u7b2c\u4e09\u6b21\u8c03\u7528\u7684\u7ed3\u679c\u4e0d\u518d\u662f very very long string \u3002 \u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\u6211\u4eec\u6839\u636e MYMAX \u5b8f\u7684\u5b9a\u4e49\u53ef\u4ee5\u77e5\u9053\uff0c\u5728\u4f20\u9012\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u5b9e\u9645\u4e0a\u662f\u5176\u5185\u5b58\u4e2d\u5730\u5740\u7684\u6bd4\u8f83\uff0c\u800c\u4e24\u8005\u5730\u5740\u7684\u6bd4\u8f83\u5728\u8bed\u8a00\u6807\u51c6\u4e2d\u662f\u6ca1\u6709\u53bb\u505a\u8fc7\u660e\u786e\u89c4\u5b9a\u7684\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u7f16\u5199\u4e86\u4e00\u6bb5\u610f\u4e49\u4e0d\u5927\u7684\u4ee3\u7801\uff0c\u5b83\u7684\u8fd0\u884c\u7ed3\u679c\u548c\u4e1a\u52a1\u903b\u8f91\u5b8c\u5168\u4e0d\u76f8\u5173\u3002\u66f4\u6050\u6016\u7684\u662f\uff0c\u8fd9\u7c7b\u4ee3\u7801\u5728\u7f16\u8bd1\u65f6\uff0c\u8fde\u4e2a\u62a5\u9519\u6216\u8005\u662f\u8b66\u544a\u90fd\u6ca1\u6709\u3002\u8fd9\u76f4\u63a5\u62d4\u9ad8\u4e86\u6211\u4eec\u4ee5\u540e\u67e5\u627e bug \u7684\u96be\u5ea6\u3002 \u90a3\u4e48\u6709\u6ca1\u6709\u4e00\u79cd\u65e2\u7ee7\u627f\u4e86\u5b8f\u4f18\u70b9\uff0c\u53c8\u5f25\u8865\u4e86\u5b8f\u6ca1\u6709\u7c7b\u578b\u68c0\u67e5\u7f3a\u9677\u7684\u65b9\u6cd5\u5462\uff1f\u5f53\u7136\u6709\uff01\u5b83\u5c31\u662f\u6211\u4eec\u4e0b\u4e00\u671f\u8981\u8bb2\u7684 \u6a21\u677f \u3002","title":"\u5b8f\u7684\u4f18\u7f3a\u70b9"},{"location":"learn_cpp/08_template.html","text":"\u6a21\u677f template \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6008_\u6a21\u677f\u5b9e\u4f8b\u5316 \u4e0a\u4e00\u7bc7\u6587\u7ae0 \u6211\u4eec\u4e86\u89e3\u4e86\u5b8f\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fd9\u671f\u8c08\u8c08\u6a21\u677f\uff0c\u5305\u62ec\u4e09\u4e2a\u4e3b\u8981\u5185\u5bb9\uff1a \u6a21\u677f\u5b9e\u4f8b\u5316\u539f\u7406 \u6a21\u677f\u663e\u793a\u5b9e\u4f8b\u5316 static_assert \u7c7b\u578b\u68c0\u67e5 \u4e0a\u4e00\u671f\u6211\u4eec\u63d0\u5230\uff0c\u5b8f\u7684\u672c\u8d28\u5c31\u662f\u67e5\u627e\u66ff\u6362\uff0c\u4f18\u70b9\u662f\u6709\u66f4\u5feb\u7684\u6027\u80fd\uff0c\u7f3a\u70b9\u662f\u6ca1\u6709\u7c7b\u578b\u68c0\u67e5\u3002\u90a3\u4e48\u600e\u4e48\u505a\u5230\u4fdd\u7559\u5b8f\u7684\u4f18\u70b9\uff0c\u53bb\u6389\u7f3a\u70b9\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 C++ \u4e2d\u7684 inline \u5185\u8054\u51fd\u6570\uff0c\u66f4\u8fdb\u9636\u4e00\u70b9\u7684\uff0c\u5c31\u662f\u672c\u671f\u8981\u4ecb\u7ecd\u7684 template \u6a21\u677f \uff0c\u6a21\u677f\u662f\u66f4\u5f3a\u5927\u66f4\u590d\u6742\u7684\u8bed\u6cd5\uff0c\u662f\u201c\u66f4\u597d\u7684\u5b8f\u201d\u3002 \u63a5\u4e0b\u6765\u5c31\u4ece\u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u539f\u7406\u8c08\u8d77\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u6a21\u677f\u548c\u5b8f\u7684\u76f8\u4f3c\u4e4b\u5904\uff0c\u4e3a\u4ec0\u4e48\u8981\u628a\u6a21\u677f\u79f0\u4f5c\u66f4\u9ad8\u7ea7\u7684\u5b8f\uff1f \u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u539f\u7406 \u00b6 \u5927\u90e8\u5206\u670b\u53cb\u90fd\u662f\u901a\u8fc7\u6cdb\u578b\u7f16\u7a0b\u4e86\u89e3\u5230\u6a21\u677f\u7684\uff0c\u6211\u4eec\u4e5f\u5148\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u56de\u987e\u4e00\u4e0b\u6a21\u677f\u3002\u5982\u4e0b\u9762\u7684 MYMAX \u4f8b\u5b50\uff1a #include <stdio.h> #include <type_traits> #include <string.h> int MYMAX ( int x , int y ){ return x < y ? y : x ; } double MYMAX ( double x , double y ){ return x < y ? y : x ; } int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX ( 3.14 , 2.73 )); return 0 ; } \u5982\u679c\u4e0d\u4f7f\u7528\u6a21\u677f\uff0c\u8981\u60f3\u5b9e\u73b0\u65e2\u652f\u6301 int \u7c7b\u578b\u53c8\u652f\u6301 double \u7c7b\u578b\u7684 MYMAX \u51fd\u6570\uff0c\u5c31\u8981\u5b9e\u73b0\u4e24\u4e2a\u7248\u672c\u7684 MYMAX \u51fd\u6570\u3002\u4f46\u662f\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u9664\u4e86\u7c7b\u578b\u4e0d\u4e00\u6837\uff0c\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u663e\u5f97\u5f88\u5197\u4f59\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u4f7f\u7528\u6a21\u677f\u6539\u9020 MYMAX \uff0c\u4ee3\u7801\u5c31\u5341\u5206\u7b80\u6d01\u3002\u5982\u4e0b\u6240\u793a\uff0c\u5728\u6a21\u677f\u90e8\u5206\u53ea\u5199\u4e86\u4e00\u5957\u5b9e\u73b0\uff0c\u5c31\u53ef\u4ee5\u5bf9 int \u8fdb\u884c\u6570\u636e\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u5bf9 double \u8fdb\u884c\u6570\u636e\u8c03\u7528\u3002 #include <stdio.h> #include <string.h> template < typename T > T MYMAX ( T x , T y ){ return x < y ? y : x ; } int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX < int > ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX < double > ( 3.14 , 2.73 )); return 0 ; } \u7136\u800c\uff0c\u8fd9\u91cc\u5b9a\u4e49\u7684\u6a21\u677f MYMAX \uff0c\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u51fd\u6570\uff0c\u800c\u662f\u4e00\u4e2a \u51fd\u6570\u751f\u6210\u5668 \u3002\u4e00\u4e2a\u6a21\u677f\u5e76\u4e0d\u4f1a\u88ab\u81ea\u53d1\u5730\u7f16\u8bd1\u6210 object \u6587\u4ef6\u4e2d\u7684\u673a\u5668\u7801\uff0c\u800c\u53ea\u6709\u5f53\u6a21\u677f\u88ab\u8c03\u7528\u65f6\uff0c\u7f16\u8bd1\u5668\u624d\u4f1a\u5bf9\u5b83\u8fdb\u884c\u5c55\u5f00\u3001\u5b9e\u4f8b\u5316\uff0c\u88ab\u7f16\u8bd1\u6210\u673a\u5668\u7801\u3002 \u63a5\u4e0b\u6765\u4ece\u4ee3\u7801\u4e00\u6b65\u6b65\u770b\u5b9e\u4f8b\u5316\u662f\u600e\u4e48\u5177\u4f53\u5b9e\u73b0\u7684\u3002 \u5f53\u7f16\u8bd1\u5668\u8fdb\u5165\u4e3b\u51fd\u6570\u626b\u63cf\u5230 printf(\"%d\\n\", MYMAX<int>(10, 5)); \u4e2d\u7684 MYMAX<int> \u65f6\uff0c\u5c31\u77e5\u9053\u9700\u8981\u5bf9\u6a21\u677f\u8fdb\u884c\u5c55\u5f00\u4e86\uff0c\u4e8e\u662f\u4f1a\u590d\u5236\u4e00\u4efd MYMAX \u7684\u6a21\u677f\u4ee3\u7801\u5230\u4e0b\u9762\uff0c\u518d\u628a\u6a21\u677f\u53c2\u6570\u4e2d\u7684 T \u66ff\u6362\u6210 int \u3002 \u5bf9\u4e8e MYMAX \u7684 double \u5b9e\u73b0\u540c\u7406\u3002\u6700\u540e\u5229\u7528\u6a21\u677f\u521b\u5efa\u7684 MYMAX \u548c\u5f00\u59cb\u5206\u522b\u521b\u5efa\u7684 int \u548c double \u7c7b\u578b\u7684 MYMAX \u662f\u4e00\u6837\u7684\u6548\u679c\u3002 \u5982\u4e0b\uff0c\u5c31\u662f\u624b\u5de5\u6a21\u62df\u7f16\u8bd1\u5668\u8fdb\u884c\u6a21\u677f\u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u3002\u987a\u4fbf\u4e00\u63d0\uff0c MYMAX<int> \u548c MYMAX<double> \u4e2d\u7684 int \u548c double \u53ef\u4ee5\u7701\u7565\uff0cC++ \u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u4f20\u53c2\u7684\u7c7b\u578b\u81ea\u52a8\u63a8\u5bfc\u51fa\u6a21\u677f\u53c2\u6570\u5e94\u8be5\u662f\u4ec0\u4e48\u3002 #include <stdio.h> #include <string.h> template < typename T > T MYMAX ( T x , T y ){ return x < y ? y : x ; } int MYMAX ( int x , int y ){ return x < y ? y : x ; } double MYMAX ( double x , double y ){ return x < y ? y : x ; } int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX < int > ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX < double > ( 3.14 , 2.73 )); return 0 ; } \u8fd9\u4e2a\u590d\u5236\u3001\u5c55\u5f00\u3001\u66ff\u6362\u7684\u8fc7\u7a0b\u5c31\u662f\u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u8fc7\u7a0b\uff0c\u5927\u5bb6\u53ef\u4ee5\u60f3\u4e00\u60f3\uff0c\u662f\u4e0d\u662f\u548c\u5b8f\u7684\u884c\u4e3a\u6709\u4e9b\u8bb8\u7684\u7c7b\u4f3c\u5462\uff1f\u6211\u4eec\u6765\u627e\u4e00\u4e9b\u8bc1\u636e\u8bc1\u660e\u8fd9\u4e2a\u60f3\u6cd5\u3002 \u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5728\u6a21\u677f\u4e2d\u8c03\u7528\u4e86\u4e00\u4e2a\u53ea\u6709\u58f0\u660e\u6ca1\u6709\u5b9e\u73b0\u7684\u51fd\u6570\u3002\u6309\u9053\u7406\u6765\u8bf4\u7a0b\u5e8f\u751f\u6210\u65f6\u5e94\u8be5\u4f1a\u9047\u5230\u4e00\u4e2a\u94fe\u63a5\u9519\u8bef\uff0c\u7136\u800c\u751f\u6210\u540e\u53d1\u73b0\u5e76\u6ca1\u6709\u9519\u8bef\u3002\u8fd9\u5c31\u662f\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8c03\u7528\u6a21\u677f\u51fd\u6570\uff0c\u56e0\u6b64\u5c31\u6ca1\u6709\u5b9e\u4f8b\u5316\uff0c\u4e5f\u4e0d\u4f1a\u51fa\u73b0\u94fe\u63a5\u9519\u8bef\u4e86\u3002 #include <stdio.h> #include <string.h> void veryverystrangefun (); template < typename T > T MYMAX ( T x , T y ){ veryverystrangefun (); return x < y ? y : x ; } int main ( int argc , char * argv []) { return 0 ; } \u5982\u4e0b\uff0c\u8fd9\u65f6\u5019\u5982\u679c\u6211\u4eec\u5728\u4e3b\u51fd\u6570\u4e2d\u8c03\u7528\u6a21\u677f\uff0c\u518d\u751f\u6210\u5c31\u4f1a\u62a5\u94fe\u63a5\u9519\u8bef\u4e86\u3002 int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX ( 10 , 5 )); return 0 ; } \u518d\u6bd4\u5982\uff0c\u5927\u5bb6\u4e4b\u524d\u4f1a\u4e0d\u4f1a\u597d\u5947\uff0c\u4e3a\u4ec0\u4e48 STL \u4e2d\u7684\u6a21\u677f\u5b9e\u73b0\uff0c\u51e0\u4e4e\u90fd\u662f\u5199\u5728\u5934\u6587\u4ef6\u4e2d\u7684\u5462\uff1f\u73b0\u5728\u5e94\u8be5\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\uff0c\u5c31\u662f\u56e0\u4e3a\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u9700\u8981\u62ff\u5230\u6a21\u677f\u7684\u5b9e\u73b0\uff0c\u8fd9\u6837\u5b50\u624d\u80fd\u628a\u6a21\u677f\u5f53\u4f5c\u4ee3\u7801\u751f\u6210\u5668\u53bb\u5c55\u5f00\u3002\u5982\u679c\u5934\u6587\u4ef6\u4e2d\u53ea\u6709\u6a21\u677f\u7684\u58f0\u660e\u6ca1\u6709\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u6ca1\u529e\u6cd5\u8fdb\u884c\u6a21\u677f\u5b9e\u4f8b\u5316\u4e86\u3002 \u6a21\u677f\u663e\u5f0f\u5b9e\u4f8b\u5316 \u00b6 \u662f\u4e0d\u662f\u4e0d\u8c03\u7528\u6a21\u677f\u5c31\u4e00\u5b9a\u4e0d\u80fd\u5b9e\u4f8b\u5316\u5462\uff1f\u5176\u5b9e\u5012\u4e5f\u672a\u5fc5\uff0cC++ \u4e2d\u63d0\u4f9b\u4e86\u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316\u8bed\u6cd5\u3002\u6240\u8c13\u663e\u5f0f\u5b9e\u4f8b\u5316\uff0c\u5c31\u662f\u5373\u4f7f\u4e0d\u53bb\u8c03\u7528\u6a21\u677f\uff0c\u4e5f\u80fd\u751f\u6210\u5b9e\u4f8b\u5316\u7684\u51fd\u6570\u6216\u7c7b\u3002 \u5177\u4f53\u7684\u8bed\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f template\u5173\u952e\u5b57 + \u5b9e\u4f8b\u5316\u58f0\u660e \u3002\u4e0b\u9762\u8fd8\u662f\u4ee5 MYMAX \u4e3a\u4f8b\u5b50\uff0c\u6765\u770b\u663e\u5f0f\u5b9e\u4f8b\u5316\u7684\u5177\u4f53\u5b9e\u73b0\u3002 #include <stdio.h> #include <string.h> template < typename T > T MYMAX ( T x , T y ){ return x < y ? y : x ; } template int MYMAX ( int , int ); template double MYMAX ( double , double ); int main ( int argc , char * argv []) { return 0 ; } \u5230\u5e95\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u624d\u9700\u8981\u7528\u5230\u663e\u5f0f\u5b9e\u4f8b\u5316\uff0c\u8fd9\u4e2a\u5c31\u9700\u8981\u7ed3\u5408\u5e94\u7528\u573a\u666f\u624d\u80fd\u660e\u767d\u4e86\u3002\u5728 OneFlow \u4e2d\u5c31\u7528\u5230\u4e86\u5f88\u591a\u663e\u5f0f\u5b9e\u4f8b\u5316\u7684\u8bed\u6cd5\uff0c\u8fd9\u662f\u4e3a\u4e86\u914d\u5408\u67d0\u4e9b\u8bbe\u8ba1\u9700\u6c42\uff0c\u5728\u540e\u7eed\u4e5f\u4f1a\u7ed9\u5927\u5bb6\u4e13\u95e8\u8fdb\u884c\u4ecb\u7ecd\u3002 static_assert \u7c7b\u578b\u68c0\u67e5 \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u6709\u4e86\u6a21\u677f\u7248\u672c\u7684 MYMAX \uff0c\u4f46\u4e0a\u4e00\u671f\u4ecb\u7ecd\u7684\u7c7b\u578b\u68c0\u67e5\u95ee\u9898\u4ecd\u7136\u5b58\u5728\u3002\u5982\u679c\u6211\u4eec\u4f20\u9012\u4e86\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8fd9\u65f6\u5019\u4f9d\u7136\u4f1a\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6ca1\u6709\u610f\u4e49\u7684\u5927\u5c0f\u6bd4\u8f83\uff0c\u4f9d\u7136\u5728\u7f16\u8bd1\u65f6\u4e0d\u62a5\u8b66\u544a\uff0c\u4e0d\u62a5\u9519\u3002 MYMAX(\"short string\",\"very very long string\") \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528 static_assert \u3002 static_assert \u662f\u5728 C++11 \u4e2d\u5f15\u5165\u7684\u65b0\u8bed\u6cd5\uff0c\u5b83\u7684\u4f5c\u7528\u5c31\u662f\u8ba9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\uff0c\u5c31\u53ef\u4ee5\u53bb\u505a\u5fc5\u8981\u7684\u68c0\u67e5\u3002\u5982\u679c\u68c0\u67e5\u4e0d\u901a\u8fc7\uff0c\u5c31\u4f1a\u4e2d\u65ad\u7f16\u8bd1\uff0c\u5e76\u7ed9\u51fa\u62a5\u9519\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u5b83\u7684\u5177\u4f53\u8bed\u6cd5\u3002 \u6211\u4eec\u5728 MYMAX \u6a21\u677f\u4e2d\u52a0\u5165\u4e86 static_assert \uff0c\u5b83\u7684\u610f\u601d\u662f\u5728\u7f16\u8bd1\u65f6\u8981\u53bb\u68c0\u67e5 T \u7684\u7c7b\u578b\uff0c\u53ea\u6709 T \u662f\u6574\u6570\u6216\u8005\u6d6e\u70b9\u578b\u624d\u5408\u6cd5\uff0c\u7136\u540e\u5728\u4e3b\u51fd\u6570\u4e2d\u5b9e\u73b0\u6574\u5f62\uff0c\u6d6e\u70b9\u578b\uff0c\u5b57\u7b26\u4e32\u7684\u5b9e\u4f8b\u5316\u3002\u8fdb\u884c\u7f16\u8bd1\u5c31\u4f1a\u62a5\u9519\uff0c\u7136\u540e\u5b9a\u4f4d\u5230\u5b57\u7b26\u4e32\u5b9e\u4f8b\u5316\u6240\u5728\u884c\uff0c\u5e76\u4e14\u7ed9\u51fa\u62a5\u9519\u4fe1\u606f T must be integral or floating point \u3002 #include <stdio.h> #include <type_traits> #include <string.h> template < typename T > T MYMAX ( T x , T y ){ static_assert ( std :: is_integral < T >:: value || std :: is_floating_point < T >:: value , \"T must be integral or floating point\" ); return x < y ? y : x ; } int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX < int > ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX < double > ( 3.14 , 2.73 )); printf ( \"%s \\n \" , MYMAX ( \"short string\" , \"very very long string\" )); return 0 ; } \u6700\u540e\u6ce8\u610f\uff0c static_assert \u662f\u5728\u7f16\u8bd1\u65f6\u7684\u68c0\u67e5\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u8fd0\u884c\u7684\u6027\u80fd\u3002 \u5927\u5bb6\u53ef\u80fd\u4f1a\u6709\u7591\u95ee\uff0c\u4ee3\u7801\u4e2d\u7528\u5230\u7684 type_traits \u548c std::is_integral \u4ee5\u53ca std::is_floating_point \u662f\u4ec0\u4e48\u4e1c\u897f\u3002\u8fd8\u6709\u5c31\u662f\u521a\u521a static_assert \u7684\u64cd\u4f5c\u53ea\u662f\u9003\u907f\u4e86\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\uff0c\u800c\u6ca1\u6709\u89e3\u51b3\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u3002\u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff01\u8fd9\u4e9b\u90fd\u662f\u5c0f\u7cd6\u5728\u540e\u7eed\u90fd\u4f1a\u8bb2\u5230\u7684\u3002","title":"\u6a21\u677f template"},{"location":"learn_cpp/08_template.html#template","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6008_\u6a21\u677f\u5b9e\u4f8b\u5316 \u4e0a\u4e00\u7bc7\u6587\u7ae0 \u6211\u4eec\u4e86\u89e3\u4e86\u5b8f\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fd9\u671f\u8c08\u8c08\u6a21\u677f\uff0c\u5305\u62ec\u4e09\u4e2a\u4e3b\u8981\u5185\u5bb9\uff1a \u6a21\u677f\u5b9e\u4f8b\u5316\u539f\u7406 \u6a21\u677f\u663e\u793a\u5b9e\u4f8b\u5316 static_assert \u7c7b\u578b\u68c0\u67e5 \u4e0a\u4e00\u671f\u6211\u4eec\u63d0\u5230\uff0c\u5b8f\u7684\u672c\u8d28\u5c31\u662f\u67e5\u627e\u66ff\u6362\uff0c\u4f18\u70b9\u662f\u6709\u66f4\u5feb\u7684\u6027\u80fd\uff0c\u7f3a\u70b9\u662f\u6ca1\u6709\u7c7b\u578b\u68c0\u67e5\u3002\u90a3\u4e48\u600e\u4e48\u505a\u5230\u4fdd\u7559\u5b8f\u7684\u4f18\u70b9\uff0c\u53bb\u6389\u7f3a\u70b9\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 C++ \u4e2d\u7684 inline \u5185\u8054\u51fd\u6570\uff0c\u66f4\u8fdb\u9636\u4e00\u70b9\u7684\uff0c\u5c31\u662f\u672c\u671f\u8981\u4ecb\u7ecd\u7684 template \u6a21\u677f \uff0c\u6a21\u677f\u662f\u66f4\u5f3a\u5927\u66f4\u590d\u6742\u7684\u8bed\u6cd5\uff0c\u662f\u201c\u66f4\u597d\u7684\u5b8f\u201d\u3002 \u63a5\u4e0b\u6765\u5c31\u4ece\u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u539f\u7406\u8c08\u8d77\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u6a21\u677f\u548c\u5b8f\u7684\u76f8\u4f3c\u4e4b\u5904\uff0c\u4e3a\u4ec0\u4e48\u8981\u628a\u6a21\u677f\u79f0\u4f5c\u66f4\u9ad8\u7ea7\u7684\u5b8f\uff1f","title":"\u6a21\u677f template"},{"location":"learn_cpp/08_template.html#_1","text":"\u5927\u90e8\u5206\u670b\u53cb\u90fd\u662f\u901a\u8fc7\u6cdb\u578b\u7f16\u7a0b\u4e86\u89e3\u5230\u6a21\u677f\u7684\uff0c\u6211\u4eec\u4e5f\u5148\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u56de\u987e\u4e00\u4e0b\u6a21\u677f\u3002\u5982\u4e0b\u9762\u7684 MYMAX \u4f8b\u5b50\uff1a #include <stdio.h> #include <type_traits> #include <string.h> int MYMAX ( int x , int y ){ return x < y ? y : x ; } double MYMAX ( double x , double y ){ return x < y ? y : x ; } int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX ( 3.14 , 2.73 )); return 0 ; } \u5982\u679c\u4e0d\u4f7f\u7528\u6a21\u677f\uff0c\u8981\u60f3\u5b9e\u73b0\u65e2\u652f\u6301 int \u7c7b\u578b\u53c8\u652f\u6301 double \u7c7b\u578b\u7684 MYMAX \u51fd\u6570\uff0c\u5c31\u8981\u5b9e\u73b0\u4e24\u4e2a\u7248\u672c\u7684 MYMAX \u51fd\u6570\u3002\u4f46\u662f\u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u9664\u4e86\u7c7b\u578b\u4e0d\u4e00\u6837\uff0c\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u663e\u5f97\u5f88\u5197\u4f59\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u4f7f\u7528\u6a21\u677f\u6539\u9020 MYMAX \uff0c\u4ee3\u7801\u5c31\u5341\u5206\u7b80\u6d01\u3002\u5982\u4e0b\u6240\u793a\uff0c\u5728\u6a21\u677f\u90e8\u5206\u53ea\u5199\u4e86\u4e00\u5957\u5b9e\u73b0\uff0c\u5c31\u53ef\u4ee5\u5bf9 int \u8fdb\u884c\u6570\u636e\u8c03\u7528\uff0c\u4e5f\u53ef\u4ee5\u5bf9 double \u8fdb\u884c\u6570\u636e\u8c03\u7528\u3002 #include <stdio.h> #include <string.h> template < typename T > T MYMAX ( T x , T y ){ return x < y ? y : x ; } int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX < int > ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX < double > ( 3.14 , 2.73 )); return 0 ; } \u7136\u800c\uff0c\u8fd9\u91cc\u5b9a\u4e49\u7684\u6a21\u677f MYMAX \uff0c\u5e76\u4e0d\u662f\u771f\u6b63\u7684\u51fd\u6570\uff0c\u800c\u662f\u4e00\u4e2a \u51fd\u6570\u751f\u6210\u5668 \u3002\u4e00\u4e2a\u6a21\u677f\u5e76\u4e0d\u4f1a\u88ab\u81ea\u53d1\u5730\u7f16\u8bd1\u6210 object \u6587\u4ef6\u4e2d\u7684\u673a\u5668\u7801\uff0c\u800c\u53ea\u6709\u5f53\u6a21\u677f\u88ab\u8c03\u7528\u65f6\uff0c\u7f16\u8bd1\u5668\u624d\u4f1a\u5bf9\u5b83\u8fdb\u884c\u5c55\u5f00\u3001\u5b9e\u4f8b\u5316\uff0c\u88ab\u7f16\u8bd1\u6210\u673a\u5668\u7801\u3002 \u63a5\u4e0b\u6765\u4ece\u4ee3\u7801\u4e00\u6b65\u6b65\u770b\u5b9e\u4f8b\u5316\u662f\u600e\u4e48\u5177\u4f53\u5b9e\u73b0\u7684\u3002 \u5f53\u7f16\u8bd1\u5668\u8fdb\u5165\u4e3b\u51fd\u6570\u626b\u63cf\u5230 printf(\"%d\\n\", MYMAX<int>(10, 5)); \u4e2d\u7684 MYMAX<int> \u65f6\uff0c\u5c31\u77e5\u9053\u9700\u8981\u5bf9\u6a21\u677f\u8fdb\u884c\u5c55\u5f00\u4e86\uff0c\u4e8e\u662f\u4f1a\u590d\u5236\u4e00\u4efd MYMAX \u7684\u6a21\u677f\u4ee3\u7801\u5230\u4e0b\u9762\uff0c\u518d\u628a\u6a21\u677f\u53c2\u6570\u4e2d\u7684 T \u66ff\u6362\u6210 int \u3002 \u5bf9\u4e8e MYMAX \u7684 double \u5b9e\u73b0\u540c\u7406\u3002\u6700\u540e\u5229\u7528\u6a21\u677f\u521b\u5efa\u7684 MYMAX \u548c\u5f00\u59cb\u5206\u522b\u521b\u5efa\u7684 int \u548c double \u7c7b\u578b\u7684 MYMAX \u662f\u4e00\u6837\u7684\u6548\u679c\u3002 \u5982\u4e0b\uff0c\u5c31\u662f\u624b\u5de5\u6a21\u62df\u7f16\u8bd1\u5668\u8fdb\u884c\u6a21\u677f\u5b9e\u4f8b\u5316\u7684\u7ed3\u679c\u3002\u987a\u4fbf\u4e00\u63d0\uff0c MYMAX<int> \u548c MYMAX<double> \u4e2d\u7684 int \u548c double \u53ef\u4ee5\u7701\u7565\uff0cC++ \u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u4f20\u53c2\u7684\u7c7b\u578b\u81ea\u52a8\u63a8\u5bfc\u51fa\u6a21\u677f\u53c2\u6570\u5e94\u8be5\u662f\u4ec0\u4e48\u3002 #include <stdio.h> #include <string.h> template < typename T > T MYMAX ( T x , T y ){ return x < y ? y : x ; } int MYMAX ( int x , int y ){ return x < y ? y : x ; } double MYMAX ( double x , double y ){ return x < y ? y : x ; } int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX < int > ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX < double > ( 3.14 , 2.73 )); return 0 ; } \u8fd9\u4e2a\u590d\u5236\u3001\u5c55\u5f00\u3001\u66ff\u6362\u7684\u8fc7\u7a0b\u5c31\u662f\u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u8fc7\u7a0b\uff0c\u5927\u5bb6\u53ef\u4ee5\u60f3\u4e00\u60f3\uff0c\u662f\u4e0d\u662f\u548c\u5b8f\u7684\u884c\u4e3a\u6709\u4e9b\u8bb8\u7684\u7c7b\u4f3c\u5462\uff1f\u6211\u4eec\u6765\u627e\u4e00\u4e9b\u8bc1\u636e\u8bc1\u660e\u8fd9\u4e2a\u60f3\u6cd5\u3002 \u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5728\u6a21\u677f\u4e2d\u8c03\u7528\u4e86\u4e00\u4e2a\u53ea\u6709\u58f0\u660e\u6ca1\u6709\u5b9e\u73b0\u7684\u51fd\u6570\u3002\u6309\u9053\u7406\u6765\u8bf4\u7a0b\u5e8f\u751f\u6210\u65f6\u5e94\u8be5\u4f1a\u9047\u5230\u4e00\u4e2a\u94fe\u63a5\u9519\u8bef\uff0c\u7136\u800c\u751f\u6210\u540e\u53d1\u73b0\u5e76\u6ca1\u6709\u9519\u8bef\u3002\u8fd9\u5c31\u662f\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8c03\u7528\u6a21\u677f\u51fd\u6570\uff0c\u56e0\u6b64\u5c31\u6ca1\u6709\u5b9e\u4f8b\u5316\uff0c\u4e5f\u4e0d\u4f1a\u51fa\u73b0\u94fe\u63a5\u9519\u8bef\u4e86\u3002 #include <stdio.h> #include <string.h> void veryverystrangefun (); template < typename T > T MYMAX ( T x , T y ){ veryverystrangefun (); return x < y ? y : x ; } int main ( int argc , char * argv []) { return 0 ; } \u5982\u4e0b\uff0c\u8fd9\u65f6\u5019\u5982\u679c\u6211\u4eec\u5728\u4e3b\u51fd\u6570\u4e2d\u8c03\u7528\u6a21\u677f\uff0c\u518d\u751f\u6210\u5c31\u4f1a\u62a5\u94fe\u63a5\u9519\u8bef\u4e86\u3002 int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX ( 10 , 5 )); return 0 ; } \u518d\u6bd4\u5982\uff0c\u5927\u5bb6\u4e4b\u524d\u4f1a\u4e0d\u4f1a\u597d\u5947\uff0c\u4e3a\u4ec0\u4e48 STL \u4e2d\u7684\u6a21\u677f\u5b9e\u73b0\uff0c\u51e0\u4e4e\u90fd\u662f\u5199\u5728\u5934\u6587\u4ef6\u4e2d\u7684\u5462\uff1f\u73b0\u5728\u5e94\u8be5\u5f88\u5bb9\u6613\u7406\u89e3\u4e86\uff0c\u5c31\u662f\u56e0\u4e3a\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u9700\u8981\u62ff\u5230\u6a21\u677f\u7684\u5b9e\u73b0\uff0c\u8fd9\u6837\u5b50\u624d\u80fd\u628a\u6a21\u677f\u5f53\u4f5c\u4ee3\u7801\u751f\u6210\u5668\u53bb\u5c55\u5f00\u3002\u5982\u679c\u5934\u6587\u4ef6\u4e2d\u53ea\u6709\u6a21\u677f\u7684\u58f0\u660e\u6ca1\u6709\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u6ca1\u529e\u6cd5\u8fdb\u884c\u6a21\u677f\u5b9e\u4f8b\u5316\u4e86\u3002","title":"\u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u539f\u7406"},{"location":"learn_cpp/08_template.html#_2","text":"\u662f\u4e0d\u662f\u4e0d\u8c03\u7528\u6a21\u677f\u5c31\u4e00\u5b9a\u4e0d\u80fd\u5b9e\u4f8b\u5316\u5462\uff1f\u5176\u5b9e\u5012\u4e5f\u672a\u5fc5\uff0cC++ \u4e2d\u63d0\u4f9b\u4e86\u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316\u8bed\u6cd5\u3002\u6240\u8c13\u663e\u5f0f\u5b9e\u4f8b\u5316\uff0c\u5c31\u662f\u5373\u4f7f\u4e0d\u53bb\u8c03\u7528\u6a21\u677f\uff0c\u4e5f\u80fd\u751f\u6210\u5b9e\u4f8b\u5316\u7684\u51fd\u6570\u6216\u7c7b\u3002 \u5177\u4f53\u7684\u8bed\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f template\u5173\u952e\u5b57 + \u5b9e\u4f8b\u5316\u58f0\u660e \u3002\u4e0b\u9762\u8fd8\u662f\u4ee5 MYMAX \u4e3a\u4f8b\u5b50\uff0c\u6765\u770b\u663e\u5f0f\u5b9e\u4f8b\u5316\u7684\u5177\u4f53\u5b9e\u73b0\u3002 #include <stdio.h> #include <string.h> template < typename T > T MYMAX ( T x , T y ){ return x < y ? y : x ; } template int MYMAX ( int , int ); template double MYMAX ( double , double ); int main ( int argc , char * argv []) { return 0 ; } \u5230\u5e95\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u624d\u9700\u8981\u7528\u5230\u663e\u5f0f\u5b9e\u4f8b\u5316\uff0c\u8fd9\u4e2a\u5c31\u9700\u8981\u7ed3\u5408\u5e94\u7528\u573a\u666f\u624d\u80fd\u660e\u767d\u4e86\u3002\u5728 OneFlow \u4e2d\u5c31\u7528\u5230\u4e86\u5f88\u591a\u663e\u5f0f\u5b9e\u4f8b\u5316\u7684\u8bed\u6cd5\uff0c\u8fd9\u662f\u4e3a\u4e86\u914d\u5408\u67d0\u4e9b\u8bbe\u8ba1\u9700\u6c42\uff0c\u5728\u540e\u7eed\u4e5f\u4f1a\u7ed9\u5927\u5bb6\u4e13\u95e8\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u6a21\u677f\u663e\u5f0f\u5b9e\u4f8b\u5316"},{"location":"learn_cpp/08_template.html#static_assert","text":"\u73b0\u5728\uff0c\u6211\u4eec\u6709\u4e86\u6a21\u677f\u7248\u672c\u7684 MYMAX \uff0c\u4f46\u4e0a\u4e00\u671f\u4ecb\u7ecd\u7684\u7c7b\u578b\u68c0\u67e5\u95ee\u9898\u4ecd\u7136\u5b58\u5728\u3002\u5982\u679c\u6211\u4eec\u4f20\u9012\u4e86\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u8fd9\u65f6\u5019\u4f9d\u7136\u4f1a\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u6ca1\u6709\u610f\u4e49\u7684\u5927\u5c0f\u6bd4\u8f83\uff0c\u4f9d\u7136\u5728\u7f16\u8bd1\u65f6\u4e0d\u62a5\u8b66\u544a\uff0c\u4e0d\u62a5\u9519\u3002 MYMAX(\"short string\",\"very very long string\") \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4f7f\u7528 static_assert \u3002 static_assert \u662f\u5728 C++11 \u4e2d\u5f15\u5165\u7684\u65b0\u8bed\u6cd5\uff0c\u5b83\u7684\u4f5c\u7528\u5c31\u662f\u8ba9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\uff0c\u5c31\u53ef\u4ee5\u53bb\u505a\u5fc5\u8981\u7684\u68c0\u67e5\u3002\u5982\u679c\u68c0\u67e5\u4e0d\u901a\u8fc7\uff0c\u5c31\u4f1a\u4e2d\u65ad\u7f16\u8bd1\uff0c\u5e76\u7ed9\u51fa\u62a5\u9519\u4fe1\u606f\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u5b83\u7684\u5177\u4f53\u8bed\u6cd5\u3002 \u6211\u4eec\u5728 MYMAX \u6a21\u677f\u4e2d\u52a0\u5165\u4e86 static_assert \uff0c\u5b83\u7684\u610f\u601d\u662f\u5728\u7f16\u8bd1\u65f6\u8981\u53bb\u68c0\u67e5 T \u7684\u7c7b\u578b\uff0c\u53ea\u6709 T \u662f\u6574\u6570\u6216\u8005\u6d6e\u70b9\u578b\u624d\u5408\u6cd5\uff0c\u7136\u540e\u5728\u4e3b\u51fd\u6570\u4e2d\u5b9e\u73b0\u6574\u5f62\uff0c\u6d6e\u70b9\u578b\uff0c\u5b57\u7b26\u4e32\u7684\u5b9e\u4f8b\u5316\u3002\u8fdb\u884c\u7f16\u8bd1\u5c31\u4f1a\u62a5\u9519\uff0c\u7136\u540e\u5b9a\u4f4d\u5230\u5b57\u7b26\u4e32\u5b9e\u4f8b\u5316\u6240\u5728\u884c\uff0c\u5e76\u4e14\u7ed9\u51fa\u62a5\u9519\u4fe1\u606f T must be integral or floating point \u3002 #include <stdio.h> #include <type_traits> #include <string.h> template < typename T > T MYMAX ( T x , T y ){ static_assert ( std :: is_integral < T >:: value || std :: is_floating_point < T >:: value , \"T must be integral or floating point\" ); return x < y ? y : x ; } int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX < int > ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX < double > ( 3.14 , 2.73 )); printf ( \"%s \\n \" , MYMAX ( \"short string\" , \"very very long string\" )); return 0 ; } \u6700\u540e\u6ce8\u610f\uff0c static_assert \u662f\u5728\u7f16\u8bd1\u65f6\u7684\u68c0\u67e5\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u8fd0\u884c\u7684\u6027\u80fd\u3002 \u5927\u5bb6\u53ef\u80fd\u4f1a\u6709\u7591\u95ee\uff0c\u4ee3\u7801\u4e2d\u7528\u5230\u7684 type_traits \u548c std::is_integral \u4ee5\u53ca std::is_floating_point \u662f\u4ec0\u4e48\u4e1c\u897f\u3002\u8fd8\u6709\u5c31\u662f\u521a\u521a static_assert \u7684\u64cd\u4f5c\u53ea\u662f\u9003\u907f\u4e86\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\uff0c\u800c\u6ca1\u6709\u89e3\u51b3\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u3002\u4e0d\u8fc7\u6ca1\u5173\u7cfb\uff01\u8fd9\u4e9b\u90fd\u662f\u5c0f\u7cd6\u5728\u540e\u7eed\u90fd\u4f1a\u8bb2\u5230\u7684\u3002","title":"static_assert \u7c7b\u578b\u68c0\u67e5"},{"location":"learn_cpp/09_template_special.html","text":"\u6a21\u677f\u7279\u4f8b \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6009_\u6a21\u677f\u7279\u4f8b \u4e0a\u4e00\u7bc7\u6587\u7ae0 \u6211\u4eec\u4e86\u89e3\u4e86\u6a21\u7248\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fd9\u671f\u8c08\u8c08\u6a21\u677f\u7279\u4f8b\uff0c\u5305\u62ec\u4e09\u4e2a\u4e3b\u8981\u5185\u5bb9\uff1a \u6cdb\u578b\u7f16\u7a0b\u7684\u7279\u6b8a\u60c5\u51b5 \u504f\u7279\u5316 \u7279\u5316\u7684\u5e94\u7528 \u6cdb\u578b\u7f16\u7a0b\u7684\u7279\u6b8a\u60c5\u51b5 \u00b6 \u6211\u4eec\u8fd8\u662f\u4f7f\u7528\u539f\u6765\u5199\u8fc7\u7684 MYMAX \u4ee3\u7801\u6765\u4f5c\u4e3a\u4f8b\u5b50\uff1a #include <stdio.h> #include <type_traits> #include <string.h> template < typename T > T MYMAX ( T x , T y ){ static_assert ( std :: is_integral < T >:: value || std :: is_floating_point < T >:: value , \"T must be integral or floating point\" ); return x < y ? y : x ; } int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX < int > ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX < double > ( 3.14 , 2.73 )); printf ( \"%s \\n \" , MYMAX ( \"short string\" , \"very very long string\" )); return 0 ; } \u539f\u6765\u7684\u4ee3\u7801\u505a\u4e86\u9759\u6001\u68c0\u67e5\uff0c\u9047\u5230\u8f93\u5165\u662f\u5b57\u7b26\u4e32\u65f6\u53ef\u4ee5\u8fbe\u5230\u7f16\u8bd1\u65f6\u5c31\u62a5\u9519\u3002\u8fd9\u79cd\u505a\u6cd5\u5176\u5b9e\u662f\u56de\u907f\u95ee\u9898\u800c\u4e0d\u662f\u89e3\u51b3\u95ee\u9898\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6a21\u7248\u7279\u4f8b\u6765\u89e3\u51b3\uff1a template < typename T > T MYMAX ( T x , T y ){ static_assert ( std :: is_integral < T >:: value || std :: is_floating_point < T >:: value , \"T must be integral or floating point\" ); return x < y ? y : x ; } template <> const char * MYMAX ( const char * x , const char * y ){ if ( strlen ( x ) < strlen ( y )) { return y ; } else { return x ; } } \u8fd9\u91cc\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2a\u6a21\u7248\u7279\u5316\u7684 MYMAX \uff0c\u6709 template \u5173\u952e\u5b57\uff0c\u4f46\u662f\u6ca1\u6709\u53c2\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u4ec5\u4ec5\u53ea\u9488\u5bf9 const char* \u7c7b\u578b\u751f\u6548\uff0c\u51fd\u6570\u5185\u90e8\u7684\u5b9e\u73b0\u4e5f\u662f\u4e13\u95e8\u9488\u5bf9\u5b57\u7b26\u4e32\u7684\u3002\u5176\u5b9e\u5c31\u662f\u9488\u5bf9\u67d0\u4e9b\u6a21\u7248\u53c2\u6570\u8fdb\u884c\u4e86\u7279\u5316\uff0c\u7f16\u8bd1\u5668\u5728\u5b9e\u4f8b\u5316\u6a21\u7248\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u4f18\u5148\u9009\u62e9\u7279\u5316\u7684\u6a21\u7248\uff0c\u90a3\u6a21\u7248\u7279\u5316\u7684\u4f18\u70b9\u4e5f\u662f\u5f88\u660e\u663e\u7684\u4e86\u3002\u9996\u5148\uff0c\u4ece\u529f\u80fd\u4e0a\u6765\u8bf4\uff0c\u6709\u7c7b\u4f3c\u865a\u51fd\u6570\u90a3\u6837\u201c\u591a\u6001\u201d\u7684\u6548\u679c\uff0c\u6211\u4eec\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u8c03\u7528\u7684\u90fd\u662f MYMAX \uff0c\u4f46\u662f\u4f1a\u81ea\u52a8\u9009\u62e9\u4e0d\u540c\u7684\u5904\u7406\u903b\u8f91\u3002\u5176\u6b21\uff0c\u6a21\u7248\u7279\u5316\u7684\u6027\u80fd\u66f4\u4f18\uff0c\u865a\u51fd\u6570\u4f9d\u8d56\u7684\u662f\u8fd0\u884c\u65f6\u5237\u65b0\u865a\u8868\u3001\u67e5\u8be2\u865a\u8868\uff0c\u800c\u6a21\u677f\u7279\u5316\u5728\u7f16\u8bd1\u65f6\u5c31\u5b8c\u6210\u4e86\u201c\u5206\u652f\u7684\u9009\u62e9\u201d\uff0c\u4e0d\u5360\u7528\u8fd0\u884c\u65f6\u7684\u8d44\u6e90\uff0c\u56e0\u6b64\u4e00\u822c\u6765\u8bf4\u5b83\u7684\u6027\u80fd\u66f4\u4f18\u3002 \u504f\u7279\u5316 \u00b6 \u521a\u521a\u5199\u7684\u6a21\u7248\u7279\u5316\uff0c template \u62ec\u53f7\u4e2d\u662f\u6ca1\u6709\u4efb\u4f55\u6a21\u7248\u53c2\u6570\u7684\uff0c\u8fd9\u79cd\u60c5\u51b5\u88ab\u79f0\u4e3a\u201c\u5168\u7279\u5316\u201d\uff0c\u5176\u8868\u793a\u6240\u6709\u7684\u6a21\u7248\u53c2\u6570\u90fd\u88ab\u7279\u522b\u6307\u5b9a\u4e86\u3002\u4e0e\u4e4b\u5bf9\u5e94\u7684\uff0c\u5bf9\u4e8e\u7c7b\u6a21\u7248\u800c\u8a00\u8fd8\u6709\u201c\u504f\u7279\u5316\u201d\uff0c\u8868\u793a\u53ea\u7528\u7279\u5316\u90e8\u5206\u6a21\u7248\u53c2\u6570\u3002 #include <iostream> using namespace std ; enum class DEVICE { CPU , GPU }; template < DEVICE dev , typename IN_T1 , typename IN_T2 > struct CExample { void operator ()( IN_T1 a , IN_T2 b ); }; template < typename IN_T1 , typename IN_T2 > struct CExample < DEVICE :: CPU , IN_T1 , IN_T2 > { void operator ()( IN_T1 a , IN_T2 b ) { cout << \"CPU template for: \" << a << \" \" << b << endl ; } }; template < typename IN_T1 , typename IN_T2 > struct CExample < DEVICE :: GPU , IN_T1 , IN_T2 > { void operator ()( IN_T1 a , IN_T2 b ) { cout << \"GPU template for: \" << a << \" \" << b << endl ; } }; int main () { CExample < DEVICE :: CPU , double , double > ()( 1.5 , 2.4 ); CExample < DEVICE :: GPU , int , int > ()( 4 , 2 ); return 0 ; } \u8fd9\u91cc\u5b9e\u73b0\u4e86\u4e00\u4e2a CExample \u7684\u6a21\u7248\u7c7b\uff0c\u5176\u6709\u4e09\u4e2a\u6a21\u7248\u53c2\u6570\u3002\u7136\u540e\u6211\u4eec\u5b9e\u73b0\u4e24\u4e2a\u6a21\u7248\u7c7b\uff0c\u5206\u522b\u5bf9 CPU \u548c GPU \u7684 DEVICE \u8fdb\u884c\u504f\u7279\u5316\u3002\u53ef\u4ee5\u770b\u5230\u9488\u5bf9\u7ed9\u5b9a\u7684\u4e0d\u540c\u201c\u8bbe\u5907\u7c7b\u578b\u201d\uff0c\u6211\u4eec\u8c03\u7528\u65f6\u4f7f\u7528\u7684\u90fd\u662f\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u4f46\u662f\u5374\u89e6\u53d1\u4e86\u5b8c\u5168\u4e0d\u540c\u7684\u8fd0\u884c\u6d41\u7a0b\u3002 \u7279\u5316\u7684\u5e94\u7528 \u00b6 \u901a\u8fc7\u4e0a\u9762\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u6a21\u7248\u7684\u5168\u7279\u5316\u548c\u504f\u7279\u5316\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ece\u77e5\u540d\u5f00\u6e90\u8f6f\u4ef6 PyTorch \u548c OneFlow \u6765\u4f53\u4f1a\u6a21\u7248\u7279\u5316\u7684\u7528\u5904\u3002\u6211\u4eec\u77e5\u9053\uff0c\u5de5\u4e1a\u7ea7\u522b\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u65e0\u8bba\u662f PyTorch \u8fd8\u662f OneFlow\uff0c\u90fd\u8981\u53bb\u9002\u914d\u591a\u79cd\u786c\u4ef6\uff0c\u6700\u5e38\u89c1\u7684\u5c31\u662f\u9002\u914d GPU \u548c CPU\u3002 PyTorch \u7684\u9002\u914d\u98ce\u683c \u00b6 PyTorch \u4e00\u822c\u4f1a\u9488\u5bf9 CPU \u548c GPU \u5206\u522b\u5199\u4e00\u5957\u72ec\u7acb\u7684\u4ee3\u7801\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ee5 PyTorch \u7684 eye \u7b97\u5b50\u4e3a\u4f8b\u770b\u770b\u3002\u5b83\u7684 CPU \u7248\u672c\u7684\u5b9e\u73b0\u653e\u5728 eye_out_cpu \u4e2d\u3002 result . resize_ ({ n , m }); result . zero_ (); int64_t sz = std :: min < int64_t > ( n , m ); AT_DISPATCH_ALL_TYPES_AND_COMPLEX_AND2 ( at :: ScalarType :: Half , at :: ScalarType :: Bool , result . scalar_type (), \"eye\" , [ & ]() -> void { scalar_t * result_data = result . data_ptr < scalar_t > (); at :: parallel_for ( 0 , sz , internal :: GRAIN_SIZE , [ & ]( int64_t p_begin , int64_t p_end ) { for ( const auto i : c10 :: irange ( p_begin , p_end )) result_data [ i * ( result . strides ()[ 0 ] + result . stride ()[ 1 ])] = 1 ; }); }); \u4e0a\u9762\u662f CPU \u7248\u672c\u7684 eye \u7b97\u5b50\u5b9e\u73b0\uff0c\u800c\u5728 GPU \u7248\u672c\u4e2d\uff0c\u5176\u5b9e\u73b0\u5728 eye_out_gpu \u4e2d\u3002 result . resize_ ({ n , m }); result . zero_ (); int64_t sz = std :: min < int64_t > ( n , m ); int64_t stride = result . stride ( 0 ) + result . stride ( 1 ); Tensor diag = result . as_strided ({ sz }, { stride }); diag . fill_ ( 1 ); PyTorch \u8fd9\u79cd\u98ce\u683c\u4e3a\u6bcf\u4e00\u79cd\u786c\u4ef6\u90fd\u5199\u4e00\u5957 kernel \uff0c\u8fd9\u6837\u4ee3\u7801\u6e05\u723d\u7b80\u6d01\uff0c\u66f4\u5bb9\u6613\u8ba9\u4eba\u770b\u61c2\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u4ea7\u751f\u6bd4\u8f83\u591a\u7684\u91cd\u590d\u4ee3\u7801\u3002 OneFlow \u7684\u9002\u914d\u98ce\u683c \u00b6 OneFlow \u4e2d\u5c31\u8fd0\u7528\u4e86\u6a21\u7248\u7279\u4f8b\u7b49\u6280\u5de7\uff0c\u628a\u5728\u9002\u914d\u786c\u4ef6\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u91cd\u590d\u7684\u4ee3\u7801\u964d\u4f4e\u5230\u6700\u5c11\u3002 \u4e0d\u7ba1\u662f CPU \u8fd8\u662f GPU\uff0c\u7528\u7684\u90fd\u662f\u4e0b\u9762\u540c\u4e00\u4efd\u4ee3\u7801\uff0c\u5373 SetOneInDiag \u51fd\u6570\uff0c\u5176\u58f0\u660e\u5728 eye_kernel_util.h \u3002 template < typename T > OF_DEVICE_FUNC void SetOneInDiag ( const int64_t cols , const int64_t rows , T * out ) { const T one = static_cast < T > ( 1 ); XPU_1D_KERNEL_LOOP ( i , rows ) { const int64_t index = i * cols + i ; out [ index ] = one ; } } \u800c\u4e0d\u540c\u8bbe\u5907\u7684\u5165\u53e3\u4e5f\u662f\u7edf\u4e00\u7684\uff0c\u5c31\u662f\u4e0b\u9762\u7684 EyeFunctor \u62ec\u53f7\u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\uff0c\u5b9e\u73b0\u5728 eye_kernel.cpp \u3002 void Compute ( user_op :: KernelComputeContext * ctx ) const override { int64_t rows = ctx -> Attr < int64_t > ( \"rows\" ); int64_t cols = ctx -> Attr < int64_t > ( \"cols\" ); if ( rows == 0 || cols == 0 ) { return ; } Tensor * out_tensor = ctx -> Tensor4ArgNameAndIndex ( \"out\" , 0 ); T * out = out_tensor -> mut_dptr < T > (); Memset < device_type > ( ctx -> stream (), out_tensor -> mut_dptr < T > (), 0 , out_tensor -> shape (). elem_cnt () * GetSizeOfDataType ( out_tensor -> data_type ())); EyeFunctor < device_type , T > ()( ctx -> stream (), cols , std :: min ( cols , rows ), out ); } OneFlow \u9488\u5bf9\u4e0d\u540c\u7684\u8bbe\u5907\u505a\u4e86\u7279\u5316\uff0c\u628a\u90a3\u4e9b\u65e0\u6cd5\u7edf\u4e00\u7684\u4ee3\u7801\u90fd\u653e\u5230\u4e86\u7279\u5316\u7684\u6a21\u7248\u91cc\u3002 \u6bd4\u5982 CPU \u7248\u672c\u7684 EyeFunctor \uff0c\u76f4\u63a5\u8c03\u7528\u4e86 SetOneInDiag \u51fd\u6570\uff0c\u5176\u5b9e\u73b0\u5728 eye_kernel_util.cpp \u3002 template < typename T > struct EyeFunctor < DeviceType :: kCPU , T > final { void operator ()( ep :: Stream * stream , const int64_t & cols , const int64_t & rows , T * out ) { SetOneInDiag ( cols , rows , out ); } }; \u800c GPU \u7248\u672c\u7684 EyeFunctor \uff0c\u8981\u5b9e\u73b0 global \u51fd\u6570\uff0c\u5e76\u542f\u52a8 kernel \uff0c\u5176\u5b9e\u73b0\u5728 eye_kernel_util.cu \u3002 template < typename T > __global__ void EyeForwardGpuKernel ( const int64_t cols , const int64_t rows , T * out ) { SetOneInDiag ( cols , rows , out ); } template < typename T > struct EyeFunctor < DeviceType :: kCUDA , T > final { void operator ()( ep :: Stream * stream , const int64_t & cols , const int64_t & rows , T * out ) { RUN_CUDA_KERNEL (( EyeForwardGpuKernel < T > ), stream , rows , cols , rows , out ); } }; OneFlow \u8fd9\u79cd\u98ce\u683c\u4ee3\u7801\u66f4\u7cbe\u70bc\uff0c\u5197\u4f59\u5ea6\u4e5f\u66f4\u4f4e\uff0c\u4f46\u662f\u5bf9 C++ \u7684\u8981\u6c42\u4e5f\u66f4\u9ad8\u3002","title":"\u6a21\u677f\u7279\u4f8b"},{"location":"learn_cpp/09_template_special.html#_1","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6009_\u6a21\u677f\u7279\u4f8b \u4e0a\u4e00\u7bc7\u6587\u7ae0 \u6211\u4eec\u4e86\u89e3\u4e86\u6a21\u7248\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fd9\u671f\u8c08\u8c08\u6a21\u677f\u7279\u4f8b\uff0c\u5305\u62ec\u4e09\u4e2a\u4e3b\u8981\u5185\u5bb9\uff1a \u6cdb\u578b\u7f16\u7a0b\u7684\u7279\u6b8a\u60c5\u51b5 \u504f\u7279\u5316 \u7279\u5316\u7684\u5e94\u7528","title":"\u6a21\u677f\u7279\u4f8b"},{"location":"learn_cpp/09_template_special.html#_2","text":"\u6211\u4eec\u8fd8\u662f\u4f7f\u7528\u539f\u6765\u5199\u8fc7\u7684 MYMAX \u4ee3\u7801\u6765\u4f5c\u4e3a\u4f8b\u5b50\uff1a #include <stdio.h> #include <type_traits> #include <string.h> template < typename T > T MYMAX ( T x , T y ){ static_assert ( std :: is_integral < T >:: value || std :: is_floating_point < T >:: value , \"T must be integral or floating point\" ); return x < y ? y : x ; } int main ( int argc , char * argv []) { printf ( \"%d \\n \" , MYMAX < int > ( 10 , 5 )); printf ( \"%1f \\n \" , MYMAX < double > ( 3.14 , 2.73 )); printf ( \"%s \\n \" , MYMAX ( \"short string\" , \"very very long string\" )); return 0 ; } \u539f\u6765\u7684\u4ee3\u7801\u505a\u4e86\u9759\u6001\u68c0\u67e5\uff0c\u9047\u5230\u8f93\u5165\u662f\u5b57\u7b26\u4e32\u65f6\u53ef\u4ee5\u8fbe\u5230\u7f16\u8bd1\u65f6\u5c31\u62a5\u9519\u3002\u8fd9\u79cd\u505a\u6cd5\u5176\u5b9e\u662f\u56de\u907f\u95ee\u9898\u800c\u4e0d\u662f\u89e3\u51b3\u95ee\u9898\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6a21\u7248\u7279\u4f8b\u6765\u89e3\u51b3\uff1a template < typename T > T MYMAX ( T x , T y ){ static_assert ( std :: is_integral < T >:: value || std :: is_floating_point < T >:: value , \"T must be integral or floating point\" ); return x < y ? y : x ; } template <> const char * MYMAX ( const char * x , const char * y ){ if ( strlen ( x ) < strlen ( y )) { return y ; } else { return x ; } } \u8fd9\u91cc\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2a\u6a21\u7248\u7279\u5316\u7684 MYMAX \uff0c\u6709 template \u5173\u952e\u5b57\uff0c\u4f46\u662f\u6ca1\u6709\u53c2\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u4ec5\u4ec5\u53ea\u9488\u5bf9 const char* \u7c7b\u578b\u751f\u6548\uff0c\u51fd\u6570\u5185\u90e8\u7684\u5b9e\u73b0\u4e5f\u662f\u4e13\u95e8\u9488\u5bf9\u5b57\u7b26\u4e32\u7684\u3002\u5176\u5b9e\u5c31\u662f\u9488\u5bf9\u67d0\u4e9b\u6a21\u7248\u53c2\u6570\u8fdb\u884c\u4e86\u7279\u5316\uff0c\u7f16\u8bd1\u5668\u5728\u5b9e\u4f8b\u5316\u6a21\u7248\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u4f18\u5148\u9009\u62e9\u7279\u5316\u7684\u6a21\u7248\uff0c\u90a3\u6a21\u7248\u7279\u5316\u7684\u4f18\u70b9\u4e5f\u662f\u5f88\u660e\u663e\u7684\u4e86\u3002\u9996\u5148\uff0c\u4ece\u529f\u80fd\u4e0a\u6765\u8bf4\uff0c\u6709\u7c7b\u4f3c\u865a\u51fd\u6570\u90a3\u6837\u201c\u591a\u6001\u201d\u7684\u6548\u679c\uff0c\u6211\u4eec\u5bf9\u4e0d\u540c\u7684\u6570\u636e\u8c03\u7528\u7684\u90fd\u662f MYMAX \uff0c\u4f46\u662f\u4f1a\u81ea\u52a8\u9009\u62e9\u4e0d\u540c\u7684\u5904\u7406\u903b\u8f91\u3002\u5176\u6b21\uff0c\u6a21\u7248\u7279\u5316\u7684\u6027\u80fd\u66f4\u4f18\uff0c\u865a\u51fd\u6570\u4f9d\u8d56\u7684\u662f\u8fd0\u884c\u65f6\u5237\u65b0\u865a\u8868\u3001\u67e5\u8be2\u865a\u8868\uff0c\u800c\u6a21\u677f\u7279\u5316\u5728\u7f16\u8bd1\u65f6\u5c31\u5b8c\u6210\u4e86\u201c\u5206\u652f\u7684\u9009\u62e9\u201d\uff0c\u4e0d\u5360\u7528\u8fd0\u884c\u65f6\u7684\u8d44\u6e90\uff0c\u56e0\u6b64\u4e00\u822c\u6765\u8bf4\u5b83\u7684\u6027\u80fd\u66f4\u4f18\u3002","title":"\u6cdb\u578b\u7f16\u7a0b\u7684\u7279\u6b8a\u60c5\u51b5"},{"location":"learn_cpp/09_template_special.html#_3","text":"\u521a\u521a\u5199\u7684\u6a21\u7248\u7279\u5316\uff0c template \u62ec\u53f7\u4e2d\u662f\u6ca1\u6709\u4efb\u4f55\u6a21\u7248\u53c2\u6570\u7684\uff0c\u8fd9\u79cd\u60c5\u51b5\u88ab\u79f0\u4e3a\u201c\u5168\u7279\u5316\u201d\uff0c\u5176\u8868\u793a\u6240\u6709\u7684\u6a21\u7248\u53c2\u6570\u90fd\u88ab\u7279\u522b\u6307\u5b9a\u4e86\u3002\u4e0e\u4e4b\u5bf9\u5e94\u7684\uff0c\u5bf9\u4e8e\u7c7b\u6a21\u7248\u800c\u8a00\u8fd8\u6709\u201c\u504f\u7279\u5316\u201d\uff0c\u8868\u793a\u53ea\u7528\u7279\u5316\u90e8\u5206\u6a21\u7248\u53c2\u6570\u3002 #include <iostream> using namespace std ; enum class DEVICE { CPU , GPU }; template < DEVICE dev , typename IN_T1 , typename IN_T2 > struct CExample { void operator ()( IN_T1 a , IN_T2 b ); }; template < typename IN_T1 , typename IN_T2 > struct CExample < DEVICE :: CPU , IN_T1 , IN_T2 > { void operator ()( IN_T1 a , IN_T2 b ) { cout << \"CPU template for: \" << a << \" \" << b << endl ; } }; template < typename IN_T1 , typename IN_T2 > struct CExample < DEVICE :: GPU , IN_T1 , IN_T2 > { void operator ()( IN_T1 a , IN_T2 b ) { cout << \"GPU template for: \" << a << \" \" << b << endl ; } }; int main () { CExample < DEVICE :: CPU , double , double > ()( 1.5 , 2.4 ); CExample < DEVICE :: GPU , int , int > ()( 4 , 2 ); return 0 ; } \u8fd9\u91cc\u5b9e\u73b0\u4e86\u4e00\u4e2a CExample \u7684\u6a21\u7248\u7c7b\uff0c\u5176\u6709\u4e09\u4e2a\u6a21\u7248\u53c2\u6570\u3002\u7136\u540e\u6211\u4eec\u5b9e\u73b0\u4e24\u4e2a\u6a21\u7248\u7c7b\uff0c\u5206\u522b\u5bf9 CPU \u548c GPU \u7684 DEVICE \u8fdb\u884c\u504f\u7279\u5316\u3002\u53ef\u4ee5\u770b\u5230\u9488\u5bf9\u7ed9\u5b9a\u7684\u4e0d\u540c\u201c\u8bbe\u5907\u7c7b\u578b\u201d\uff0c\u6211\u4eec\u8c03\u7528\u65f6\u4f7f\u7528\u7684\u90fd\u662f\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u4f46\u662f\u5374\u89e6\u53d1\u4e86\u5b8c\u5168\u4e0d\u540c\u7684\u8fd0\u884c\u6d41\u7a0b\u3002","title":"\u504f\u7279\u5316"},{"location":"learn_cpp/09_template_special.html#_4","text":"\u901a\u8fc7\u4e0a\u9762\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u6a21\u7248\u7684\u5168\u7279\u5316\u548c\u504f\u7279\u5316\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ece\u77e5\u540d\u5f00\u6e90\u8f6f\u4ef6 PyTorch \u548c OneFlow \u6765\u4f53\u4f1a\u6a21\u7248\u7279\u5316\u7684\u7528\u5904\u3002\u6211\u4eec\u77e5\u9053\uff0c\u5de5\u4e1a\u7ea7\u522b\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u65e0\u8bba\u662f PyTorch \u8fd8\u662f OneFlow\uff0c\u90fd\u8981\u53bb\u9002\u914d\u591a\u79cd\u786c\u4ef6\uff0c\u6700\u5e38\u89c1\u7684\u5c31\u662f\u9002\u914d GPU \u548c CPU\u3002","title":"\u7279\u5316\u7684\u5e94\u7528"},{"location":"learn_cpp/09_template_special.html#pytorch","text":"PyTorch \u4e00\u822c\u4f1a\u9488\u5bf9 CPU \u548c GPU \u5206\u522b\u5199\u4e00\u5957\u72ec\u7acb\u7684\u4ee3\u7801\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ee5 PyTorch \u7684 eye \u7b97\u5b50\u4e3a\u4f8b\u770b\u770b\u3002\u5b83\u7684 CPU \u7248\u672c\u7684\u5b9e\u73b0\u653e\u5728 eye_out_cpu \u4e2d\u3002 result . resize_ ({ n , m }); result . zero_ (); int64_t sz = std :: min < int64_t > ( n , m ); AT_DISPATCH_ALL_TYPES_AND_COMPLEX_AND2 ( at :: ScalarType :: Half , at :: ScalarType :: Bool , result . scalar_type (), \"eye\" , [ & ]() -> void { scalar_t * result_data = result . data_ptr < scalar_t > (); at :: parallel_for ( 0 , sz , internal :: GRAIN_SIZE , [ & ]( int64_t p_begin , int64_t p_end ) { for ( const auto i : c10 :: irange ( p_begin , p_end )) result_data [ i * ( result . strides ()[ 0 ] + result . stride ()[ 1 ])] = 1 ; }); }); \u4e0a\u9762\u662f CPU \u7248\u672c\u7684 eye \u7b97\u5b50\u5b9e\u73b0\uff0c\u800c\u5728 GPU \u7248\u672c\u4e2d\uff0c\u5176\u5b9e\u73b0\u5728 eye_out_gpu \u4e2d\u3002 result . resize_ ({ n , m }); result . zero_ (); int64_t sz = std :: min < int64_t > ( n , m ); int64_t stride = result . stride ( 0 ) + result . stride ( 1 ); Tensor diag = result . as_strided ({ sz }, { stride }); diag . fill_ ( 1 ); PyTorch \u8fd9\u79cd\u98ce\u683c\u4e3a\u6bcf\u4e00\u79cd\u786c\u4ef6\u90fd\u5199\u4e00\u5957 kernel \uff0c\u8fd9\u6837\u4ee3\u7801\u6e05\u723d\u7b80\u6d01\uff0c\u66f4\u5bb9\u6613\u8ba9\u4eba\u770b\u61c2\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u4ea7\u751f\u6bd4\u8f83\u591a\u7684\u91cd\u590d\u4ee3\u7801\u3002","title":"PyTorch \u7684\u9002\u914d\u98ce\u683c"},{"location":"learn_cpp/09_template_special.html#oneflow","text":"OneFlow \u4e2d\u5c31\u8fd0\u7528\u4e86\u6a21\u7248\u7279\u4f8b\u7b49\u6280\u5de7\uff0c\u628a\u5728\u9002\u914d\u786c\u4ef6\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u91cd\u590d\u7684\u4ee3\u7801\u964d\u4f4e\u5230\u6700\u5c11\u3002 \u4e0d\u7ba1\u662f CPU \u8fd8\u662f GPU\uff0c\u7528\u7684\u90fd\u662f\u4e0b\u9762\u540c\u4e00\u4efd\u4ee3\u7801\uff0c\u5373 SetOneInDiag \u51fd\u6570\uff0c\u5176\u58f0\u660e\u5728 eye_kernel_util.h \u3002 template < typename T > OF_DEVICE_FUNC void SetOneInDiag ( const int64_t cols , const int64_t rows , T * out ) { const T one = static_cast < T > ( 1 ); XPU_1D_KERNEL_LOOP ( i , rows ) { const int64_t index = i * cols + i ; out [ index ] = one ; } } \u800c\u4e0d\u540c\u8bbe\u5907\u7684\u5165\u53e3\u4e5f\u662f\u7edf\u4e00\u7684\uff0c\u5c31\u662f\u4e0b\u9762\u7684 EyeFunctor \u62ec\u53f7\u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\uff0c\u5b9e\u73b0\u5728 eye_kernel.cpp \u3002 void Compute ( user_op :: KernelComputeContext * ctx ) const override { int64_t rows = ctx -> Attr < int64_t > ( \"rows\" ); int64_t cols = ctx -> Attr < int64_t > ( \"cols\" ); if ( rows == 0 || cols == 0 ) { return ; } Tensor * out_tensor = ctx -> Tensor4ArgNameAndIndex ( \"out\" , 0 ); T * out = out_tensor -> mut_dptr < T > (); Memset < device_type > ( ctx -> stream (), out_tensor -> mut_dptr < T > (), 0 , out_tensor -> shape (). elem_cnt () * GetSizeOfDataType ( out_tensor -> data_type ())); EyeFunctor < device_type , T > ()( ctx -> stream (), cols , std :: min ( cols , rows ), out ); } OneFlow \u9488\u5bf9\u4e0d\u540c\u7684\u8bbe\u5907\u505a\u4e86\u7279\u5316\uff0c\u628a\u90a3\u4e9b\u65e0\u6cd5\u7edf\u4e00\u7684\u4ee3\u7801\u90fd\u653e\u5230\u4e86\u7279\u5316\u7684\u6a21\u7248\u91cc\u3002 \u6bd4\u5982 CPU \u7248\u672c\u7684 EyeFunctor \uff0c\u76f4\u63a5\u8c03\u7528\u4e86 SetOneInDiag \u51fd\u6570\uff0c\u5176\u5b9e\u73b0\u5728 eye_kernel_util.cpp \u3002 template < typename T > struct EyeFunctor < DeviceType :: kCPU , T > final { void operator ()( ep :: Stream * stream , const int64_t & cols , const int64_t & rows , T * out ) { SetOneInDiag ( cols , rows , out ); } }; \u800c GPU \u7248\u672c\u7684 EyeFunctor \uff0c\u8981\u5b9e\u73b0 global \u51fd\u6570\uff0c\u5e76\u542f\u52a8 kernel \uff0c\u5176\u5b9e\u73b0\u5728 eye_kernel_util.cu \u3002 template < typename T > __global__ void EyeForwardGpuKernel ( const int64_t cols , const int64_t rows , T * out ) { SetOneInDiag ( cols , rows , out ); } template < typename T > struct EyeFunctor < DeviceType :: kCUDA , T > final { void operator ()( ep :: Stream * stream , const int64_t & cols , const int64_t & rows , T * out ) { RUN_CUDA_KERNEL (( EyeForwardGpuKernel < T > ), stream , rows , cols , rows , out ); } }; OneFlow \u8fd9\u79cd\u98ce\u683c\u4ee3\u7801\u66f4\u7cbe\u70bc\uff0c\u5197\u4f59\u5ea6\u4e5f\u66f4\u4f4e\uff0c\u4f46\u662f\u5bf9 C++ \u7684\u8981\u6c42\u4e5f\u66f4\u9ad8\u3002","title":"OneFlow \u7684\u9002\u914d\u98ce\u683c"},{"location":"learn_cpp/11_template_sfinae.html","text":"\u641e\u61c2SFINAE \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6011_\u6a21\u677f\u5143\u7f16\u7a0b\u6572\u95e8\u7816\uff1a\u641e\u61c2 SFINAE \u8fd9\u671f\u5e2e\u5927\u5bb6\u5f7b\u5e95\u641e\u6e05\u695a SFINAE \u662f\u4ec0\u4e48\uff0c\u5305\u62ec\u4e09\u4e2a\u4e3b\u8981\u5185\u5bb9\uff1a \u51fd\u6570\u91cd\u8f7d\u7684\u89e3\u51b3\u6d41\u7a0b \u6a21\u677f\u7279\u4f8b\u7684\u5c40\u9650\u6027 SFINAE \u51fd\u6570\u91cd\u8f7d\u7684\u89e3\u51b3\u6d41\u7a0b \u00b6 \u5927\u5bb6\u5148\u770b\u4e00\u770b\u8fd9\u6bb5\u4ee3\u7801\uff1a void f ( int x , int y ){ } void f ( double x , double y ){ } int main ( int argc , char * argv []) { f ( 3 , 5 ); f ( 3.14 , 2.73 ); return 0 ; } \u8fd9\u6bb5\u4ee3\u7801\u5728 C \u8bed\u8a00\u4e2d\u662f\u7f16\u8bd1\u4e0d\u901a\u8fc7\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a C \u8bed\u8a00\u662f\u4e0d\u652f\u7279\u201c\u91cd\u8f7d\u201d\u7684\uff0c\u5230 C++ \u624d\u652f\u6301\u91cd\u8f7d\u3002C++ \u7f16\u8bd1\u5668\u9047\u5230\u67d0\u4e9b\u8c03\u7528\u8bed\u53e5\u65f6\uff0c\u5b83\u5c31\u4f1a\u6839\u636e\u8c03\u7528\u8bed\u53e5\u7684**\u53c2\u6570\u7c7b\u578b**\u3001 \u4e2a\u6570 \u3001**\u987a\u5e8f**\u7b49\u6765\u5339\u914d\u5230\u6700\u5408\u9002\u7684\u51fd\u6570\uff0c\u7136\u540e\u751f\u6210\u8c03\u7528\u4ee3\u7801\u3002\u6bd4\u5982\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u51fd\u6570\u8c03\u7528 f(3, 5) \u4f1a\u5339\u914d\u5230\u7b2c\u4e00\u4e2a\u5b9e\u73b0\uff0c f(3.14, 2.73) \u5219\u4f1a\u5339\u914d\u5230\u7b2c\u4e8c\u4e2a\u51fd\u6570\u5b9e\u73b0\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u7231\u5b66\u4e60\u7684\u4eba\uff0c\u6211\u4eec\u5e94\u8be5\u4e86\u89e3\u7f16\u8bd1\u5668\u662f\u5982\u4f55\u5b9e\u73b0\u91cd\u8f7d\u7684\uff0c\u5728\u5b9e\u73b0\u91cd\u8f7d\u7684\u65f6\u5019\u53c8\u505a\u4e86\u4e9b\u4ec0\u4e48\uff0c\u8fd9\u5bf9\u6211\u4eec\u540e\u9762\u7406\u89e3 SFINAE \u4e5f\u975e\u5e38\u91cd\u8981\u3002\u8fd9\u91cc\u7b80\u5355\u7f57\u5217\u4e00\u4e0b\u51fd\u6570\u91cd\u8f7d\u8fc7\u7a0b\u4e2d\u5230\u5e95\u8981\u505a\u54ea\u4e9b\u4e8b\uff1a \u5c06\u6240\u6709\u5bf9\u5e94\u7684\u201c\u540c\u540d\u201d\u5019\u9009\u51fd\u6570\uff0c\u505a\u6210\u4e00\u4e2a\u96c6\u5408 \u6839\u636e\u51fd\u6570\u58f0\u660e\uff0c\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u6389\u4e00\u4e9b\u4e0d\u5408\u9002\u7684\u5019\u9009\u51fd\u6570 \u5728\u96c6\u5408\u4e2d\u5269\u4f59\u7684\u51fd\u6570\u4e2d\uff0c\u4f9d\u636e\u53c2\u6570\uff0c\u6311\u9009\u4e00\u4e2a\u6700\u9002\u5408\u7684\u51fd\u6570\u3002\u5982\u679c\u6311\u9009\u4e0d\u5230\uff0c\u6216\u8005\u65e0\u6cd5\u51b3\u5b9a\u54ea\u4e2a\u6700\u5408\u9002\uff0c\u5c31\u62a5\u9519 \u5982\u679c\u4e0a\u4e00\u6b65\u6311\u9009\u5230\u4e86\u6700\u5408\u9002\u7684\u51fd\u6570\uff0c\u8fd8\u4f1a\u7ee7\u7eed\u505a\u4e00\u4e9b\u68c0\u67e5\uff0c\u6bd4\u5982\u662f\u5426\u662f\u88ab delete \u7684 \u4ee5\u4e0a\u7b2c\u4e8c\u6b65\u6839\u636e\u51fd\u6570\u58f0\u660e\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u6389\u4e00\u4e9b\u4e0d\u5408\u9002\u7684\u5019\u9009\u51fd\u6570\u4e3b\u8981\u5c31\u662f\u4f9d\u9760 SFINAE\uff0c\u8fd9\u4e2a\u540e\u9762\u518d\u4ecb\u7ecd\u3002 \u800c\u4f9d\u636e\u53c2\u6570\u6311\u9009\u4e00\u4e2a\u6700\u5408\u9002\u7684\u51fd\u6570\u8fd9\u4e00\u6761\u539f\u5219\uff0c\u5176\u5b9e\u6307\u7684\u662f\u5b9e\u53c2\u548c\u5f62\u8c61\u7684\u5339\u914d\u5462\uff0c\u5b83\u662f\u6709\u4f18\u5148\u7ea7\u987a\u5e8f\u7684\uff0c\u6bd4\u5982\u8bf4\uff0c\u7c7b\u578b\u5b8c\u5168\u5339\u914d\uff0c\u90a3\u4e48\u4f18\u5148\u7ea7\u80af\u5b9a\u662f\u6700\u9ad8\u7684\uff0c\u5176\u6b21\u5c31\u662f\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u8f6c\u6362\uff0c\u6bd4\u5982\u8bf4 const \u7684\u4f18\u5148\u7ea7\uff0c\u6700\u4f4e\u7684\u5c31\u662f\u53ef\u53d8\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u51e0\u4e4e\u80fd\u5339\u914d\u4efb\u610f\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u6240\u4ee5\u7528\u6765\u505a\u515c\u5e95\u90a3\u5176\u5b9e\u662f\u6700\u5408\u7406\u7684\u3002 \u5b8c\u5168\u5339\u914d const \u8f6c\u6362 fun(...) \u6a21\u677f\u7279\u4f8b\u7684\u5c40\u9650\u6027 \u00b6 \u770b\u4e86\u51fd\u6570\u91cd\u8f7d\u7684\u57fa\u7840\u4e4b\u540e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8fdb\u5165\u4e0b\u4e00\u4e2a\u8bdd\u9898\uff0c\u53ef\u53d8\u53c2\u6a21\u677f\u7684\u5c40\u9650\u6027\uff0c\u5728\u4e4b\u524d\u7684\u6211\u4eec\u8c08\u5230\u4e86\u6a21\u677f\u7279\u4f8b\u7684\u8bb8\u591a\u4f18\u70b9\uff0c\u5b83\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u6709\u9009\u62e9\u7684\u5c55\u5f00\uff0c\u8fbe\u5230\u201c\u7f16\u8bd1\u65f6\u591a\u6001\u201d\u7684\u6548\u679c\u3002\u53ef\u662f\u5982\u679c\u4e0d\u501f\u52a9\u5176\u4ed6\u7684\u8bed\u6cd5\uff0c\u6709\u65f6\u5019\u6a21\u677f\u7279\u4f8b\u6240\u9009\u62e9\u7684\u5206\u652f\uff0c\u53ef\u80fd\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u5e76\u4e0d\u662f\u6211\u4eec\u671f\u5f85\u7684\u3002 \u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u4f8b\u5b50 #include <iostream> #include <vector> using namespace std ; template < typename T , unsigned N > std :: size_t len ( T ( & )[ N ]){ return N ; } template < typename T > typename T :: size_type len ( T const & t ){ return t . size (); } unsigned len (...){ return 0 ; } int main () { int a [ 18 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 18 }; cout << len ( a ) << endl ; vector < int > myvector { 1 , 2 , 3 , 4 , 5 }; cout << len ( myvector ) << endl ; cout << len ( 3.14 ) << endl ; return 0 ; } \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u7684 len \u51fd\u6570\uff0c\u7528\u6765\u8fd4\u56de\u6570\u636e\u7684\u957f\u5ea6\uff0c\u7b2c\u4e00\u4e2a\u662f\u9488\u5bf9\u6570\u7ec4\u7684\u6a21\u677f\u7279\u4f8b\uff0c\u8fd4\u56de\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u9488\u5bf9 STL \u5bb9\u5668\uff0c\u901a\u8fc7\u8c03\u7528\u5bf9\u8c61\u7684 size \u65b9\u6cd5\u8fd4\u56de\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u7b2c\u4e09\u4e2a\u662f\u4e00\u4e2a\u201c\u515c\u5e95\u201d\u51fd\u6570\uff0c\u5982\u679c\u524d\u4e24\u4e2a\u90fd\u4e0d\u80fd\u5339\u914d\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de 0\uff0c\u8fd9\u6837\u4e0d\u81f3\u4e8e\u7f16\u8bd1\u5931\u8d25\u3002 \u7a0b\u5e8f\u8fd0\u884c\u5f97\u5230\u7684\u8f93\u51fa\u5982\u4e0b\uff0c\u8fd9\u91cc\u7ed3\u679c\u6253\u5370\u90fd\u662f OK \u7684\uff0c\u7b2c\u4e00\u4e2a\u8c03\u7528\u5339\u914d\u7684\u662f\u6570\u7ec4\u7279\u4f8b\uff0c\u7b2c\u4e8c\u4e2a\u5339\u914d\u7684\u662f\u5bb9\u5668\u7279\u4f8b\uff0c\u6700\u540e\u4e00\u4e2a\u5339\u914d\u7684\u662f\u6211\u4eec\u7684\u201c\u515c\u5e95\u201d\u51fd\u6570\u3002 18 5 0 \u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u6253\u5370\u7684\u7ed3\u679c\uff0c\u90fd\u662f\u7b26\u5408\u6211\u4eec\u671f\u5f85\u7684\uff0c\u4f46\u662f\u6211\u4eec\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7c7b\uff0c\u53ef\u80fd\u5c31\u4f1a\u7834\u574f\u8fd9\u79cd\u548c\u8c10\u7684\u5c40\u9762\u3002\u6211\u4eec\u81ea\u5b9a\u4e49\u4e00\u4e2a\u8fd9\u6837\u7684\u7c7b\uff0c\u5b83\u5e76\u4e0d\u6253\u7b97\u652f\u6301 size \u65b9\u6cd5\uff0c\u4f46\u662f\u5b83\u90a3\u91cc\u9762\u786e\u5b9a\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u7c7b\u578b size_type \uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5185\u5fc3\u7684\u671f\u5f85\u662f\u4ed6\u65e0\u6cd5\u88ab\u9488\u5bf9\u6570\u7ec4\u3001\u9488\u5bf9\u6807\u51c6\u5e93\u5bb9\u5668\u7684\u6a21\u677f\u7279\u4f8b\u6240\u6355\u83b7\uff0c\u6240\u4ee5\u5b83\u6700\u540e\u4f1a\u843d\u5728 len(...) \u8fd9\u4e2a\u51fd\u6570\u4e0a\u3002\u6700\u540e\u7684 len(CMyClass()) \u8c03\u7528\u6211\u4eec\u671f\u5f85\u8f93\u51fa\u662f 0\u3002 class CMyClass { public : using size_type = unsigned int ; } int main () { ... cout << len ( CMyClass ()) << endl ; ... } \u7136\u800c\uff0c\u5b9e\u9645\u60c5\u51b5\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff1f\u6211\u4eec\u7f16\u8bd1\u770b\u770b\uff0c\u53d1\u73b0\u51fa\u73b0\u4e86\u7f16\u8bd1\u62a5\u9519\uff0c\u63d0\u793a CMyClass \u6ca1\u6709 size \u6210\u5458\uff0c\u7f16\u8bd1\u5668\u5e76\u6ca1\u6709\u9009\u62e9 len(...) \u7684\u51fd\u6570\u7279\u4f8b\uff0c\u800c\u662f\u9009\u62e9\u4e86\u5bb9\u5668\u7684\u6a21\u677f\u7279\u4f8b\uff0c\u7f16\u8bd1\u5668\u4e0d\u542c\u8bdd\uff0c\u6211\u4eec\u8981\u600e\u4e48\u7ea0\u6b63\u5b83\u5462\uff1f main.cpp: In instantiation of \u2018typename T::size_type len ( const T & ) [ with T = CMyClass ; typename T::size_type = unsigned int ] \u2019: main.cpp:37:27: required from here main.cpp:15:14: error: \u2018const class CMyClass\u2019 has no member named \u2018size\u2019 return t.size () ; ~~^~~~ <builtin>: recipe for target 'main.o' failed make: *** [ main.o ] Error 1 SFINAE \u00b6 \u5728\u89e3\u51b3\u51fd\u6570\u90a3\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u4f7f\u7528\u5b9e\u53c2\u7c7b\u578b\u5bf9\u51fd\u6570\u58f0\u660e\u505a\u66ff\u6362\uff0c\u6ce8\u610f\u8fd9\u91cc\u548c\u6a21\u677f\u7684\u5c55\u5f00\u662f\u4e0d\u540c\u7684\uff0c\u8fd9\u91cc\u53ea\u9488\u5bf9\u51fd\u6570\u58f0\u660e\u505a\u66ff\u6362\uff0c\u5e76\u4e0d\u9488\u5bf9\u6574\u4e2a\u51fd\u6570\u4f53\uff0c\u5982\u679c\u628a\u66ff\u6362\u5b8c\u6210\u540e\u53d1\u73b0\u5f97\u5230\u7684\u51fd\u6570\u58f0\u660e\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u90a3\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u90a3\u5c31\u662f**\u5ffd\u7565\u4e0d\u8ba1**\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u4e0a\u9762\u8bf4\u5230\u7684\u4ece\u5019\u9009\u51fd\u6570\u96c6\u5408\u4e2d**\u79fb\u9664**\uff0c\u5e76\u4e14**\u4e0d\u62a5\u9519**\u3002\u8fd9\u79cd\u66ff\u6362\u5931\u8d25\u4e0d\u7b97\u9519\u7684\u884c\u4e3a\uff0c\u5b83\u7684\u82f1\u6587\u7684\u5c31\u662f Substitution Failure Is Not An Error\uff0c\u5b83\u7684\u7f29\u5199\u5c31\u662f SFINAE\u3002 \u4e4b\u524d len(CMyClass()) \u8fd9\u4e2a\u8c03\u7528\u9009\u62e9\u4e86\u5bb9\u5668\u8fd9\u4e2a\u51fd\u6570\u7279\u4f8b\uff0c\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 SFINAE \u7684\u5b58\u5728\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u6545\u610f\u8ba9\u8fd9\u4e00\u4e2a\u7279\u4f8b\u9488\u5bf9 CMyClass \u4ea7\u751f\u66ff\u6362\u5931\u8d25\uff0c\u4ece\u800c\u8ba9\u5b83\u5728\u9488\u5bf9 CMyClass \u7684\u51fd\u6570\u91cd\u8f7d\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u88ab\u5ffd\u7565\u7684\uff0c\u8fd9\u6837\u5c31\u80fd\u8fbe\u5230\u6700\u7ec8 len(CMyClass()) \u5339\u914d\u7684\u662f len(...) \u7684\u76ee\u7684\u3002 \u63a5\u4e0b\u6765\u770b\u770b\u6211\u4eec\u662f\u600e\u4e48\u505a\u7684\u5427\uff0c\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u6539\u9020\u540e\u7684\u9488\u5bf9\u5bb9\u5668\u7684\u6a21\u677f\u7279\u4f8b template < typename T > decltype ( T (). size (), typename T :: size_type ()) len ( T const & t ) { return t . size (); } \u7a0b\u5e8f\u7684\u8f93\u51fa\u4e3a\uff1a 18 5 0 0 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7f16\u8bd1\u4e0d\u518d\u62a5\u9519\uff0c\u6700\u540e\u4e00\u4e2a\u8c03\u7528\u7684\u8f93\u51fa\u4e3a 0\uff0c\u5df2\u7ecf\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\u4e86\u3002\u8fd9\u4e2a\u4ee3\u7801\u770b\u4e0a\u53bb\u662f\u4e0d\u662f\u8fd8\u662f\u6709\u4e00\u4e22\u4e22\u7684\u590d\u6742\uff0c\u8fd9\u91cc\u6211\u4eec\u7528\u81f3\u4e86 decltype \uff0c decltype \u4e2d\u4e43\u81f3\u4e86\u9017\u53f7\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u77e5\u9053\u9017\u53f7\u8fd0\u7b97\u7b26\u662f\u4ee5\u5bf9\u53f3\u8fb9\u7684\u8868\u8fbe\u5f0f\u4e3a\u51c6\uff0c\u6240\u4ee5\u8fd9\u91cc decltype \u6700\u540e\u58f0\u660e\u7684\u8fd8\u662f size_type \u3002\u4f46\u662f\u56e0\u4e3a\u6211\u4eec\u8fd9\u91cc\u8c03\u7528\u4e86\u4e00\u6b21 T().size() \uff0c\u7f16\u8bd1\u5668\u5728\u9488\u5bf9 CMyClass \u505a\u51fd\u6570\u91cd\u8f7d\u65f6\uff0c\u5c31\u4f1a\u5c06\u5176\u66ff\u6362\u4e3a CMyClass.size() \uff0c\u800c\u8fd9\u4e2a\u5c55\u5f00\u7684\u7ed3\u679c\u662f\u65e0\u6548\u7684\uff0c\u56e0\u4e3a CMyClass \u662f\u6ca1\u6709 size \u65b9\u6cd5\u7684\uff0c\u4e8e\u662f\u66ff\u6362\u5931\u8d25\uff0c\u4f46\u662f\u4e0d\u4f1a\u89e6\u53d1\u7f16\u8bd1\u5931\u8d25\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ee7\u7eed\u627e\u5230\u66f4\u5408\u9002\u7684\u51fd\u6570\uff0c\u4e8e\u662f\u627e\u5230\u4e86 len(...) \u8fd9\u79cd\u7f16\u7a0b\u6280\u5de7\u662f\u4e0d\u662f\u6709\u4e00\u70b9\u70b9\u53ef\u80fd\u4f1a\u529d\u9000\u5927\u5bb6\uff0c\u6709\u6ca1\u6709\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u4f7f\u7528 SFINAE \u5462\uff1f\u5f53\u7136\u6709\uff01\u5b83\u5c31\u662f\u6211\u4eec\u4e0b\u4e00\u671f\u8981\u8bb2\u7684 enable_if \u3002","title":"\u641e\u61c2 SFINAE"},{"location":"learn_cpp/11_template_sfinae.html#sfinae","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a C++\u65b0\u6807\u51c6011_\u6a21\u677f\u5143\u7f16\u7a0b\u6572\u95e8\u7816\uff1a\u641e\u61c2 SFINAE \u8fd9\u671f\u5e2e\u5927\u5bb6\u5f7b\u5e95\u641e\u6e05\u695a SFINAE \u662f\u4ec0\u4e48\uff0c\u5305\u62ec\u4e09\u4e2a\u4e3b\u8981\u5185\u5bb9\uff1a \u51fd\u6570\u91cd\u8f7d\u7684\u89e3\u51b3\u6d41\u7a0b \u6a21\u677f\u7279\u4f8b\u7684\u5c40\u9650\u6027 SFINAE","title":"\u641e\u61c2SFINAE"},{"location":"learn_cpp/11_template_sfinae.html#_1","text":"\u5927\u5bb6\u5148\u770b\u4e00\u770b\u8fd9\u6bb5\u4ee3\u7801\uff1a void f ( int x , int y ){ } void f ( double x , double y ){ } int main ( int argc , char * argv []) { f ( 3 , 5 ); f ( 3.14 , 2.73 ); return 0 ; } \u8fd9\u6bb5\u4ee3\u7801\u5728 C \u8bed\u8a00\u4e2d\u662f\u7f16\u8bd1\u4e0d\u901a\u8fc7\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a C \u8bed\u8a00\u662f\u4e0d\u652f\u7279\u201c\u91cd\u8f7d\u201d\u7684\uff0c\u5230 C++ \u624d\u652f\u6301\u91cd\u8f7d\u3002C++ \u7f16\u8bd1\u5668\u9047\u5230\u67d0\u4e9b\u8c03\u7528\u8bed\u53e5\u65f6\uff0c\u5b83\u5c31\u4f1a\u6839\u636e\u8c03\u7528\u8bed\u53e5\u7684**\u53c2\u6570\u7c7b\u578b**\u3001 \u4e2a\u6570 \u3001**\u987a\u5e8f**\u7b49\u6765\u5339\u914d\u5230\u6700\u5408\u9002\u7684\u51fd\u6570\uff0c\u7136\u540e\u751f\u6210\u8c03\u7528\u4ee3\u7801\u3002\u6bd4\u5982\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u51fd\u6570\u8c03\u7528 f(3, 5) \u4f1a\u5339\u914d\u5230\u7b2c\u4e00\u4e2a\u5b9e\u73b0\uff0c f(3.14, 2.73) \u5219\u4f1a\u5339\u914d\u5230\u7b2c\u4e8c\u4e2a\u51fd\u6570\u5b9e\u73b0\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u7231\u5b66\u4e60\u7684\u4eba\uff0c\u6211\u4eec\u5e94\u8be5\u4e86\u89e3\u7f16\u8bd1\u5668\u662f\u5982\u4f55\u5b9e\u73b0\u91cd\u8f7d\u7684\uff0c\u5728\u5b9e\u73b0\u91cd\u8f7d\u7684\u65f6\u5019\u53c8\u505a\u4e86\u4e9b\u4ec0\u4e48\uff0c\u8fd9\u5bf9\u6211\u4eec\u540e\u9762\u7406\u89e3 SFINAE \u4e5f\u975e\u5e38\u91cd\u8981\u3002\u8fd9\u91cc\u7b80\u5355\u7f57\u5217\u4e00\u4e0b\u51fd\u6570\u91cd\u8f7d\u8fc7\u7a0b\u4e2d\u5230\u5e95\u8981\u505a\u54ea\u4e9b\u4e8b\uff1a \u5c06\u6240\u6709\u5bf9\u5e94\u7684\u201c\u540c\u540d\u201d\u5019\u9009\u51fd\u6570\uff0c\u505a\u6210\u4e00\u4e2a\u96c6\u5408 \u6839\u636e\u51fd\u6570\u58f0\u660e\uff0c\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u6389\u4e00\u4e9b\u4e0d\u5408\u9002\u7684\u5019\u9009\u51fd\u6570 \u5728\u96c6\u5408\u4e2d\u5269\u4f59\u7684\u51fd\u6570\u4e2d\uff0c\u4f9d\u636e\u53c2\u6570\uff0c\u6311\u9009\u4e00\u4e2a\u6700\u9002\u5408\u7684\u51fd\u6570\u3002\u5982\u679c\u6311\u9009\u4e0d\u5230\uff0c\u6216\u8005\u65e0\u6cd5\u51b3\u5b9a\u54ea\u4e2a\u6700\u5408\u9002\uff0c\u5c31\u62a5\u9519 \u5982\u679c\u4e0a\u4e00\u6b65\u6311\u9009\u5230\u4e86\u6700\u5408\u9002\u7684\u51fd\u6570\uff0c\u8fd8\u4f1a\u7ee7\u7eed\u505a\u4e00\u4e9b\u68c0\u67e5\uff0c\u6bd4\u5982\u662f\u5426\u662f\u88ab delete \u7684 \u4ee5\u4e0a\u7b2c\u4e8c\u6b65\u6839\u636e\u51fd\u6570\u58f0\u660e\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u6389\u4e00\u4e9b\u4e0d\u5408\u9002\u7684\u5019\u9009\u51fd\u6570\u4e3b\u8981\u5c31\u662f\u4f9d\u9760 SFINAE\uff0c\u8fd9\u4e2a\u540e\u9762\u518d\u4ecb\u7ecd\u3002 \u800c\u4f9d\u636e\u53c2\u6570\u6311\u9009\u4e00\u4e2a\u6700\u5408\u9002\u7684\u51fd\u6570\u8fd9\u4e00\u6761\u539f\u5219\uff0c\u5176\u5b9e\u6307\u7684\u662f\u5b9e\u53c2\u548c\u5f62\u8c61\u7684\u5339\u914d\u5462\uff0c\u5b83\u662f\u6709\u4f18\u5148\u7ea7\u987a\u5e8f\u7684\uff0c\u6bd4\u5982\u8bf4\uff0c\u7c7b\u578b\u5b8c\u5168\u5339\u914d\uff0c\u90a3\u4e48\u4f18\u5148\u7ea7\u80af\u5b9a\u662f\u6700\u9ad8\u7684\uff0c\u5176\u6b21\u5c31\u662f\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u8f6c\u6362\uff0c\u6bd4\u5982\u8bf4 const \u7684\u4f18\u5148\u7ea7\uff0c\u6700\u4f4e\u7684\u5c31\u662f\u53ef\u53d8\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u51e0\u4e4e\u80fd\u5339\u914d\u4efb\u610f\u7684\u53c2\u6570\u7c7b\u578b\uff0c\u6240\u4ee5\u7528\u6765\u505a\u515c\u5e95\u90a3\u5176\u5b9e\u662f\u6700\u5408\u7406\u7684\u3002 \u5b8c\u5168\u5339\u914d const \u8f6c\u6362 fun(...)","title":"\u51fd\u6570\u91cd\u8f7d\u7684\u89e3\u51b3\u6d41\u7a0b"},{"location":"learn_cpp/11_template_sfinae.html#_2","text":"\u770b\u4e86\u51fd\u6570\u91cd\u8f7d\u7684\u57fa\u7840\u4e4b\u540e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u8fdb\u5165\u4e0b\u4e00\u4e2a\u8bdd\u9898\uff0c\u53ef\u53d8\u53c2\u6a21\u677f\u7684\u5c40\u9650\u6027\uff0c\u5728\u4e4b\u524d\u7684\u6211\u4eec\u8c08\u5230\u4e86\u6a21\u677f\u7279\u4f8b\u7684\u8bb8\u591a\u4f18\u70b9\uff0c\u5b83\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u6709\u9009\u62e9\u7684\u5c55\u5f00\uff0c\u8fbe\u5230\u201c\u7f16\u8bd1\u65f6\u591a\u6001\u201d\u7684\u6548\u679c\u3002\u53ef\u662f\u5982\u679c\u4e0d\u501f\u52a9\u5176\u4ed6\u7684\u8bed\u6cd5\uff0c\u6709\u65f6\u5019\u6a21\u677f\u7279\u4f8b\u6240\u9009\u62e9\u7684\u5206\u652f\uff0c\u53ef\u80fd\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u5e76\u4e0d\u662f\u6211\u4eec\u671f\u5f85\u7684\u3002 \u6211\u4eec\u6765\u770b\u8fd9\u4e2a\u4f8b\u5b50 #include <iostream> #include <vector> using namespace std ; template < typename T , unsigned N > std :: size_t len ( T ( & )[ N ]){ return N ; } template < typename T > typename T :: size_type len ( T const & t ){ return t . size (); } unsigned len (...){ return 0 ; } int main () { int a [ 18 ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 18 }; cout << len ( a ) << endl ; vector < int > myvector { 1 , 2 , 3 , 4 , 5 }; cout << len ( myvector ) << endl ; cout << len ( 3.14 ) << endl ; return 0 ; } \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u7684 len \u51fd\u6570\uff0c\u7528\u6765\u8fd4\u56de\u6570\u636e\u7684\u957f\u5ea6\uff0c\u7b2c\u4e00\u4e2a\u662f\u9488\u5bf9\u6570\u7ec4\u7684\u6a21\u677f\u7279\u4f8b\uff0c\u8fd4\u56de\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u9488\u5bf9 STL \u5bb9\u5668\uff0c\u901a\u8fc7\u8c03\u7528\u5bf9\u8c61\u7684 size \u65b9\u6cd5\u8fd4\u56de\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u7b2c\u4e09\u4e2a\u662f\u4e00\u4e2a\u201c\u515c\u5e95\u201d\u51fd\u6570\uff0c\u5982\u679c\u524d\u4e24\u4e2a\u90fd\u4e0d\u80fd\u5339\u914d\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de 0\uff0c\u8fd9\u6837\u4e0d\u81f3\u4e8e\u7f16\u8bd1\u5931\u8d25\u3002 \u7a0b\u5e8f\u8fd0\u884c\u5f97\u5230\u7684\u8f93\u51fa\u5982\u4e0b\uff0c\u8fd9\u91cc\u7ed3\u679c\u6253\u5370\u90fd\u662f OK \u7684\uff0c\u7b2c\u4e00\u4e2a\u8c03\u7528\u5339\u914d\u7684\u662f\u6570\u7ec4\u7279\u4f8b\uff0c\u7b2c\u4e8c\u4e2a\u5339\u914d\u7684\u662f\u5bb9\u5668\u7279\u4f8b\uff0c\u6700\u540e\u4e00\u4e2a\u5339\u914d\u7684\u662f\u6211\u4eec\u7684\u201c\u515c\u5e95\u201d\u51fd\u6570\u3002 18 5 0 \u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u6253\u5370\u7684\u7ed3\u679c\uff0c\u90fd\u662f\u7b26\u5408\u6211\u4eec\u671f\u5f85\u7684\uff0c\u4f46\u662f\u6211\u4eec\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u7c7b\uff0c\u53ef\u80fd\u5c31\u4f1a\u7834\u574f\u8fd9\u79cd\u548c\u8c10\u7684\u5c40\u9762\u3002\u6211\u4eec\u81ea\u5b9a\u4e49\u4e00\u4e2a\u8fd9\u6837\u7684\u7c7b\uff0c\u5b83\u5e76\u4e0d\u6253\u7b97\u652f\u6301 size \u65b9\u6cd5\uff0c\u4f46\u662f\u5b83\u90a3\u91cc\u9762\u786e\u5b9a\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u7c7b\u578b size_type \uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5185\u5fc3\u7684\u671f\u5f85\u662f\u4ed6\u65e0\u6cd5\u88ab\u9488\u5bf9\u6570\u7ec4\u3001\u9488\u5bf9\u6807\u51c6\u5e93\u5bb9\u5668\u7684\u6a21\u677f\u7279\u4f8b\u6240\u6355\u83b7\uff0c\u6240\u4ee5\u5b83\u6700\u540e\u4f1a\u843d\u5728 len(...) \u8fd9\u4e2a\u51fd\u6570\u4e0a\u3002\u6700\u540e\u7684 len(CMyClass()) \u8c03\u7528\u6211\u4eec\u671f\u5f85\u8f93\u51fa\u662f 0\u3002 class CMyClass { public : using size_type = unsigned int ; } int main () { ... cout << len ( CMyClass ()) << endl ; ... } \u7136\u800c\uff0c\u5b9e\u9645\u60c5\u51b5\u662f\u4ec0\u4e48\u6837\u7684\u5462\uff1f\u6211\u4eec\u7f16\u8bd1\u770b\u770b\uff0c\u53d1\u73b0\u51fa\u73b0\u4e86\u7f16\u8bd1\u62a5\u9519\uff0c\u63d0\u793a CMyClass \u6ca1\u6709 size \u6210\u5458\uff0c\u7f16\u8bd1\u5668\u5e76\u6ca1\u6709\u9009\u62e9 len(...) \u7684\u51fd\u6570\u7279\u4f8b\uff0c\u800c\u662f\u9009\u62e9\u4e86\u5bb9\u5668\u7684\u6a21\u677f\u7279\u4f8b\uff0c\u7f16\u8bd1\u5668\u4e0d\u542c\u8bdd\uff0c\u6211\u4eec\u8981\u600e\u4e48\u7ea0\u6b63\u5b83\u5462\uff1f main.cpp: In instantiation of \u2018typename T::size_type len ( const T & ) [ with T = CMyClass ; typename T::size_type = unsigned int ] \u2019: main.cpp:37:27: required from here main.cpp:15:14: error: \u2018const class CMyClass\u2019 has no member named \u2018size\u2019 return t.size () ; ~~^~~~ <builtin>: recipe for target 'main.o' failed make: *** [ main.o ] Error 1","title":"\u6a21\u677f\u7279\u4f8b\u7684\u5c40\u9650\u6027"},{"location":"learn_cpp/11_template_sfinae.html#sfinae_1","text":"\u5728\u89e3\u51b3\u51fd\u6570\u90a3\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u4f7f\u7528\u5b9e\u53c2\u7c7b\u578b\u5bf9\u51fd\u6570\u58f0\u660e\u505a\u66ff\u6362\uff0c\u6ce8\u610f\u8fd9\u91cc\u548c\u6a21\u677f\u7684\u5c55\u5f00\u662f\u4e0d\u540c\u7684\uff0c\u8fd9\u91cc\u53ea\u9488\u5bf9\u51fd\u6570\u58f0\u660e\u505a\u66ff\u6362\uff0c\u5e76\u4e0d\u9488\u5bf9\u6574\u4e2a\u51fd\u6570\u4f53\uff0c\u5982\u679c\u628a\u66ff\u6362\u5b8c\u6210\u540e\u53d1\u73b0\u5f97\u5230\u7684\u51fd\u6570\u58f0\u660e\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u90a3\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u90a3\u5c31\u662f**\u5ffd\u7565\u4e0d\u8ba1**\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u4e0a\u9762\u8bf4\u5230\u7684\u4ece\u5019\u9009\u51fd\u6570\u96c6\u5408\u4e2d**\u79fb\u9664**\uff0c\u5e76\u4e14**\u4e0d\u62a5\u9519**\u3002\u8fd9\u79cd\u66ff\u6362\u5931\u8d25\u4e0d\u7b97\u9519\u7684\u884c\u4e3a\uff0c\u5b83\u7684\u82f1\u6587\u7684\u5c31\u662f Substitution Failure Is Not An Error\uff0c\u5b83\u7684\u7f29\u5199\u5c31\u662f SFINAE\u3002 \u4e4b\u524d len(CMyClass()) \u8fd9\u4e2a\u8c03\u7528\u9009\u62e9\u4e86\u5bb9\u5668\u8fd9\u4e2a\u51fd\u6570\u7279\u4f8b\uff0c\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86 SFINAE \u7684\u5b58\u5728\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u6545\u610f\u8ba9\u8fd9\u4e00\u4e2a\u7279\u4f8b\u9488\u5bf9 CMyClass \u4ea7\u751f\u66ff\u6362\u5931\u8d25\uff0c\u4ece\u800c\u8ba9\u5b83\u5728\u9488\u5bf9 CMyClass \u7684\u51fd\u6570\u91cd\u8f7d\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u88ab\u5ffd\u7565\u7684\uff0c\u8fd9\u6837\u5c31\u80fd\u8fbe\u5230\u6700\u7ec8 len(CMyClass()) \u5339\u914d\u7684\u662f len(...) \u7684\u76ee\u7684\u3002 \u63a5\u4e0b\u6765\u770b\u770b\u6211\u4eec\u662f\u600e\u4e48\u505a\u7684\u5427\uff0c\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u6539\u9020\u540e\u7684\u9488\u5bf9\u5bb9\u5668\u7684\u6a21\u677f\u7279\u4f8b template < typename T > decltype ( T (). size (), typename T :: size_type ()) len ( T const & t ) { return t . size (); } \u7a0b\u5e8f\u7684\u8f93\u51fa\u4e3a\uff1a 18 5 0 0 \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7f16\u8bd1\u4e0d\u518d\u62a5\u9519\uff0c\u6700\u540e\u4e00\u4e2a\u8c03\u7528\u7684\u8f93\u51fa\u4e3a 0\uff0c\u5df2\u7ecf\u7b26\u5408\u6211\u4eec\u7684\u9884\u671f\u4e86\u3002\u8fd9\u4e2a\u4ee3\u7801\u770b\u4e0a\u53bb\u662f\u4e0d\u662f\u8fd8\u662f\u6709\u4e00\u4e22\u4e22\u7684\u590d\u6742\uff0c\u8fd9\u91cc\u6211\u4eec\u7528\u81f3\u4e86 decltype \uff0c decltype \u4e2d\u4e43\u81f3\u4e86\u9017\u53f7\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u77e5\u9053\u9017\u53f7\u8fd0\u7b97\u7b26\u662f\u4ee5\u5bf9\u53f3\u8fb9\u7684\u8868\u8fbe\u5f0f\u4e3a\u51c6\uff0c\u6240\u4ee5\u8fd9\u91cc decltype \u6700\u540e\u58f0\u660e\u7684\u8fd8\u662f size_type \u3002\u4f46\u662f\u56e0\u4e3a\u6211\u4eec\u8fd9\u91cc\u8c03\u7528\u4e86\u4e00\u6b21 T().size() \uff0c\u7f16\u8bd1\u5668\u5728\u9488\u5bf9 CMyClass \u505a\u51fd\u6570\u91cd\u8f7d\u65f6\uff0c\u5c31\u4f1a\u5c06\u5176\u66ff\u6362\u4e3a CMyClass.size() \uff0c\u800c\u8fd9\u4e2a\u5c55\u5f00\u7684\u7ed3\u679c\u662f\u65e0\u6548\u7684\uff0c\u56e0\u4e3a CMyClass \u662f\u6ca1\u6709 size \u65b9\u6cd5\u7684\uff0c\u4e8e\u662f\u66ff\u6362\u5931\u8d25\uff0c\u4f46\u662f\u4e0d\u4f1a\u89e6\u53d1\u7f16\u8bd1\u5931\u8d25\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ee7\u7eed\u627e\u5230\u66f4\u5408\u9002\u7684\u51fd\u6570\uff0c\u4e8e\u662f\u627e\u5230\u4e86 len(...) \u8fd9\u79cd\u7f16\u7a0b\u6280\u5de7\u662f\u4e0d\u662f\u6709\u4e00\u70b9\u70b9\u53ef\u80fd\u4f1a\u529d\u9000\u5927\u5bb6\uff0c\u6709\u6ca1\u6709\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u4f7f\u7528 SFINAE \u5462\uff1f\u5f53\u7136\u6709\uff01\u5b83\u5c31\u662f\u6211\u4eec\u4e0b\u4e00\u671f\u8981\u8bb2\u7684 enable_if \u3002","title":"SFINAE"},{"location":"remote_cpp_development/CMake.html","text":"\u7f16\u8bd1 C++ \u9879\u76ee\u5fc5\u5907 CMake \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u8fdc\u7a0b\u5f00\u53d1 C++ 003_CMake \u672c\u7bc7\u6587\u7ae0\u5c06\u548c\u5927\u5bb6\u804a\u4e00\u804a\u7f16\u8bd1 C++ \u9879\u76ee\u7684\u5fc5\u5907\u5de5\u5177 CMake\u3002\u73b0\u5728\u51e0\u4e4e\u6240\u6709\u7684\u5927\u578b\u7684\u5f00\u6e90\u7684 C++ \u9879\u76ee\uff0c\u90fd\u4f1a\u4f7f\u7528 CMake \u6765\u505a\u6784\u5efa\u7cfb\u7edf\u3002 \u6bd4\u5982\u7f16\u8bd1\u57fa\u7840\u8bbe\u7f6e LLVM \uff0c\u9ad8\u6027\u80fd\u5f02\u6b65 IO \u5e93 libuv \uff0c boost \u5e93 \uff0c\u5f53\u7136\u8fd8\u6709\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u3002 CMake \u9879\u76ee\u7279\u70b9 \u00b6 \u8981\u8bc6\u522b CMake \u9879\u76ee\u7279\u522b\u7b80\u5355\uff0c\u90a3\u5c31\u662f\u8fd9\u4e2a\u9879\u76ee\u4e0b\u4e00\u5b9a\u6709\u540d\u4e3a CMakeLists.txt \u7684\u6587\u4ef6 \u672c\u6587\u7684\u7ed3\u6784\u5982\u4e0b\uff1a \u4e3a\u4ec0\u4e48\u9700\u8981 CMake CMake \u793a\u4f8b \u5b9e\u6218\u7f16\u8bd1 OneFlow \u4e3a\u4ec0\u4e48\u9700\u8981 CMake \u00b6 \u7b80\u5355\u800c\u8a00\uff0cCMake \u53ef\u4ee5\u5e2e\u52a9\u8de8\u5e73\u53f0\u6765\u7f16\u8bd1\u5de5\u7a0b\u3002 \u6bd4\u5982\u8bf4\u5927\u5bb6\u5728 Windoes \u4e0a\u53ef\u80fd\u4f1a\u4f7f\u7528 Visual Studio\uff0c\u5728 Mac \u4e0a\u53ef\u80fd\u4f1a\u4f7f\u7528 XCode\uff0c\u5728 Linux \u7cfb\u7edf\u4e0b\u4f1a\u4f7f\u7528 Makefile \u6765\u7f16\u8bd1\u4e00\u4e2a C++ \u5de5\u7a0b\u3002\u5982\u679c\u540c\u4e00\u5957 C++ \u4ee3\u7801\u5728\u4e0d\u540c\u7684\u6784\u5efa\u7cfb\u7edf\u4e0b\uff0c\u90fd\u9700\u8981\u91cd\u65b0\u53bb\u8bbe\u7f6e\u4e00\u904d\uff0c\u662f\u975e\u5e38\u4e0d\u65b9\u4fbf\u7684\u3002 \u800c CMake \u5b83\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\uff0cCMake \u901a\u8fc7\u8bfb\u53d6 CMakeLists.txt \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6765\u6839\u636e\u5f53\u524d\u7684\u5e73\u53f0\u6784\u5efa\u76f8\u5e94\u7684 C++ \u5de5\u7a0b\u3002 CMake \u793a\u4f8b \u00b6 \u8fd9\u91cc\u662f\u4e00\u4e2a\u7b80\u5355\u7684 CMake \u7684\u4f8b\u5b50\uff1a cmake_minimum_required(VERSIOIN 3.14) #\u8bbe\u7f6eCMake\u6700\u5c0f\u7248\u672c project (cmake_example) #\u8bbe\u7f6e\u5de5\u7a0b\u540d add_executable(cmake_example main.cop ui.cpp logic.cpp) #\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 \u8fd9\u4e2a CMakeLists \u662f\u9879\u76ee\u8bbe\u7f6e\u7684\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u7b2c\u4e00\u884c\u662f\u8bbe\u7f6e CMake \u7684\u6700\u5c0f\u7248\u672c\uff0c\u7b2c\u4e8c\u884c\u662f\u8bbe\u7f6e\u5de5\u7a0b\u540d\uff0c\u5927\u5bb6\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u8bbe\u7f6e\u5c31\u884c\uff0c\u7b2c\u4e09\u884c\u662f\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u540d\uff0c\u540e\u9762\u7684\u662f\u4f9d\u8d56\u7684 cpp \u540d\u3002 \u63a5\u4e0b\u6765\u6587\u7ae0\u5c06\u5411\u5927\u5bb6\u5c55\u793a\u5728 Linux \u548c Windows \u7cfb\u7edf\u4e0b\u4f7f\u7528 CMake \u6765\u751f\u6210\u4e0d\u540c\u7684\u5de5\u7a0b\u3002 Linux \u4e0b\u4f7f\u7528 CMake \u00b6 \u9996\u5148\uff0c\u9700\u8981\u521b\u5efa\u4e00\u4e2a build \u76ee\u5f55\uff0c\u5728 terminal \u8f93\u5165 mkdir build \uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u5c06 CMake \u540e\u751f\u6210\u7684\u6240\u6709\u6587\u4ef6\uff0c\u6240\u6709\u5185\u5bb9\u90fd\u653e\u5230\u8fd9\u4e2a build \u76ee\u5f55\u4e0b\u3002 \u7136\u540e\u5207\u6362\u5230 build \u76ee\u5f55\uff0cterminal \u8f93\u5165 cd build \u3002 \u63a5\u7740\u4f7f\u7528 CMake \u547d\u4ee4\uff0c\u540e\u9762\u63a5 CMakeLists \u6240\u5728\u7684\u76ee\u5f55\uff0c\u4e5f\u5c31\u662f\u5b83\u7684\u4e0a\u4e00\u7ea7\u76ee\u5f55\u52a0\u4e24\u4e2a\u70b9 cmake .. \u3002 \u7136\u540e\u5728 build \u76ee\u5f55\u4e0b\u5c31\u751f\u6210\u4e86 MakeFile\uff0c\u63a5\u7740 make \u4e00\u4e0b\uff0c\u8f93\u5165 make \u3002\u53ef\u4ee5\u53d1\u73b0\u5728 build \u76ee\u5f55\u4e0b\u5c31\u751f\u6210\u4e86 cmake_example \u8fd9\u4e2a\u53ef\u6267\u884c\u7684\u6587\u4ef6\u3002 \u63a5\u7740\u6267\u884c\u4e00\u4e0b\uff0c\u8f93\u5165 ./cmake_example \uff0c\u5c31\u53ef\u4ee5\u6253\u5370\u51fa\u8981\u7684\u7ed3\u679c\u3002 CMake \u5176\u5b9e\u5c31\u662f\u901a\u8fc7\u8bfb\u53d6 CMakelists.txt \u6765\u751f\u6210\u5bf9\u5e94\u5de5\u7a0b\u7684\uff0c\u4e5f\u53ef\u4ee5\u5728 CMake \u65f6\u4f20\u9012\u4e00\u4e9b\u53d8\u91cf\u503c\u6765\u8bbe\u7f6e\u5de5\u7a0b\u5c5e\u6027\uff0c\u6bd4\u5982\u521a\u521a\u7f16\u8bd1\u7684\u5de5\u7a0b\uff0c\u5b83\u662f\u4e00\u4e2a Release \u7248\u672c\u7684\uff0c\u662f\u6ca1\u6709\u8c03\u8bd5\u4fe1\u606f\u7684\u3002 \u5173\u4e8e CMake \u66f4\u591a\u77e5\u8bc6\u70b9\uff0c\u53ef\u4ee5\u4f7f\u7528 man \u547d\u4ee4\u6765\u67e5\u770b\u4e00\u4e0b\uff0c man cmake \u3002 Windows \u4e0b\u4f7f\u7528 CMake \u00b6 \u9996\u5148\u6253\u5f00 VS \u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\uff0c\u5207\u6362\u5230\u5de5\u7a0b\u76ee\u5f55\u4e0b\uff0c cd D:\\tmp_code\\cmake_example \u3002 \u8f93\u5165 dir \uff0c\u7136\u540e\u4f7f\u7528 mkdir build \u547d\u4ee4\uff0c\u521b\u5efa build \u76ee\u5f55\u3002 \u4f7f\u7528 cd build \u5207\u6362\u5230 build \u76ee\u5f55\u3002 \u7136\u540e\u4f7f\u7528 CMake \u547d\u4ee4 cmake .. \uff0c\u5c31\u53ef\u4ee5\u5728 build \u76ee\u5f55\u4e0b\u5c31\u751f\u6210\u4e00\u4e2a sln \u6587\u4ef6\u3002 \u5b9e\u6218\u7f16\u8bd1 OneFlow \u00b6 \u50cf OneFlow \u8fd9\u6837\u5927\u578b\u7684\u7cfb\u7edf\uff0c\u5b83\u7684 CMake \u914d\u7f6e\u6587\u4ef6\u5f80\u5f80\u662f\u975e\u5e38\u590d\u6742\u7684\uff0c\u60f3\u8981\u770b\u61c2\u91cc\u9762\u7684\u6e90\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u914d\u7f6e\uff0c\u5f80\u5f80\u662f\u4e0d\u592a\u5bb9\u6613\u7684\u3002 \u4f46\u662f\u8fd9\u6837\u7684\u9879\u76ee\uff0c\u5b83\u7684 Readme \u4e00\u822c\u90fd\u4f1a\u9644\u4e0a\u8bf4\u660e\uff0c\u4ed4\u7ec6\u770b Readme \u5c31\u884c\u4e86\u3002 OneFlow \u7684 Readme \u6587\u4ef6\uff0c\u5b83\u63cf\u8ff0\u4e86\u8be5\u53bb\u54ea\u91cc\u627e\u600e\u4e48\u7f16\u8bd1 OneFlow\u3002 \u70b9\u5f00\u8fd9\u4e2a \u94fe\u63a5 \uff0c\u7136\u540e\u4e00\u6b65\u4e00\u6b65\u5730\u7f16\u8bd1 OneFlow\u3002 \u7f16\u8bd1 OneFlow \u9700\u8981\u4f7f\u7528\u5230 conda\uff0c\u5177\u4f53\u600e\u4e48\u5b89\u88c5\uff0c\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0 Conda \u4e2d\u3002 \u9996\u5148\uff0c\u9700\u8981\u6784\u5efa\u7f16\u8bd1\u73af\u5883\uff1a \u4f7f\u7528 git clone https://github.com/Oneflow-Inc/conda-env.git \u4e0b\u8f7d\u8fd9\u4e00\u4e2a\u7f16\u8bd1\u73af\u5883\u5305\u3002 \u8f93\u5165 cd conda-env \u6765 cd \u5230\u8fd9\u4e2a\u73af\u5883\u5305\u3002 \u8f93\u5165 conda env create -f=dev/gcc7/environment-v2.yml \u6784\u5efa\u8fd9\u4e00\u4e2a\u73af\u5883 \u6700\u91cd\u8981\u7684\u4e00\u6b65\uff0c\u8f93\u5165 conda activate oneflow-dev-gcc7-v2 \u548c conda env config vars set CXXFLAGS=\"-fPIC\" \u6fc0\u6d3b\u4f7f\u7528\u8fd9\u4e2a\u73af\u5883\u3002 \u5728\u6210\u529f\u6fc0\u6d3b\u8fd9\u4e2a\u73af\u5883\u540e\uff0c\u5c31\u53ef\u4ee5\u5207\u6362\u5230 OneFlow \u6e90\u7801\u76ee\u5f55\u4e0b\uff0c\u4f9d\u6b21\u8f93\u5165 cd.. \uff0c ls \u548c cd oneflow/ \u3002 \u63a5\u7740\uff0c\u4f7f\u7528 CMake \u6765\u6784\u5efa OneFlow\uff1a \u8f93\u5165 mkdir build \u6765\u6784\u5efa\u4e00\u4e2a build \u76ee\u5f55\uff0c\u76ee\u7684\u5c06\u751f\u6210\u7684\u6240\u6709\u5185\u5bb9\u90fd\u653e\u5230 build \u76ee\u5f55\u4e0b\u3002 \u7136\u540e\u5207\u6362\u5230 build \u76ee\u5f55\u4e0b\uff0c cd build \u3002 \u4f7f\u7528 CMake \u6307\u4ee4 cmake .. -C ../cmake/caches/cn/cuda.cmake \\ -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \\ -DCUDNN_ROOT_DIR=/usr/local/cudnn \u8fdb\u884c\u6784\u5efa\u3002 \u7136\u540e\u5c31\u4f1a\u53d1\u73b0\u5f53\u524d\u7684 build \u76ee\u5f55\u4e0b\u751f\u6210\u4e86 MakeFile\u3002 \u63a5\u7740\u5c31\u53ef\u4ee5\u4f7f\u7528 make -j$(nproc) \u6765\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u4e86\uff0c\u7b2c\u4e00\u6b21\u7f16\u8bd1\u7684\u8bdd\u53ef\u80fd\u9700\u8981\u534a\u4e2a\u5c0f\u65f6\u5de6\u53f3\u3002 \u5148\u8f93\u5165 cd .. \u5207\u6362\u5230\u4e0a\u7ea7\u76ee\u5f55\uff0c\u518d\u63a5\u7740\u4f7f\u7528 source build/source.sh \u5c06 OneFlow \u6dfb\u52a0\u5230 Python \u7684 path \u4e2d\u3002 \u6700\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u6307\u4ee4 python3 -m oneflow --doctor \u6765\u68c0\u67e5\u662f\u5426\u7f16\u8bd1\u6210\u529f\u3002","title":"\u7f16\u8bd1 C++ \u9879\u76ee\u5fc5\u5907 CMake"},{"location":"remote_cpp_development/CMake.html#c-cmake","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u8fdc\u7a0b\u5f00\u53d1 C++ 003_CMake \u672c\u7bc7\u6587\u7ae0\u5c06\u548c\u5927\u5bb6\u804a\u4e00\u804a\u7f16\u8bd1 C++ \u9879\u76ee\u7684\u5fc5\u5907\u5de5\u5177 CMake\u3002\u73b0\u5728\u51e0\u4e4e\u6240\u6709\u7684\u5927\u578b\u7684\u5f00\u6e90\u7684 C++ \u9879\u76ee\uff0c\u90fd\u4f1a\u4f7f\u7528 CMake \u6765\u505a\u6784\u5efa\u7cfb\u7edf\u3002 \u6bd4\u5982\u7f16\u8bd1\u57fa\u7840\u8bbe\u7f6e LLVM \uff0c\u9ad8\u6027\u80fd\u5f02\u6b65 IO \u5e93 libuv \uff0c boost \u5e93 \uff0c\u5f53\u7136\u8fd8\u6709\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 OneFlow \u3002","title":"\u7f16\u8bd1 C++ \u9879\u76ee\u5fc5\u5907 CMake"},{"location":"remote_cpp_development/CMake.html#cmake","text":"\u8981\u8bc6\u522b CMake \u9879\u76ee\u7279\u522b\u7b80\u5355\uff0c\u90a3\u5c31\u662f\u8fd9\u4e2a\u9879\u76ee\u4e0b\u4e00\u5b9a\u6709\u540d\u4e3a CMakeLists.txt \u7684\u6587\u4ef6 \u672c\u6587\u7684\u7ed3\u6784\u5982\u4e0b\uff1a \u4e3a\u4ec0\u4e48\u9700\u8981 CMake CMake \u793a\u4f8b \u5b9e\u6218\u7f16\u8bd1 OneFlow","title":"CMake \u9879\u76ee\u7279\u70b9"},{"location":"remote_cpp_development/CMake.html#cmake_1","text":"\u7b80\u5355\u800c\u8a00\uff0cCMake \u53ef\u4ee5\u5e2e\u52a9\u8de8\u5e73\u53f0\u6765\u7f16\u8bd1\u5de5\u7a0b\u3002 \u6bd4\u5982\u8bf4\u5927\u5bb6\u5728 Windoes \u4e0a\u53ef\u80fd\u4f1a\u4f7f\u7528 Visual Studio\uff0c\u5728 Mac \u4e0a\u53ef\u80fd\u4f1a\u4f7f\u7528 XCode\uff0c\u5728 Linux \u7cfb\u7edf\u4e0b\u4f1a\u4f7f\u7528 Makefile \u6765\u7f16\u8bd1\u4e00\u4e2a C++ \u5de5\u7a0b\u3002\u5982\u679c\u540c\u4e00\u5957 C++ \u4ee3\u7801\u5728\u4e0d\u540c\u7684\u6784\u5efa\u7cfb\u7edf\u4e0b\uff0c\u90fd\u9700\u8981\u91cd\u65b0\u53bb\u8bbe\u7f6e\u4e00\u904d\uff0c\u662f\u975e\u5e38\u4e0d\u65b9\u4fbf\u7684\u3002 \u800c CMake \u5b83\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u7c7b\u95ee\u9898\uff0cCMake \u901a\u8fc7\u8bfb\u53d6 CMakeLists.txt \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u6765\u6839\u636e\u5f53\u524d\u7684\u5e73\u53f0\u6784\u5efa\u76f8\u5e94\u7684 C++ \u5de5\u7a0b\u3002","title":"\u4e3a\u4ec0\u4e48\u9700\u8981 CMake"},{"location":"remote_cpp_development/CMake.html#cmake_2","text":"\u8fd9\u91cc\u662f\u4e00\u4e2a\u7b80\u5355\u7684 CMake \u7684\u4f8b\u5b50\uff1a cmake_minimum_required(VERSIOIN 3.14) #\u8bbe\u7f6eCMake\u6700\u5c0f\u7248\u672c project (cmake_example) #\u8bbe\u7f6e\u5de5\u7a0b\u540d add_executable(cmake_example main.cop ui.cpp logic.cpp) #\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6 \u8fd9\u4e2a CMakeLists \u662f\u9879\u76ee\u8bbe\u7f6e\u7684\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u7b2c\u4e00\u884c\u662f\u8bbe\u7f6e CMake \u7684\u6700\u5c0f\u7248\u672c\uff0c\u7b2c\u4e8c\u884c\u662f\u8bbe\u7f6e\u5de5\u7a0b\u540d\uff0c\u5927\u5bb6\u6839\u636e\u81ea\u5df1\u7684\u559c\u597d\u8bbe\u7f6e\u5c31\u884c\uff0c\u7b2c\u4e09\u884c\u662f\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u540d\uff0c\u540e\u9762\u7684\u662f\u4f9d\u8d56\u7684 cpp \u540d\u3002 \u63a5\u4e0b\u6765\u6587\u7ae0\u5c06\u5411\u5927\u5bb6\u5c55\u793a\u5728 Linux \u548c Windows \u7cfb\u7edf\u4e0b\u4f7f\u7528 CMake \u6765\u751f\u6210\u4e0d\u540c\u7684\u5de5\u7a0b\u3002","title":"CMake \u793a\u4f8b"},{"location":"remote_cpp_development/CMake.html#linux-cmake","text":"\u9996\u5148\uff0c\u9700\u8981\u521b\u5efa\u4e00\u4e2a build \u76ee\u5f55\uff0c\u5728 terminal \u8f93\u5165 mkdir build \uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u5c06 CMake \u540e\u751f\u6210\u7684\u6240\u6709\u6587\u4ef6\uff0c\u6240\u6709\u5185\u5bb9\u90fd\u653e\u5230\u8fd9\u4e2a build \u76ee\u5f55\u4e0b\u3002 \u7136\u540e\u5207\u6362\u5230 build \u76ee\u5f55\uff0cterminal \u8f93\u5165 cd build \u3002 \u63a5\u7740\u4f7f\u7528 CMake \u547d\u4ee4\uff0c\u540e\u9762\u63a5 CMakeLists \u6240\u5728\u7684\u76ee\u5f55\uff0c\u4e5f\u5c31\u662f\u5b83\u7684\u4e0a\u4e00\u7ea7\u76ee\u5f55\u52a0\u4e24\u4e2a\u70b9 cmake .. \u3002 \u7136\u540e\u5728 build \u76ee\u5f55\u4e0b\u5c31\u751f\u6210\u4e86 MakeFile\uff0c\u63a5\u7740 make \u4e00\u4e0b\uff0c\u8f93\u5165 make \u3002\u53ef\u4ee5\u53d1\u73b0\u5728 build \u76ee\u5f55\u4e0b\u5c31\u751f\u6210\u4e86 cmake_example \u8fd9\u4e2a\u53ef\u6267\u884c\u7684\u6587\u4ef6\u3002 \u63a5\u7740\u6267\u884c\u4e00\u4e0b\uff0c\u8f93\u5165 ./cmake_example \uff0c\u5c31\u53ef\u4ee5\u6253\u5370\u51fa\u8981\u7684\u7ed3\u679c\u3002 CMake \u5176\u5b9e\u5c31\u662f\u901a\u8fc7\u8bfb\u53d6 CMakelists.txt \u6765\u751f\u6210\u5bf9\u5e94\u5de5\u7a0b\u7684\uff0c\u4e5f\u53ef\u4ee5\u5728 CMake \u65f6\u4f20\u9012\u4e00\u4e9b\u53d8\u91cf\u503c\u6765\u8bbe\u7f6e\u5de5\u7a0b\u5c5e\u6027\uff0c\u6bd4\u5982\u521a\u521a\u7f16\u8bd1\u7684\u5de5\u7a0b\uff0c\u5b83\u662f\u4e00\u4e2a Release \u7248\u672c\u7684\uff0c\u662f\u6ca1\u6709\u8c03\u8bd5\u4fe1\u606f\u7684\u3002 \u5173\u4e8e CMake \u66f4\u591a\u77e5\u8bc6\u70b9\uff0c\u53ef\u4ee5\u4f7f\u7528 man \u547d\u4ee4\u6765\u67e5\u770b\u4e00\u4e0b\uff0c man cmake \u3002","title":"Linux \u4e0b\u4f7f\u7528 CMake"},{"location":"remote_cpp_development/CMake.html#windows-cmake","text":"\u9996\u5148\u6253\u5f00 VS \u7684\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177\uff0c\u5207\u6362\u5230\u5de5\u7a0b\u76ee\u5f55\u4e0b\uff0c cd D:\\tmp_code\\cmake_example \u3002 \u8f93\u5165 dir \uff0c\u7136\u540e\u4f7f\u7528 mkdir build \u547d\u4ee4\uff0c\u521b\u5efa build \u76ee\u5f55\u3002 \u4f7f\u7528 cd build \u5207\u6362\u5230 build \u76ee\u5f55\u3002 \u7136\u540e\u4f7f\u7528 CMake \u547d\u4ee4 cmake .. \uff0c\u5c31\u53ef\u4ee5\u5728 build \u76ee\u5f55\u4e0b\u5c31\u751f\u6210\u4e00\u4e2a sln \u6587\u4ef6\u3002","title":"Windows \u4e0b\u4f7f\u7528 CMake"},{"location":"remote_cpp_development/CMake.html#oneflow","text":"\u50cf OneFlow \u8fd9\u6837\u5927\u578b\u7684\u7cfb\u7edf\uff0c\u5b83\u7684 CMake \u914d\u7f6e\u6587\u4ef6\u5f80\u5f80\u662f\u975e\u5e38\u590d\u6742\u7684\uff0c\u60f3\u8981\u770b\u61c2\u91cc\u9762\u7684\u6e90\u7801\uff0c\u4e86\u89e3\u5982\u4f55\u914d\u7f6e\uff0c\u5f80\u5f80\u662f\u4e0d\u592a\u5bb9\u6613\u7684\u3002 \u4f46\u662f\u8fd9\u6837\u7684\u9879\u76ee\uff0c\u5b83\u7684 Readme \u4e00\u822c\u90fd\u4f1a\u9644\u4e0a\u8bf4\u660e\uff0c\u4ed4\u7ec6\u770b Readme \u5c31\u884c\u4e86\u3002 OneFlow \u7684 Readme \u6587\u4ef6\uff0c\u5b83\u63cf\u8ff0\u4e86\u8be5\u53bb\u54ea\u91cc\u627e\u600e\u4e48\u7f16\u8bd1 OneFlow\u3002 \u70b9\u5f00\u8fd9\u4e2a \u94fe\u63a5 \uff0c\u7136\u540e\u4e00\u6b65\u4e00\u6b65\u5730\u7f16\u8bd1 OneFlow\u3002 \u7f16\u8bd1 OneFlow \u9700\u8981\u4f7f\u7528\u5230 conda\uff0c\u5177\u4f53\u600e\u4e48\u5b89\u88c5\uff0c\u5728\u4e0a\u4e00\u7bc7\u6587\u7ae0 Conda \u4e2d\u3002 \u9996\u5148\uff0c\u9700\u8981\u6784\u5efa\u7f16\u8bd1\u73af\u5883\uff1a \u4f7f\u7528 git clone https://github.com/Oneflow-Inc/conda-env.git \u4e0b\u8f7d\u8fd9\u4e00\u4e2a\u7f16\u8bd1\u73af\u5883\u5305\u3002 \u8f93\u5165 cd conda-env \u6765 cd \u5230\u8fd9\u4e2a\u73af\u5883\u5305\u3002 \u8f93\u5165 conda env create -f=dev/gcc7/environment-v2.yml \u6784\u5efa\u8fd9\u4e00\u4e2a\u73af\u5883 \u6700\u91cd\u8981\u7684\u4e00\u6b65\uff0c\u8f93\u5165 conda activate oneflow-dev-gcc7-v2 \u548c conda env config vars set CXXFLAGS=\"-fPIC\" \u6fc0\u6d3b\u4f7f\u7528\u8fd9\u4e2a\u73af\u5883\u3002 \u5728\u6210\u529f\u6fc0\u6d3b\u8fd9\u4e2a\u73af\u5883\u540e\uff0c\u5c31\u53ef\u4ee5\u5207\u6362\u5230 OneFlow \u6e90\u7801\u76ee\u5f55\u4e0b\uff0c\u4f9d\u6b21\u8f93\u5165 cd.. \uff0c ls \u548c cd oneflow/ \u3002 \u63a5\u7740\uff0c\u4f7f\u7528 CMake \u6765\u6784\u5efa OneFlow\uff1a \u8f93\u5165 mkdir build \u6765\u6784\u5efa\u4e00\u4e2a build \u76ee\u5f55\uff0c\u76ee\u7684\u5c06\u751f\u6210\u7684\u6240\u6709\u5185\u5bb9\u90fd\u653e\u5230 build \u76ee\u5f55\u4e0b\u3002 \u7136\u540e\u5207\u6362\u5230 build \u76ee\u5f55\u4e0b\uff0c cd build \u3002 \u4f7f\u7528 CMake \u6307\u4ee4 cmake .. -C ../cmake/caches/cn/cuda.cmake \\ -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \\ -DCUDNN_ROOT_DIR=/usr/local/cudnn \u8fdb\u884c\u6784\u5efa\u3002 \u7136\u540e\u5c31\u4f1a\u53d1\u73b0\u5f53\u524d\u7684 build \u76ee\u5f55\u4e0b\u751f\u6210\u4e86 MakeFile\u3002 \u63a5\u7740\u5c31\u53ef\u4ee5\u4f7f\u7528 make -j$(nproc) \u6765\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u4e86\uff0c\u7b2c\u4e00\u6b21\u7f16\u8bd1\u7684\u8bdd\u53ef\u80fd\u9700\u8981\u534a\u4e2a\u5c0f\u65f6\u5de6\u53f3\u3002 \u5148\u8f93\u5165 cd .. \u5207\u6362\u5230\u4e0a\u7ea7\u76ee\u5f55\uff0c\u518d\u63a5\u7740\u4f7f\u7528 source build/source.sh \u5c06 OneFlow \u6dfb\u52a0\u5230 Python \u7684 path \u4e2d\u3002 \u6700\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u6307\u4ee4 python3 -m oneflow --doctor \u6765\u68c0\u67e5\u662f\u5426\u7f16\u8bd1\u6210\u529f\u3002","title":"\u5b9e\u6218\u7f16\u8bd1 OneFlow"},{"location":"remote_cpp_development/Clangd.html","text":"Linux \u4e0b\u6253\u9020 C++ \u5b8c\u7f8e\u5f00\u53d1 IDE\uff1aclangd \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u8fdc\u7a0b\u5f00\u53d1C++_004_clangd \u4e00\u822c\u5728 Windows \u4e0a\u505a C++ \u5f00\u53d1\u65f6\uff0c\u9996\u9009\u7684 IDE \u662f Visual Studio\u3002Visual Studio \u53f7\u79f0\u5b87\u5b99\u7b2c\u4e00 IDE\uff0c\u4e5f\u786e\u5b9e\u975e\u5e38\u5730\u597d\u7528\uff0c\u5b83\u7684\u8c03\u8bd5\u548c\u7b26\u53f7\u8df3\u8f6c\u7a97\u53e3\u90fd\u4e3a\u5f00\u53d1 C++ \u63d0\u4f9b\u4e86\u975e\u5e38\u5927\u7684\u4fbf\u6377\u3002 Linux \u4e0a\u5982\u4f55\u505a C++ \u5f00\u53d1 \u00b6 \u4f46\u662f\u5982\u679c\u9700\u8981\u5728 Linux \u4e0a\u505a C++ \u5f00\u53d1\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f \u53bb\u641c\u7d22\u89e3\u51b3\u65b9\u6848\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u641c\u7d22\u5230\uff0c\u901a\u8fc7\u914d\u7f6e VIM \u548c EMACS \u6765\u8fbe\u5230\u548c IDE \u4e00\u6837\u7684\u6548\u679c\u3002\u4f46\u662f VIM \u8fd9\u6837\u7684\u7f16\u8bd1\u5668\uff0c\u5b83\u7684\u4f7f\u7528\u95e8\u69db\u662f\u6bd4\u8f83\u9ad8\u7684\uff0c\u662f\u4e0d\u9002\u5408\u521a\u521a\u4ece Windows \u8f6c\u8fc7\u6765\u7684 Linux \u5c0f\u767d\u7a0b\u5e8f\u5458\u3002 \u4f46\u597d\u6d88\u606f\u662f\u6258 LLVM \u548c VSCode \u7684\u798f\uff0c\u53ea\u8981\u62e5\u6709\u4e86 VSCode\uff0c\u518d\u914d\u5408 clangd \u63d2\u4ef6\uff0c\u5c31\u53ef\u4ee5\u4f7f VSCode \u62e5\u6709\u548c IDE \u4e00\u6837\u7684\u4f53\u9a8c\u3002 VSCode \u7684 clangd \u63d2\u4ef6\u662f\u4f9d\u8d56\u4e8e clangd server \u7a0b\u5e8f\u7684\uff0cclangd server \u662f LLVM \u7cfb\u5217\u4ea7\u54c1\u91cc\u7684\u4e00\u4e2a\uff0c\u4e4b\u524d\u8bf4\u7684 clangd-format \u4e5f\u662f\uff0c \u5b83\u53ef\u4ee5\u5e2e\u52a9\u5206\u6790 C++ \u6587\u4ef6\uff0c\u53ef\u4ee5\u5728 GitHub \u4e0a\u8fdb\u884c\u4e0b\u8f7d clangd server \u3002 \u5f53\u4e0b\u8f7d\u5b8c\u6210 clangd \u4e4b\u540e\uff0c\u5c06\u5176\u89e3\u538b\uff0c\u7136\u540e\u76f4\u63a5\u8fd0\u884c\u91cc\u9762 bin \u6587\u4ef6\u7684 clangd\uff0c\u8f93\u5165 ./bin/clangd \u3002\u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u6211\u4eec\u4e5f\u5b89\u88c5\u6210\u529f\u4e86\u3002 \u914d\u7f6e clangd \u63d2\u4ef6 \u00b6 \u5b89\u88c5\u6210\u529f clangd server \u4e4b\u540e\u5462\uff0c\u9700\u8981\u914d\u7f6e VSCode\u3002 \u5b89\u88c5 clangd \u63d2\u4ef6 \u00b6 \u8865\u5145 \uff1a\u5982\u679c\u5b89\u88c5\u4e86 clangd\uff0c\u90a3\u4e48\u5c31\u4e0d\u8981\u4f7f\u7528\u5fae\u8f6f\u7684 C++ \u5e93\u4e86\uff0c\u9700\u8981 disable \u6389\uff0c\u4e0d\u7136 clangd \u662f\u4f7f\u7528\u4e0d\u6210\u529f\u7684\u3002 \u4e24\u5904\u914d\u7f6e \u00b6 \u63a5\u7740\u9700\u8981\u5bf9\u8fd9\u4e2a\u63d2\u4ef6\u8fdb\u884c\u4e00\u4e9b\u914d\u7f6e\uff1a \u70b9\u51fb\u8bbe\u7f6e\u6309\u94ae\uff0c\u70b9\u51fb Extension Settings\u3002 \u7b2c\u4e00\u4e2a\u662f clangd server\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u521a\u521a\u4e0b\u8f7d\u7684\u90a3\u4e2a clangd server \u7684\u8def\u5f84\u3002 \u9996\u5148\u5207\u6362\u5230 Linux \u4e0b\u7684\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u914d\u7f6e\u9875\u9762\u3002 \u7136\u540e\u914d\u7f6e\u7684\u662f clangd \u7684 path\uff0c\u4e5f\u5c31\u662f server \u7684 path \u914d\u7f6e\u3002 \u4f8b\u5b50\uff1a /home/ttlarva/clangd/clangd_13.0.0/bin/clangd \u7b2c\u4e8c\u4e2a\u914d\u7f6e\u662f\u7ed9 clangd server \u589e\u52a0\u4e00\u4e9b\u8fd0\u884c\u65f6\u9009\u9879\u3002 \u6bd4\u5982\u8bf4\u53ef\u4ee5\u589e\u52a0 -j\uff0c\u540e\u9762\u63a5\u4e0a 48\u3002\u8fd9\u4e2a\u9009\u9879\u7684\u610f\u601d\u5c31\u662f\u5e0c\u671b clangd \u4ee5 48 \u4e2a\u7ebf\u7a0b\u6765\u89e3\u6790\u5f53\u524d\u7684\u5de5\u7a0b\uff0c\u80fd\u66f4\u5feb\u3001\u66f4\u9ad8\u6548\u5730\u8fd0\u4f5c\u3002 \u4ee5\u4e0a\u5c31\u5bf9\u4e00\u4e2a\u9879\u76ee\u7684 clangd \u63d2\u4ef6\u505a\u597d\u914d\u7f6e\u4e86\u3002 clangd \u5177\u4f53\u4f7f\u7528 \u00b6 clangd \u4e3a\u4e86\u80fd\u591f\u66f4\u597d\u5730\u89e3\u6790 C++ \u6587\u4ef6\uff0c\u9700\u8981\u7528\u6237\u63d0\u4f9b\u6bcf\u4e2a\u6587\u4ef6\u7684\u7f16\u8bd1\u9009\u9879\uff0c\u5f53\u7136\u8fd9\u4e0d\u9700\u8981\u518d\u624b\u5de5\u505a\u4e86\uff0c\u53ef\u4ee5\u5728 CMake \u65f6\u52a0\u4e0a -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \u7684\u9009\u9879\u3002 \u4ee5\u4e0a\u7bc7 cmake_example \u4e3a\u51c6, \u6765\u6f14\u793a\u4e00\u4e0b clangd \u7684\u4f7f\u7528\u3002 \u521b\u5efa build \u76ee\u5f55\uff0c\u4f9d\u6b21\u8f93\u5165 mkdir build \uff0c ls \uff0c cd build/ \uff0c cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \u540e\uff0c\u5c31\u7f16\u8bd1\u5b8c\u6210\u4e86\u3002 \u5728 CMake \u6784\u5efa\u5b8c\u6210\u4e4b\u540e\u5462\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u5728 build \u76ee\u5f55\u4e0b\u591a\u4e86\u4e00\u4e2a json \u6587\u4ef6\u3002\u8fd9\u4e2a json \u6587\u4ef6\u6307\u660e\u4e86\u9879\u76ee\u4e2d\u6bcf\u4e2a\u6587\u4ef6\u7684\u4e00\u4e2a\u7f16\u8bd1\u65b9\u5f0f\u3002 \u90a3\u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e2a compile_commands.json \u6587\u4ef6, \u5b83\u53ef\u4ee5\u4f7f clangd \u66f4\u597d\u5730\u5e2e\u52a9\u8fdb\u884c\u4e00\u4e9b\u7b26\u53f7\u8df3\u8f6c\u3001\u67e5\u627e\u3001\u8c03\u8bd5\u4e4b\u7c7b\u7684\u529f\u80fd\u3002 \u5f53\u6267\u884c\u5b8c\u4ee5\u4e0a\u64cd\u4f5c\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u6765\u4f53\u4f1a\u4e00\u4e0b\u628a VSCode \u5f53\u6210 IDE \u7684\u611f\u89c9\u4e86\u3002 clangd \u63d2\u4ef6\u7684\u4f7f\u7528 \u00b6 \u9996\u5148\uff0c\u5f53\u628a\u9f20\u6807\u505c\u5728\u67d0\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u70b9\u51fb\u53f3\u952e\uff0c\u4f1a\u53d1\u73b0\u5b83\u591a\u51fa\u4e86\u975e\u5e38\u719f\u6089\u7684\u9009\u9879\u3002 \u63a5\u7740\u6765\u8bd5\u4e00\u4e0b\u7b26\u53f7\u8df3\u8f6c\uff0c\u6309\u4f4f Control\uff0c\u7136\u540e\u9f20\u6807\u5de6\u952e\uff0c\u5c31\u53ef\u4ee5\u5bf9\u51fd\u6570\u8fdb\u884c\u8df3\u8f6c\u3002 \u5b83\u4e5f\u53ef\u4ee5\u5bf9\u6587\u4ef6\u8fdb\u884c\u8df3\u8f6c\uff0c\u4f7f\u7528 Control+P \uff0c\u6253\u5f00\u6807\u8bc6\u7b26\u641c\u7d22\u6846\u3002 \u539f\u6765\u8fd9\u4e2a\u6807\u8bc6\u7b26\u641c\u7d22\u6846\u662f\u53ea\u53ef\u4ee5\u641c\u7d22\u6587\u4ef6\u7684\uff0c\u4f46\u73b0\u5728\u53ef\u4ee5\u641c\u7d22\u7b26\u53f7\u4e86\uff0c\u4f7f\u7528 @ \uff0c\u662f\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u641c\u7d22\u4e00\u4e2a\u6807\u8bc6\u7b26\u3002 \u8fd9\u91cc\u6bd4\u8f83\u5c11\uff0c\u5c31\u53ea\u6709 main\uff0c\u53ef\u4ee5\u591a\u52a0\u4e24\u4e2a\u51fd\u6570\uff1a int fun1(){} \u548c Void fun2(){} \u3002\u518d\u8bd5\u8bd5\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u8fd9\u91cc\u5c31\u6709\u4e86\u4e09\u4e2a\u6807\u8bc6\u7b26\u3002 \u9664\u4e86\u80fd\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u641c\u7d22\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 # \u6765\u5728\u5168\u5c40\u641c\u7d22\uff1aControl+P\uff0c\u8f93\u5165 #print \u53ef\u4ee5\u641c\u7d22 print\uff0c\u9009\u62e9\u540e\uff0c\u53ef\u4ee5\u6765\u5230 studio \u8fd9\u4e2a\u6587\u4ef6\u4e0b\u3002","title":"clangd \u5e2e\u52a9\u6253\u9020 Linux \u4e0b\u5b8c\u7f8e C++ IDE"},{"location":"remote_cpp_development/Clangd.html#linux-c-ideclangd","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u8fdc\u7a0b\u5f00\u53d1C++_004_clangd \u4e00\u822c\u5728 Windows \u4e0a\u505a C++ \u5f00\u53d1\u65f6\uff0c\u9996\u9009\u7684 IDE \u662f Visual Studio\u3002Visual Studio \u53f7\u79f0\u5b87\u5b99\u7b2c\u4e00 IDE\uff0c\u4e5f\u786e\u5b9e\u975e\u5e38\u5730\u597d\u7528\uff0c\u5b83\u7684\u8c03\u8bd5\u548c\u7b26\u53f7\u8df3\u8f6c\u7a97\u53e3\u90fd\u4e3a\u5f00\u53d1 C++ \u63d0\u4f9b\u4e86\u975e\u5e38\u5927\u7684\u4fbf\u6377\u3002","title":"Linux \u4e0b\u6253\u9020 C++ \u5b8c\u7f8e\u5f00\u53d1 IDE\uff1aclangd"},{"location":"remote_cpp_development/Clangd.html#linux-c","text":"\u4f46\u662f\u5982\u679c\u9700\u8981\u5728 Linux \u4e0a\u505a C++ \u5f00\u53d1\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f \u53bb\u641c\u7d22\u89e3\u51b3\u65b9\u6848\u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u641c\u7d22\u5230\uff0c\u901a\u8fc7\u914d\u7f6e VIM \u548c EMACS \u6765\u8fbe\u5230\u548c IDE \u4e00\u6837\u7684\u6548\u679c\u3002\u4f46\u662f VIM \u8fd9\u6837\u7684\u7f16\u8bd1\u5668\uff0c\u5b83\u7684\u4f7f\u7528\u95e8\u69db\u662f\u6bd4\u8f83\u9ad8\u7684\uff0c\u662f\u4e0d\u9002\u5408\u521a\u521a\u4ece Windows \u8f6c\u8fc7\u6765\u7684 Linux \u5c0f\u767d\u7a0b\u5e8f\u5458\u3002 \u4f46\u597d\u6d88\u606f\u662f\u6258 LLVM \u548c VSCode \u7684\u798f\uff0c\u53ea\u8981\u62e5\u6709\u4e86 VSCode\uff0c\u518d\u914d\u5408 clangd \u63d2\u4ef6\uff0c\u5c31\u53ef\u4ee5\u4f7f VSCode \u62e5\u6709\u548c IDE \u4e00\u6837\u7684\u4f53\u9a8c\u3002 VSCode \u7684 clangd \u63d2\u4ef6\u662f\u4f9d\u8d56\u4e8e clangd server \u7a0b\u5e8f\u7684\uff0cclangd server \u662f LLVM \u7cfb\u5217\u4ea7\u54c1\u91cc\u7684\u4e00\u4e2a\uff0c\u4e4b\u524d\u8bf4\u7684 clangd-format \u4e5f\u662f\uff0c \u5b83\u53ef\u4ee5\u5e2e\u52a9\u5206\u6790 C++ \u6587\u4ef6\uff0c\u53ef\u4ee5\u5728 GitHub \u4e0a\u8fdb\u884c\u4e0b\u8f7d clangd server \u3002 \u5f53\u4e0b\u8f7d\u5b8c\u6210 clangd \u4e4b\u540e\uff0c\u5c06\u5176\u89e3\u538b\uff0c\u7136\u540e\u76f4\u63a5\u8fd0\u884c\u91cc\u9762 bin \u6587\u4ef6\u7684 clangd\uff0c\u8f93\u5165 ./bin/clangd \u3002\u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u6211\u4eec\u4e5f\u5b89\u88c5\u6210\u529f\u4e86\u3002","title":"Linux \u4e0a\u5982\u4f55\u505a C++ \u5f00\u53d1"},{"location":"remote_cpp_development/Clangd.html#clangd","text":"\u5b89\u88c5\u6210\u529f clangd server \u4e4b\u540e\u5462\uff0c\u9700\u8981\u914d\u7f6e VSCode\u3002","title":"\u914d\u7f6e clangd \u63d2\u4ef6"},{"location":"remote_cpp_development/Clangd.html#clangd_1","text":"\u8865\u5145 \uff1a\u5982\u679c\u5b89\u88c5\u4e86 clangd\uff0c\u90a3\u4e48\u5c31\u4e0d\u8981\u4f7f\u7528\u5fae\u8f6f\u7684 C++ \u5e93\u4e86\uff0c\u9700\u8981 disable \u6389\uff0c\u4e0d\u7136 clangd \u662f\u4f7f\u7528\u4e0d\u6210\u529f\u7684\u3002","title":"\u5b89\u88c5 clangd \u63d2\u4ef6"},{"location":"remote_cpp_development/Clangd.html#_1","text":"\u63a5\u7740\u9700\u8981\u5bf9\u8fd9\u4e2a\u63d2\u4ef6\u8fdb\u884c\u4e00\u4e9b\u914d\u7f6e\uff1a \u70b9\u51fb\u8bbe\u7f6e\u6309\u94ae\uff0c\u70b9\u51fb Extension Settings\u3002 \u7b2c\u4e00\u4e2a\u662f clangd server\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u521a\u521a\u4e0b\u8f7d\u7684\u90a3\u4e2a clangd server \u7684\u8def\u5f84\u3002 \u9996\u5148\u5207\u6362\u5230 Linux \u4e0b\u7684\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u914d\u7f6e\u9875\u9762\u3002 \u7136\u540e\u914d\u7f6e\u7684\u662f clangd \u7684 path\uff0c\u4e5f\u5c31\u662f server \u7684 path \u914d\u7f6e\u3002 \u4f8b\u5b50\uff1a /home/ttlarva/clangd/clangd_13.0.0/bin/clangd \u7b2c\u4e8c\u4e2a\u914d\u7f6e\u662f\u7ed9 clangd server \u589e\u52a0\u4e00\u4e9b\u8fd0\u884c\u65f6\u9009\u9879\u3002 \u6bd4\u5982\u8bf4\u53ef\u4ee5\u589e\u52a0 -j\uff0c\u540e\u9762\u63a5\u4e0a 48\u3002\u8fd9\u4e2a\u9009\u9879\u7684\u610f\u601d\u5c31\u662f\u5e0c\u671b clangd \u4ee5 48 \u4e2a\u7ebf\u7a0b\u6765\u89e3\u6790\u5f53\u524d\u7684\u5de5\u7a0b\uff0c\u80fd\u66f4\u5feb\u3001\u66f4\u9ad8\u6548\u5730\u8fd0\u4f5c\u3002 \u4ee5\u4e0a\u5c31\u5bf9\u4e00\u4e2a\u9879\u76ee\u7684 clangd \u63d2\u4ef6\u505a\u597d\u914d\u7f6e\u4e86\u3002","title":"\u4e24\u5904\u914d\u7f6e"},{"location":"remote_cpp_development/Clangd.html#clangd_2","text":"clangd \u4e3a\u4e86\u80fd\u591f\u66f4\u597d\u5730\u89e3\u6790 C++ \u6587\u4ef6\uff0c\u9700\u8981\u7528\u6237\u63d0\u4f9b\u6bcf\u4e2a\u6587\u4ef6\u7684\u7f16\u8bd1\u9009\u9879\uff0c\u5f53\u7136\u8fd9\u4e0d\u9700\u8981\u518d\u624b\u5de5\u505a\u4e86\uff0c\u53ef\u4ee5\u5728 CMake \u65f6\u52a0\u4e0a -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \u7684\u9009\u9879\u3002 \u4ee5\u4e0a\u7bc7 cmake_example \u4e3a\u51c6, \u6765\u6f14\u793a\u4e00\u4e0b clangd \u7684\u4f7f\u7528\u3002 \u521b\u5efa build \u76ee\u5f55\uff0c\u4f9d\u6b21\u8f93\u5165 mkdir build \uff0c ls \uff0c cd build/ \uff0c cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \u540e\uff0c\u5c31\u7f16\u8bd1\u5b8c\u6210\u4e86\u3002 \u5728 CMake \u6784\u5efa\u5b8c\u6210\u4e4b\u540e\u5462\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u5728 build \u76ee\u5f55\u4e0b\u591a\u4e86\u4e00\u4e2a json \u6587\u4ef6\u3002\u8fd9\u4e2a json \u6587\u4ef6\u6307\u660e\u4e86\u9879\u76ee\u4e2d\u6bcf\u4e2a\u6587\u4ef6\u7684\u4e00\u4e2a\u7f16\u8bd1\u65b9\u5f0f\u3002 \u90a3\u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e2a compile_commands.json \u6587\u4ef6, \u5b83\u53ef\u4ee5\u4f7f clangd \u66f4\u597d\u5730\u5e2e\u52a9\u8fdb\u884c\u4e00\u4e9b\u7b26\u53f7\u8df3\u8f6c\u3001\u67e5\u627e\u3001\u8c03\u8bd5\u4e4b\u7c7b\u7684\u529f\u80fd\u3002 \u5f53\u6267\u884c\u5b8c\u4ee5\u4e0a\u64cd\u4f5c\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u6765\u4f53\u4f1a\u4e00\u4e0b\u628a VSCode \u5f53\u6210 IDE \u7684\u611f\u89c9\u4e86\u3002","title":"clangd \u5177\u4f53\u4f7f\u7528"},{"location":"remote_cpp_development/Clangd.html#clangd_3","text":"\u9996\u5148\uff0c\u5f53\u628a\u9f20\u6807\u505c\u5728\u67d0\u4e2a\u51fd\u6570\uff0c\u7136\u540e\u70b9\u51fb\u53f3\u952e\uff0c\u4f1a\u53d1\u73b0\u5b83\u591a\u51fa\u4e86\u975e\u5e38\u719f\u6089\u7684\u9009\u9879\u3002 \u63a5\u7740\u6765\u8bd5\u4e00\u4e0b\u7b26\u53f7\u8df3\u8f6c\uff0c\u6309\u4f4f Control\uff0c\u7136\u540e\u9f20\u6807\u5de6\u952e\uff0c\u5c31\u53ef\u4ee5\u5bf9\u51fd\u6570\u8fdb\u884c\u8df3\u8f6c\u3002 \u5b83\u4e5f\u53ef\u4ee5\u5bf9\u6587\u4ef6\u8fdb\u884c\u8df3\u8f6c\uff0c\u4f7f\u7528 Control+P \uff0c\u6253\u5f00\u6807\u8bc6\u7b26\u641c\u7d22\u6846\u3002 \u539f\u6765\u8fd9\u4e2a\u6807\u8bc6\u7b26\u641c\u7d22\u6846\u662f\u53ea\u53ef\u4ee5\u641c\u7d22\u6587\u4ef6\u7684\uff0c\u4f46\u73b0\u5728\u53ef\u4ee5\u641c\u7d22\u7b26\u53f7\u4e86\uff0c\u4f7f\u7528 @ \uff0c\u662f\u5728\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u641c\u7d22\u4e00\u4e2a\u6807\u8bc6\u7b26\u3002 \u8fd9\u91cc\u6bd4\u8f83\u5c11\uff0c\u5c31\u53ea\u6709 main\uff0c\u53ef\u4ee5\u591a\u52a0\u4e24\u4e2a\u51fd\u6570\uff1a int fun1(){} \u548c Void fun2(){} \u3002\u518d\u8bd5\u8bd5\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u8fd9\u91cc\u5c31\u6709\u4e86\u4e09\u4e2a\u6807\u8bc6\u7b26\u3002 \u9664\u4e86\u80fd\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u641c\u7d22\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 # \u6765\u5728\u5168\u5c40\u641c\u7d22\uff1aControl+P\uff0c\u8f93\u5165 #print \u53ef\u4ee5\u641c\u7d22 print\uff0c\u9009\u62e9\u540e\uff0c\u53ef\u4ee5\u6765\u5230 studio \u8fd9\u4e2a\u6587\u4ef6\u4e0b\u3002","title":"clangd \u63d2\u4ef6\u7684\u4f7f\u7528"},{"location":"remote_cpp_development/conda.html","text":"\u4f7f\u7528\u5305\u7ba1\u7406\u5de5\u5177 Conda \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u8fdc\u7a0b\u5f00\u53d1 C++ 002_Conda \u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u8fd9\u6837\u7684\u7ecf\u9a8c\uff0c\u60f3\u8981\u5feb\u901f\u4e0a\u624b\u4e00\u4e2a\u9879\u76ee\u7684\u65f6\u5019\uff0c\u5374\u53d1\u73b0\u642d\u73af\u5883\u90fd\u8981\u8017\u4e2a\u5341\u5929\u534a\u4e2a\u6708\u7684\uff0c\u4e0d\u662f\u52a8\u6001\u5e93\u627e\u4e0d\u5230\uff0c\u5c31\u662f\u5934\u6587\u4ef6\u627e\u4e0d\u5230\u3002\u518d\u8005\uff0c\u6709\u7684\u8dd1\u8d77\u6765\u4e4b\u540e\uff0c\u5374\u53d1\u73b0\u4f9d\u8d56\u7684\u5305\u7248\u672c\u53c8\u4e0d\u5bf9\u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c Conda \u5c31\u662f\u975e\u5e38\u6709\u5fc5\u8981\u5411\u5927\u5bb6\u63a8\u8350\u4e00\u6b3e\u73af\u5883\u7ba1\u7406\u795e\u5668\u3002 \u672c\u6587\u7684\u7ed3\u6784\u5982\u4e0b\uff1a Conda \u7684\u57fa\u672c\u4f7f\u7528 \u7528 Conda \u542f\u52a8\u300a\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u300b\u8fd9\u672c\u4e66\u7684\u5b66\u4e60\u73af\u5883 Conda \u7684\u57fa\u672c\u4f7f\u7528 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5728\u8fd9\u4e2a \u7f51\u7ad9 \u4e0b\u8f7d\u5bf9\u5e94\u7684\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\u7684 Miniconda \u73af\u5883\u3002 \u5728 Windows \u4e0b\uff0c\u5b83\u662f\u4e00\u4e2a\u666e\u901a\u7684\u8f6f\u4ef6\u5305\uff0c\u53cc\u51fb\u5c31\u53ef\u4ee5\u8fd0\u884c\u5b89\u88c5\u3002 \u5728 Linux \u4e0b\uff0c\u5b83\u662f\u4e00\u4e2a Shell \u7684\u811a\u672c\uff0c\u6211\u4eec\u4f7f\u7528 sh \u547d\u4ee4\u5c31\u53ef\u4ee5\u8fd0\u884c\u8fd9\u4e2a\u811a\u672c\u8fdb\u884c\u5b89\u88c5\u3002 Conda \u8fdb\u884c\u73af\u5883\u9694\u79bb\u7684\u597d\u5904 \u00b6 \u7c7b\u4f3c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u591a\u8fdb\u7a0b\u7684\u601d\u60f3\uff0cconda \u7684\u597d\u5904\u5c31\u662f\u4ee5\u73af\u5883\u4e3a\u5355\u4f4d\u505a\u5305\u7ba1\u7406\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u4e92\u76f8\u4e0d\u5e72\u6270\u7684\u73af\u5883\uff0c\u4e5f\u53ef\u4ee5\u4ece\u522b\u4eba\u9884\u8bbe\u597d\u7684\u73af\u5883\uff0c\u7136\u540e\u76f4\u63a5\u5b89\u88c5\u8f6f\u4ef6\u5305\u3002 \u521b\u5efa \u300a\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u300b \u5b66\u4e60\u73af\u5883 \u00b6 \u5b66\u4e60\u6df1\u5ea6\u5b66\u4e60\u7684\u4eba\uff0c\u5e94\u8be5\u90fd\u542c\u8bf4\u8fc7 \u300a\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u300b \u8fd9\u672c\u4e66\uff0c\u4ed6\u662f\u7531\u5927\u795e\u674e\u6c90\u8001\u5e08\u7b49\u4eba\u51fa\u54c1\u7684\uff0c\u5b83\u4e0d\u4ec5\u975e\u5e38\u7684\u6743\u5a01\u5168\u9762\uff0c\u800c\u4e14\u8fd8\u662f\u514d\u8d39\u5f00\u6e90\u7684\u3002\u4e66\u4e2d\u6709\u975e\u5e38\u591a\u7ebf\u6027\u795e\u7ecf\u7f51\u7edc\u548c\u6df1\u5ea6\u5b66\u4e60\u8ba1\u7b97\u7684\u77e5\u8bc6\uff0c\u8fd8\u6709 NLP \u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u5982\u679c\u4f60\u7b80\u5355\u7684\u8ba4\u4e3a\u8fd9\u672c\u4e66\u9664\u4e86\u8bb2\u9053\u7406\uff0c\u5c31\u662f\u9644\u4e0a\u4e86\u4ee3\u7801\u7ed9\u6211\u4eec\u770b\uff0c\u90a3\u4e48\u5c31\u8349\u7387\u4e86\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u672c\u4e66\u53eb\u505a\u52a8\u624b\u5b66\u7684\u771f\u6b63\u539f\u56e0\u662f\u56e0\u4e3a\u5b83\u4e0d\u4ec5\u9644\u4e0a\u4e86\u4ee3\u7801\uff0c\u800c\u4e14\u4ee3\u7801\u8fd8\u662f\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u7684\u3002 \u6211\u4eec\u70b9\u51fb Jupyter Notebook\uff0c\u5c31\u53ef\u4ee5\u4e0b\u8f7d\u6574\u4e2a\u6559\u7a0b\u548c\u4ee3\u7801\u4e86\u3002 \u5f53\u6211\u4eec\u5b89\u88c5\u5b8c Miniconda\uff0c\u4e5f\u4e0b\u8f7d\u5b8c\u8fd9\u4e00\u672c\u4e66\u4e4b\u540e\u3002 \u9700\u8981\u6309\u7167\u8fd9\u4e2a \u5b89\u88c5\u6b65\u9aa4 \u8fdb\u884c\u5b89\u88c5\u3002 \u4f7f\u7528 ~/miniconda3/bin/conda init \u547d\u4ee4\uff0c\u521d\u59cb\u5316\u4e00\u4e0bconda\u3002 \u7136\u540e\u4f7f\u7528 conda create --name d2l python=3.8 -y \u4e3a\u8fd9\u672c\u4e66\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u73af\u5883\u3002 \u5728\u521b\u5efa\u597d\u65b0\u73af\u5883\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u9700\u8981\u6fc0\u6d3b\u8fd9\u4e2a\u73af\u5883\uff0c\u4f7f\u7528 conda activate d2l \u547d\u4ee4\u3002 \u63a5\u7740\u6211\u4eec\u6253\u5f00\u4e0b\u8f7d\u8fd9\u672c\u6559\u7a0b\u7684\u76ee\u5f55\uff0c\u5b83\u6709\u4e09\u4e2a\u6846\u67b6\uff0c\u76ee\u524d\u6211\u4eec\u4f7f\u7528 pytorch \u6846\u67b6\u3002 \u5982\u679c\u8fd8\u6ca1\u6709\u5b89\u88c5\u8fd9\u4e2a\u6846\u67b6\u7684\u8bdd\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e00\u6761\u547d\u4ee4 pip install torchvision==0.12.0 \u5b89\u88c5\u3002 \u7136\u540e\u9700\u8981\u5b89\u88c5 d2l \u8f6f\u4ef6\u5305\uff0c\u5b83\u5c01\u88c5\u4e86\u4e66\u4e2d\u5e38\u7528\u7684\u51fd\u6570\u548c\u7c7b\uff0c\u4f7f\u7528 pip install d2l==0.17.5 \u547d\u4ee4\u3002 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 Jupyter Notebook \u6253\u5f00\u8fd9\u4e2a\u6559\u7a0b\u3002\u6253\u5f00\u4e00\u4e2a\u547d\u4ee4\u884c\uff0c\u8f93\u5165 jupyter notebook \uff0c\u6309\u56de\u8f66\uff0c\u6211\u4eec\u5c31\u6253\u5f00\u4e86\u8fd9\u4e00\u4e2a\u6559\u7a0b\u3002 \u6253\u5f00\u8fd9\u672c\u6559\u7a0b\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u8bd5\u8bd5\u5b83\u662f\u600e\u4e48\u52a8\u624b\u7684\u3002 \u53ef\u4ee5\u70b9\u5230\u7ebf\u6027\u795e\u7ecf\u7f51\u7edc\u8fd9\u4e00\u7ae0\uff0c\u91cc\u9762\u7684 ipy \u6587\u4ef6\u90fd\u662f\u53ef\u4ee5\u8fd0\u884c\u7684\u3002\u9009\u62e9\u7ebf\u6027\u56de\u5f52\u8fd9\u4e00\u7ae0\u8282\uff0c\u662f\u53ef\u4ee5\u770b\u5230\u4ee3\u7801\u90e8\u5206\u7684\u3002\u70b9\u51fb \u8fd0\u884c \uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u4ee3\u7801\u90fd\u662f\u53ef\u4ee5\u8fd0\u884c\u7684\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u4e0a\u4e00\u884c\u4ee3\u7801 print(\u201chello world\u201d) \uff0c\u7136\u540e\u70b9\u51fb\u8fd0\u884c\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd0\u884c\u6210\u529f\uff0c\u8f93\u51fa\u4e86 hello world\u3002 \u672c\u7ae0\u8282\u5411\u5927\u5bb6\u5c55\u793a\u4e86 Conda \u662f\u600e\u4e48\u4e0b\u8f7d\u548c\u4f7f\u7528\u7684\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u52a8\u624b\u642d\u5efa\u300a\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u300b\u8fd9\u672c\u4e66\u7684\u5b66\u4e60\u73af\u5883\u3002\u5176\u5b9e Conda \u7684\u7528\u5904\u8fd8\u4e0d\u6b62\u4e8e\u6b64\uff0c\u63a5\u4e0b\u6765\u7684\u6587\u7ae0\u4e2d\u5c06\u4f1a\u5411\u5927\u5bb6\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u522b\u4eba\u642d\u5efa\u597d\u7684 Conda \u73af\u5883\u6765\u7f16\u8bd1\u4e00\u4e2a\u5927\u578b\u7684 C++ \u5de5\u7a0b\u3002","title":"\u4f7f\u7528\u5305\u7ba1\u7406\u5de5\u5177 Conda"},{"location":"remote_cpp_development/conda.html#conda","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u8fdc\u7a0b\u5f00\u53d1 C++ 002_Conda \u4e0d\u77e5\u9053\u5927\u5bb6\u6709\u6ca1\u6709\u8fd9\u6837\u7684\u7ecf\u9a8c\uff0c\u60f3\u8981\u5feb\u901f\u4e0a\u624b\u4e00\u4e2a\u9879\u76ee\u7684\u65f6\u5019\uff0c\u5374\u53d1\u73b0\u642d\u73af\u5883\u90fd\u8981\u8017\u4e2a\u5341\u5929\u534a\u4e2a\u6708\u7684\uff0c\u4e0d\u662f\u52a8\u6001\u5e93\u627e\u4e0d\u5230\uff0c\u5c31\u662f\u5934\u6587\u4ef6\u627e\u4e0d\u5230\u3002\u518d\u8005\uff0c\u6709\u7684\u8dd1\u8d77\u6765\u4e4b\u540e\uff0c\u5374\u53d1\u73b0\u4f9d\u8d56\u7684\u5305\u7248\u672c\u53c8\u4e0d\u5bf9\u3002 \u8fd9\u4e2a\u65f6\u5019\uff0c Conda \u5c31\u662f\u975e\u5e38\u6709\u5fc5\u8981\u5411\u5927\u5bb6\u63a8\u8350\u4e00\u6b3e\u73af\u5883\u7ba1\u7406\u795e\u5668\u3002 \u672c\u6587\u7684\u7ed3\u6784\u5982\u4e0b\uff1a Conda \u7684\u57fa\u672c\u4f7f\u7528 \u7528 Conda \u542f\u52a8\u300a\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u300b\u8fd9\u672c\u4e66\u7684\u5b66\u4e60\u73af\u5883","title":"\u4f7f\u7528\u5305\u7ba1\u7406\u5de5\u5177 Conda"},{"location":"remote_cpp_development/conda.html#conda_1","text":"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5728\u8fd9\u4e2a \u7f51\u7ad9 \u4e0b\u8f7d\u5bf9\u5e94\u7684\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\u7684 Miniconda \u73af\u5883\u3002 \u5728 Windows \u4e0b\uff0c\u5b83\u662f\u4e00\u4e2a\u666e\u901a\u7684\u8f6f\u4ef6\u5305\uff0c\u53cc\u51fb\u5c31\u53ef\u4ee5\u8fd0\u884c\u5b89\u88c5\u3002 \u5728 Linux \u4e0b\uff0c\u5b83\u662f\u4e00\u4e2a Shell \u7684\u811a\u672c\uff0c\u6211\u4eec\u4f7f\u7528 sh \u547d\u4ee4\u5c31\u53ef\u4ee5\u8fd0\u884c\u8fd9\u4e2a\u811a\u672c\u8fdb\u884c\u5b89\u88c5\u3002","title":"Conda \u7684\u57fa\u672c\u4f7f\u7528"},{"location":"remote_cpp_development/conda.html#conda_2","text":"\u7c7b\u4f3c\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u591a\u8fdb\u7a0b\u7684\u601d\u60f3\uff0cconda \u7684\u597d\u5904\u5c31\u662f\u4ee5\u73af\u5883\u4e3a\u5355\u4f4d\u505a\u5305\u7ba1\u7406\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u4e92\u76f8\u4e0d\u5e72\u6270\u7684\u73af\u5883\uff0c\u4e5f\u53ef\u4ee5\u4ece\u522b\u4eba\u9884\u8bbe\u597d\u7684\u73af\u5883\uff0c\u7136\u540e\u76f4\u63a5\u5b89\u88c5\u8f6f\u4ef6\u5305\u3002","title":"Conda \u8fdb\u884c\u73af\u5883\u9694\u79bb\u7684\u597d\u5904"},{"location":"remote_cpp_development/conda.html#_1","text":"\u5b66\u4e60\u6df1\u5ea6\u5b66\u4e60\u7684\u4eba\uff0c\u5e94\u8be5\u90fd\u542c\u8bf4\u8fc7 \u300a\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u300b \u8fd9\u672c\u4e66\uff0c\u4ed6\u662f\u7531\u5927\u795e\u674e\u6c90\u8001\u5e08\u7b49\u4eba\u51fa\u54c1\u7684\uff0c\u5b83\u4e0d\u4ec5\u975e\u5e38\u7684\u6743\u5a01\u5168\u9762\uff0c\u800c\u4e14\u8fd8\u662f\u514d\u8d39\u5f00\u6e90\u7684\u3002\u4e66\u4e2d\u6709\u975e\u5e38\u591a\u7ebf\u6027\u795e\u7ecf\u7f51\u7edc\u548c\u6df1\u5ea6\u5b66\u4e60\u8ba1\u7b97\u7684\u77e5\u8bc6\uff0c\u8fd8\u6709 NLP \u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u5982\u679c\u4f60\u7b80\u5355\u7684\u8ba4\u4e3a\u8fd9\u672c\u4e66\u9664\u4e86\u8bb2\u9053\u7406\uff0c\u5c31\u662f\u9644\u4e0a\u4e86\u4ee3\u7801\u7ed9\u6211\u4eec\u770b\uff0c\u90a3\u4e48\u5c31\u8349\u7387\u4e86\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u672c\u4e66\u53eb\u505a\u52a8\u624b\u5b66\u7684\u771f\u6b63\u539f\u56e0\u662f\u56e0\u4e3a\u5b83\u4e0d\u4ec5\u9644\u4e0a\u4e86\u4ee3\u7801\uff0c\u800c\u4e14\u4ee3\u7801\u8fd8\u662f\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u7684\u3002 \u6211\u4eec\u70b9\u51fb Jupyter Notebook\uff0c\u5c31\u53ef\u4ee5\u4e0b\u8f7d\u6574\u4e2a\u6559\u7a0b\u548c\u4ee3\u7801\u4e86\u3002 \u5f53\u6211\u4eec\u5b89\u88c5\u5b8c Miniconda\uff0c\u4e5f\u4e0b\u8f7d\u5b8c\u8fd9\u4e00\u672c\u4e66\u4e4b\u540e\u3002 \u9700\u8981\u6309\u7167\u8fd9\u4e2a \u5b89\u88c5\u6b65\u9aa4 \u8fdb\u884c\u5b89\u88c5\u3002 \u4f7f\u7528 ~/miniconda3/bin/conda init \u547d\u4ee4\uff0c\u521d\u59cb\u5316\u4e00\u4e0bconda\u3002 \u7136\u540e\u4f7f\u7528 conda create --name d2l python=3.8 -y \u4e3a\u8fd9\u672c\u4e66\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u73af\u5883\u3002 \u5728\u521b\u5efa\u597d\u65b0\u73af\u5883\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u9700\u8981\u6fc0\u6d3b\u8fd9\u4e2a\u73af\u5883\uff0c\u4f7f\u7528 conda activate d2l \u547d\u4ee4\u3002 \u63a5\u7740\u6211\u4eec\u6253\u5f00\u4e0b\u8f7d\u8fd9\u672c\u6559\u7a0b\u7684\u76ee\u5f55\uff0c\u5b83\u6709\u4e09\u4e2a\u6846\u67b6\uff0c\u76ee\u524d\u6211\u4eec\u4f7f\u7528 pytorch \u6846\u67b6\u3002 \u5982\u679c\u8fd8\u6ca1\u6709\u5b89\u88c5\u8fd9\u4e2a\u6846\u67b6\u7684\u8bdd\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e00\u6761\u547d\u4ee4 pip install torchvision==0.12.0 \u5b89\u88c5\u3002 \u7136\u540e\u9700\u8981\u5b89\u88c5 d2l \u8f6f\u4ef6\u5305\uff0c\u5b83\u5c01\u88c5\u4e86\u4e66\u4e2d\u5e38\u7528\u7684\u51fd\u6570\u548c\u7c7b\uff0c\u4f7f\u7528 pip install d2l==0.17.5 \u547d\u4ee4\u3002 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 Jupyter Notebook \u6253\u5f00\u8fd9\u4e2a\u6559\u7a0b\u3002\u6253\u5f00\u4e00\u4e2a\u547d\u4ee4\u884c\uff0c\u8f93\u5165 jupyter notebook \uff0c\u6309\u56de\u8f66\uff0c\u6211\u4eec\u5c31\u6253\u5f00\u4e86\u8fd9\u4e00\u4e2a\u6559\u7a0b\u3002 \u6253\u5f00\u8fd9\u672c\u6559\u7a0b\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u8bd5\u8bd5\u5b83\u662f\u600e\u4e48\u52a8\u624b\u7684\u3002 \u53ef\u4ee5\u70b9\u5230\u7ebf\u6027\u795e\u7ecf\u7f51\u7edc\u8fd9\u4e00\u7ae0\uff0c\u91cc\u9762\u7684 ipy \u6587\u4ef6\u90fd\u662f\u53ef\u4ee5\u8fd0\u884c\u7684\u3002\u9009\u62e9\u7ebf\u6027\u56de\u5f52\u8fd9\u4e00\u7ae0\u8282\uff0c\u662f\u53ef\u4ee5\u770b\u5230\u4ee3\u7801\u90e8\u5206\u7684\u3002\u70b9\u51fb \u8fd0\u884c \uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\u4ee3\u7801\u90fd\u662f\u53ef\u4ee5\u8fd0\u884c\u7684\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u52a0\u4e0a\u4e00\u884c\u4ee3\u7801 print(\u201chello world\u201d) \uff0c\u7136\u540e\u70b9\u51fb\u8fd0\u884c\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd0\u884c\u6210\u529f\uff0c\u8f93\u51fa\u4e86 hello world\u3002 \u672c\u7ae0\u8282\u5411\u5927\u5bb6\u5c55\u793a\u4e86 Conda \u662f\u600e\u4e48\u4e0b\u8f7d\u548c\u4f7f\u7528\u7684\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u52a8\u624b\u642d\u5efa\u300a\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u300b\u8fd9\u672c\u4e66\u7684\u5b66\u4e60\u73af\u5883\u3002\u5176\u5b9e Conda \u7684\u7528\u5904\u8fd8\u4e0d\u6b62\u4e8e\u6b64\uff0c\u63a5\u4e0b\u6765\u7684\u6587\u7ae0\u4e2d\u5c06\u4f1a\u5411\u5927\u5bb6\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u522b\u4eba\u642d\u5efa\u597d\u7684 Conda \u73af\u5883\u6765\u7f16\u8bd1\u4e00\u4e2a\u5927\u578b\u7684 C++ \u5de5\u7a0b\u3002","title":"\u521b\u5efa \u300a\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u300b \u5b66\u4e60\u73af\u5883"},{"location":"remote_cpp_development/remote_ssh.html","text":"VS Code \u63d2\u4ef6 Remote SSH \u00b6 Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u8fdc\u7a0b\u5f00\u53d1C++001_Remote SSH \u5728\u5b66\u4e60\u8fc7\u5982\u4f55\u4f7f\u7528 SSH \u767b\u5f55 GitHub \u540e GitHub SSH \u514d\u5bc6\u7801\u767b\u5f55 \uff0c\u6211\u4eec\u5bf9 SSH \u5df2\u7ecf\u6709\u4e86\u57fa\u7840\u7684\u4e86\u89e3\uff0c\u6bd4\u5982\u50cf\u817e\u8baf\u4e91\u548c\u963f\u91cc\u4e91\u8fd9\u6837\u79df\u7528\u7684\u670d\u52a1\u5668\uff0c\u6211\u4eec\u90fd\u662f\u53ef\u4ee5\u901a\u8fc7 SSH \u53bb\u767b\u5f55\u3002 \u8fdc\u7a0b\u5f00\u53d1 C++ \u8fd9\u4e00\u7cfb\u5217\u5185\u5bb9\u5c06\u5411\u5927\u5bb6\u5c55\u793a\u5982\u4f55\u901a\u8fc7 SSH \u767b\u5f55\u4e00\u4e2a\u670d\u52a1\u5668\u3002 \u9996\u5148\uff0c\u8fd9\u671f\u4e3b\u8981\u5411\u5927\u5bb6\u4ecb\u7ecd\u4e00\u6b3e\u975e\u5e38\u597d\u7528\u7684 VS Code \u63d2\u4ef6: Remote SSH \uff0c\u5b83\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u5f00\u53d1\u50cf\u5728\u672c\u5730\u5f00\u53d1\u4e00\u6837\u7b80\u5355\u3002 \u767b\u5f55\u8fdc\u7a0b\u670d\u52a1\u5668 \u00b6 SSH \u7684\u4f7f\u7528\u8f83\u7b80\u5355\uff0c\u5982\u679c\u5df2\u7ecf\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u914d\u7f6e\u4e86\u5bc6\u94a5\uff0c\u90a3\u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 SSH \u53bb\u767b\u9646\u8fdc\u7a0b\u670d\u52a1\u5668\uff1a \u5728\u63a7\u5236\u53f0\u8f93\u5165 ssh remote-21-ttlarva \uff08remote-21-ttlarva \u9700\u6539\u6210\u6240\u9700\u8981\u4f7f\u7528\u7684 Host \u540d\uff09\u3002 \u5728\u767b\u4e0a\u8fdc\u7a0b\u670d\u52a1\u5668\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u6765\u5230\u4e86 Linux \u7cfb\u7edf\u4e0b\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 Linux \u547d\u4ee4\uff0c\u4f8b\u5982 ls \u548c man ssh \u3002\u4e0d\u8fc7\u53ea\u6709\u4e00\u4e2a\u547d\u4ee4\u884c\u662f\u4e0d\u591f\u65b9\u4fbf\u7684\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u719f\u6089 Vim \u8fd9\u4e00\u7c7b\u8f6f\u4ef6\uff0c\u5e76\u4e14\u559c\u6b22\u7528\u952e\u76d8\u52a0\u9f20\u6807\u7684\u7ec4\u5408\uff0c\u90a3\u4e48\u5c31\u9700\u8981 VS Code \u7684\u4e00\u4e2a\u795e\u5947\u63d2\u4ef6\u4e86\uff1aRemote SSH\u3002 Remote SSH \u63d2\u4ef6\u5e95\u5c42\u662f\u901a\u8fc7 SSH \u534f\u8bae\u7684\uff0c\u5e76\u4e14\u505a\u4e86\u975e\u5e38\u591a\u8d34\u5fc3\u7684\u5f00\u53d1\u548c\u4f18\u5316\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u5728\u5b89\u88c5\u597d\u8fd9\u4e2a\u63d2\u4ef6\u5e76\u914d\u7f6e\u597d SSH \u767b\u5f55\u9009\u9879\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u6253\u5f00\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u76ee\u5f55\uff0c\u5c31\u50cf\u5728\u672c\u5730\u64cd\u4f5c\u4e00\u6837\u3002\u66f4\u5f3a\u5927\u7684\u662f\uff0cVS Code \u6709\u4e86\u8fd9\u4e2a\u63d2\u4ef6\u540e\uff0cVS Code \u7684\u5176\u4ed6\u63d2\u4ef6\u90fd\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u6362\u8a00\u4e4b\uff0c\u8fd9\u5c31\u8ba9\u8fdc\u7a0b\u7684\u5f00\u53d1\u66f4\u63a5\u8fd1\u672c\u5730\u5f00\u53d1\u4e86\u3002 \u5b89\u88c5 Remote SSH \u00b6 \u5b89\u88c5\u8f83\u4e3a\u7b80\u5355\uff0c\u548c\u5176\u4ed6\u63d2\u4ef6\u5b89\u88c5\u65b9\u5f0f\u76f8\u540c\uff1a \u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\uff0c\u4f1a\u53d1\u73b0\u5de6\u4e0b\u89d2\u591a\u4e86\u4e00\u4e2a\u6309\u94ae\uff1a \u70b9\u51fb\u5b83\uff0c\u7136\u540e\u9009\u62e9 Open Configuration File\uff1a \u6253\u5f00\u6211\u4eec\u914d\u7f6e\u6587\u4ef6\uff0c\u5c31\u662f .ssh/config Host oneflow-15-ttlarva-remote HostName 182.18.94.166 Port 1615 User ttlarva IdentityFile E:\\oneflow_ssh\\id_rsa Host remote-21-ttlarva HostName 192.168.1.41 Port 20021 User ttlarva IdentityFile E:\\oneflow_ssh\\id_rsa ProxyCommand C:\\Windows\\System32\\OpenSSH\\ssh.exe -q -x -w %h:%p oneflow-15-ttlarva-remote StrictHostKeyChecking no \u8fd9\u91cc\u7684 Host \u540d\u5c31\u662f\u65b9\u4fbf\u6211\u4eec\u53bb\u8bb0\u7684\u540d\uff0c\u800c HostName \u5c31\u662f IP \u5730\u5740\uff0c\u505a\u5b8c\u4e00\u7cfb\u5217\u914d\u7f6e\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u8fde\u63a5\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u4e86\u3002 \u5f53\u5b89\u88c5\u597d\u8fd9\u4e2a\u63d2\u4ef6\u4e4b\u540e\uff0c\u6211\u4eec\u8fd8\u4f1a\u53d1\u73b0\u5de6\u8fb9\u591a\u4e86\u4e00\u4e2a\u7535\u8111\u4e00\u6837\u7684\u56fe\u6807\uff1a \u6211\u4eec\u53ef\u4ee5\u70b9\u51fb Connect to Host in Current Window \u5728\u5f53\u524d\u7684\u7a97\u53e3\uff1a \u7b49\u5230\u5de6\u4e0b\u89d2\u4e0d\u8f6c\u5708\u65f6\uff0c\u5c31\u8bf4\u660e\u6211\u4eec\u5df2\u7ecf\u8fde\u63a5\u597d\u4e86\u3002\u6211\u4eec\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u8bd5\u8bd5\uff0c\u5982\u679c\u53ef\u4ee5\u6572\u4e0b Linux \u4e0b\u7684\u547d\u4ee4\u4e86\uff0c\u8fd9\u5c31\u8bf4\u660e\u5df2\u7ecf\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u4e86\u3002 \u63a5\u7740\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 VS Code \u53bb\u6253\u5f00\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u5939\u76ee\u5f55\uff0c\u70b9\u51fb\u76ee\u5f55\uff1aOpen Folder\u3002 \u770b\u5230\u4f60\u9700\u8981\u7684\u8fd9\u4e2a\u6587\u4ef6\u5939\u5c31\u662f\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\uff0c\u6253\u5f00\u5b83\uff0c\u70b9\u51fb ok\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u6253\u5f00\u4e86\u4e00\u4e2a\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u4e00\u4e2a\u4f60\u9700\u8981\u7684\u4ed3\u5e93\u3002 \u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u5b89\u88c5\u63d2\u4ef6 \u00b6 \u5728\u5df2\u7ecf\u6709 Remote SSH \u80fd\u767b\u5f55\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u5b89\u88c5 VS Code \u63d2\u4ef6\u3002 \u4e00\u5f00\u59cb\u6253\u5f00\u4e00\u4e2a CMake \u7684\u6587\u4ef6\uff0c\u662f\u6ca1\u6709\u9ad8\u4eae\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6ca1\u6709\u63d2\u4ef6\u5bf9\u5b83\u505a\u8bed\u6cd5\u89e3\u6790\u3002 \u5982\u679c\u6211\u4eec\u73b0\u5728\u60f3\u8ba9\u4ed6\u9ad8\u4eae\u8d77\u6765\uff0c\u5c31\u9700\u8981\u5b89\u88c5\u63d2\u4ef6\uff1a\u6253\u5f00\u63d2\u4ef6\u5b89\u88c5\u6309\u94ae\uff0c\u641c\u7d22 CMake\u3002 \u770b\u5230 Install in SSH:remote \u8fd9\u4e2a\u6309\u94ae\uff0c\u662f\u63d0\u793a\u6211\u4eec\u53ef\u4ee5\u5b89\u88c5\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u70b9\u51fb\u5b83\u540e\uff0c\u518d\u56de\u8fc7\u6765\u770b\u6211\u4eec\u7684 CMake \u6587\u4ef6\uff0c\u5c31\u5df2\u7ecf\u9ad8\u4eae\u4e86\u3002 \u5f53\u6211\u4eec\u70b9\u51fb\u5230\u63d2\u4ef6\u5b89\u88c5\u680f\uff0c\u4f1a\u53d1\u73b0\u5b83\u6709\u5e2e\u6211\u4eec\u5c55\u793a\u51fa Local \u672c\u5730\u5b89\u88c5\u4e86\u54ea\u4e9b\u63d2\u4ef6\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u5b89\u88c5\u4e86\u54ea\u4e9b\u63d2\u4ef6\uff0c\u5982\u679c\u5927\u5bb6\u6709\u53d1\u73b0\u5728\u672c\u5730\u975e\u5e38\u597d\u7528\u7684\u63d2\u4ef6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5b89\u88c5\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u3002\u70b9\u51fb install in SSH:remote\uff0c\u5c31\u53ef\u4ee5\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u4f7f\u7528\u4e86\u3002 \u5728\u6211\u4eec\u7ed9 VS Code \u5b89\u88c5\u4e86 Remote SSH \u63d2\u4ef6\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u5f00\u53d1\u50cf\u5728\u672c\u5730\u5f00\u53d1\u4e00\u6837\u7b80\u5355\uff0c\u4e5f\u8ba9\u8fdc\u7a0b\u670d\u52a1\u5668\u53ef\u4ee5\u652f\u6301\u5b89\u88c5\u4e00\u7cfb\u5217\u7684\u63d2\u4ef6\u3002","title":"VS Code \u63d2\u4ef6 Remote SSH"},{"location":"remote_cpp_development/remote_ssh.html#vs-code-remote-ssh","text":"Bilibili\u89c6\u9891\u4f20\u9001\u95e8\uff1a \u8fdc\u7a0b\u5f00\u53d1C++001_Remote SSH \u5728\u5b66\u4e60\u8fc7\u5982\u4f55\u4f7f\u7528 SSH \u767b\u5f55 GitHub \u540e GitHub SSH \u514d\u5bc6\u7801\u767b\u5f55 \uff0c\u6211\u4eec\u5bf9 SSH \u5df2\u7ecf\u6709\u4e86\u57fa\u7840\u7684\u4e86\u89e3\uff0c\u6bd4\u5982\u50cf\u817e\u8baf\u4e91\u548c\u963f\u91cc\u4e91\u8fd9\u6837\u79df\u7528\u7684\u670d\u52a1\u5668\uff0c\u6211\u4eec\u90fd\u662f\u53ef\u4ee5\u901a\u8fc7 SSH \u53bb\u767b\u5f55\u3002 \u8fdc\u7a0b\u5f00\u53d1 C++ \u8fd9\u4e00\u7cfb\u5217\u5185\u5bb9\u5c06\u5411\u5927\u5bb6\u5c55\u793a\u5982\u4f55\u901a\u8fc7 SSH \u767b\u5f55\u4e00\u4e2a\u670d\u52a1\u5668\u3002 \u9996\u5148\uff0c\u8fd9\u671f\u4e3b\u8981\u5411\u5927\u5bb6\u4ecb\u7ecd\u4e00\u6b3e\u975e\u5e38\u597d\u7528\u7684 VS Code \u63d2\u4ef6: Remote SSH \uff0c\u5b83\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u5f00\u53d1\u50cf\u5728\u672c\u5730\u5f00\u53d1\u4e00\u6837\u7b80\u5355\u3002","title":"VS Code \u63d2\u4ef6 Remote SSH"},{"location":"remote_cpp_development/remote_ssh.html#_1","text":"SSH \u7684\u4f7f\u7528\u8f83\u7b80\u5355\uff0c\u5982\u679c\u5df2\u7ecf\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u914d\u7f6e\u4e86\u5bc6\u94a5\uff0c\u90a3\u5c31\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 SSH \u53bb\u767b\u9646\u8fdc\u7a0b\u670d\u52a1\u5668\uff1a \u5728\u63a7\u5236\u53f0\u8f93\u5165 ssh remote-21-ttlarva \uff08remote-21-ttlarva \u9700\u6539\u6210\u6240\u9700\u8981\u4f7f\u7528\u7684 Host \u540d\uff09\u3002 \u5728\u767b\u4e0a\u8fdc\u7a0b\u670d\u52a1\u5668\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u6765\u5230\u4e86 Linux \u7cfb\u7edf\u4e0b\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528 Linux \u547d\u4ee4\uff0c\u4f8b\u5982 ls \u548c man ssh \u3002\u4e0d\u8fc7\u53ea\u6709\u4e00\u4e2a\u547d\u4ee4\u884c\u662f\u4e0d\u591f\u65b9\u4fbf\u7684\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u719f\u6089 Vim \u8fd9\u4e00\u7c7b\u8f6f\u4ef6\uff0c\u5e76\u4e14\u559c\u6b22\u7528\u952e\u76d8\u52a0\u9f20\u6807\u7684\u7ec4\u5408\uff0c\u90a3\u4e48\u5c31\u9700\u8981 VS Code \u7684\u4e00\u4e2a\u795e\u5947\u63d2\u4ef6\u4e86\uff1aRemote SSH\u3002 Remote SSH \u63d2\u4ef6\u5e95\u5c42\u662f\u901a\u8fc7 SSH \u534f\u8bae\u7684\uff0c\u5e76\u4e14\u505a\u4e86\u975e\u5e38\u591a\u8d34\u5fc3\u7684\u5f00\u53d1\u548c\u4f18\u5316\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u5728\u5b89\u88c5\u597d\u8fd9\u4e2a\u63d2\u4ef6\u5e76\u914d\u7f6e\u597d SSH \u767b\u5f55\u9009\u9879\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u6253\u5f00\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u76ee\u5f55\uff0c\u5c31\u50cf\u5728\u672c\u5730\u64cd\u4f5c\u4e00\u6837\u3002\u66f4\u5f3a\u5927\u7684\u662f\uff0cVS Code \u6709\u4e86\u8fd9\u4e2a\u63d2\u4ef6\u540e\uff0cVS Code \u7684\u5176\u4ed6\u63d2\u4ef6\u90fd\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u6362\u8a00\u4e4b\uff0c\u8fd9\u5c31\u8ba9\u8fdc\u7a0b\u7684\u5f00\u53d1\u66f4\u63a5\u8fd1\u672c\u5730\u5f00\u53d1\u4e86\u3002","title":"\u767b\u5f55\u8fdc\u7a0b\u670d\u52a1\u5668"},{"location":"remote_cpp_development/remote_ssh.html#remote-ssh","text":"\u5b89\u88c5\u8f83\u4e3a\u7b80\u5355\uff0c\u548c\u5176\u4ed6\u63d2\u4ef6\u5b89\u88c5\u65b9\u5f0f\u76f8\u540c\uff1a \u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\uff0c\u4f1a\u53d1\u73b0\u5de6\u4e0b\u89d2\u591a\u4e86\u4e00\u4e2a\u6309\u94ae\uff1a \u70b9\u51fb\u5b83\uff0c\u7136\u540e\u9009\u62e9 Open Configuration File\uff1a \u6253\u5f00\u6211\u4eec\u914d\u7f6e\u6587\u4ef6\uff0c\u5c31\u662f .ssh/config Host oneflow-15-ttlarva-remote HostName 182.18.94.166 Port 1615 User ttlarva IdentityFile E:\\oneflow_ssh\\id_rsa Host remote-21-ttlarva HostName 192.168.1.41 Port 20021 User ttlarva IdentityFile E:\\oneflow_ssh\\id_rsa ProxyCommand C:\\Windows\\System32\\OpenSSH\\ssh.exe -q -x -w %h:%p oneflow-15-ttlarva-remote StrictHostKeyChecking no \u8fd9\u91cc\u7684 Host \u540d\u5c31\u662f\u65b9\u4fbf\u6211\u4eec\u53bb\u8bb0\u7684\u540d\uff0c\u800c HostName \u5c31\u662f IP \u5730\u5740\uff0c\u505a\u5b8c\u4e00\u7cfb\u5217\u914d\u7f6e\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u8fde\u63a5\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u4e86\u3002 \u5f53\u5b89\u88c5\u597d\u8fd9\u4e2a\u63d2\u4ef6\u4e4b\u540e\uff0c\u6211\u4eec\u8fd8\u4f1a\u53d1\u73b0\u5de6\u8fb9\u591a\u4e86\u4e00\u4e2a\u7535\u8111\u4e00\u6837\u7684\u56fe\u6807\uff1a \u6211\u4eec\u53ef\u4ee5\u70b9\u51fb Connect to Host in Current Window \u5728\u5f53\u524d\u7684\u7a97\u53e3\uff1a \u7b49\u5230\u5de6\u4e0b\u89d2\u4e0d\u8f6c\u5708\u65f6\uff0c\u5c31\u8bf4\u660e\u6211\u4eec\u5df2\u7ecf\u8fde\u63a5\u597d\u4e86\u3002\u6211\u4eec\u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u8bd5\u8bd5\uff0c\u5982\u679c\u53ef\u4ee5\u6572\u4e0b Linux \u4e0b\u7684\u547d\u4ee4\u4e86\uff0c\u8fd9\u5c31\u8bf4\u660e\u5df2\u7ecf\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u4e86\u3002 \u63a5\u7740\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528 VS Code \u53bb\u6253\u5f00\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u5939\u76ee\u5f55\uff0c\u70b9\u51fb\u76ee\u5f55\uff1aOpen Folder\u3002 \u770b\u5230\u4f60\u9700\u8981\u7684\u8fd9\u4e2a\u6587\u4ef6\u5939\u5c31\u662f\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\uff0c\u6253\u5f00\u5b83\uff0c\u70b9\u51fb ok\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u6253\u5f00\u4e86\u4e00\u4e2a\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u4e00\u4e2a\u4f60\u9700\u8981\u7684\u4ed3\u5e93\u3002","title":"\u5b89\u88c5 Remote SSH"},{"location":"remote_cpp_development/remote_ssh.html#_2","text":"\u5728\u5df2\u7ecf\u6709 Remote SSH \u80fd\u767b\u5f55\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u5b89\u88c5 VS Code \u63d2\u4ef6\u3002 \u4e00\u5f00\u59cb\u6253\u5f00\u4e00\u4e2a CMake \u7684\u6587\u4ef6\uff0c\u662f\u6ca1\u6709\u9ad8\u4eae\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6ca1\u6709\u63d2\u4ef6\u5bf9\u5b83\u505a\u8bed\u6cd5\u89e3\u6790\u3002 \u5982\u679c\u6211\u4eec\u73b0\u5728\u60f3\u8ba9\u4ed6\u9ad8\u4eae\u8d77\u6765\uff0c\u5c31\u9700\u8981\u5b89\u88c5\u63d2\u4ef6\uff1a\u6253\u5f00\u63d2\u4ef6\u5b89\u88c5\u6309\u94ae\uff0c\u641c\u7d22 CMake\u3002 \u770b\u5230 Install in SSH:remote \u8fd9\u4e2a\u6309\u94ae\uff0c\u662f\u63d0\u793a\u6211\u4eec\u53ef\u4ee5\u5b89\u88c5\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u70b9\u51fb\u5b83\u540e\uff0c\u518d\u56de\u8fc7\u6765\u770b\u6211\u4eec\u7684 CMake \u6587\u4ef6\uff0c\u5c31\u5df2\u7ecf\u9ad8\u4eae\u4e86\u3002 \u5f53\u6211\u4eec\u70b9\u51fb\u5230\u63d2\u4ef6\u5b89\u88c5\u680f\uff0c\u4f1a\u53d1\u73b0\u5b83\u6709\u5e2e\u6211\u4eec\u5c55\u793a\u51fa Local \u672c\u5730\u5b89\u88c5\u4e86\u54ea\u4e9b\u63d2\u4ef6\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u5b89\u88c5\u4e86\u54ea\u4e9b\u63d2\u4ef6\uff0c\u5982\u679c\u5927\u5bb6\u6709\u53d1\u73b0\u5728\u672c\u5730\u975e\u5e38\u597d\u7528\u7684\u63d2\u4ef6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5b89\u88c5\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u3002\u70b9\u51fb install in SSH:remote\uff0c\u5c31\u53ef\u4ee5\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u4f7f\u7528\u4e86\u3002 \u5728\u6211\u4eec\u7ed9 VS Code \u5b89\u88c5\u4e86 Remote SSH \u63d2\u4ef6\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u5f00\u53d1\u50cf\u5728\u672c\u5730\u5f00\u53d1\u4e00\u6837\u7b80\u5355\uff0c\u4e5f\u8ba9\u8fdc\u7a0b\u670d\u52a1\u5668\u53ef\u4ee5\u652f\u6301\u5b89\u88c5\u4e00\u7cfb\u5217\u7684\u63d2\u4ef6\u3002","title":"\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u5b89\u88c5\u63d2\u4ef6"}]}